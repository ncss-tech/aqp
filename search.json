[{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to SoilProfileCollection Objects","text":"basic introduction SoilProfileCollection class object defined aqp package R. SoilProfileCollection class designed simplify process working collection data associated soil profiles: site-level data, horizon-level data, spatial data, diagnostic horizon data, metadata, etc. Examples listed meant copied/pasted document interactively run within R. Comments (preceded # symbol) briefly describe code line . documentation objects functions aqp package can accessed typing help(aqp) (generally, ?function_name) R console.","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Introduction to SoilProfileCollection Objects","text":"tutorial use sample data included aqp package, based characterization data 10 soils sampled serpentinitic parent material described McGahan et al, 2009. begin load required packages. may first install missing:","code":"# install CRAN release + dependencies install.packages('aqp', dependencies = TRUE) install.packages('remotes', dependencies = TRUE)  # install latest version from GitHub remotes::install_github(\"ncss-tech/aqp\", dependencies = FALSE) library(aqp) library(lattice) # load sample data set, a data.frame object with horizon-level data from 10 profiles data(sp4) str(sp4) #> 'data.frame':    30 obs. of  13 variables: #>  $ id         : chr  \"colusa\" \"colusa\" \"colusa\" \"colusa\" ... #>  $ name       : chr  \"A\" \"ABt\" \"Bt1\" \"Bt2\" ... #>  $ top        : int  0 3 8 30 0 9 0 4 13 0 ... #>  $ bottom     : int  3 8 30 42 9 34 4 13 40 6 ... #>  $ K          : num  0.3 0.2 0.1 0.1 0.2 0.3 0.2 0.6 0.8 0.4 ... #>  $ Mg         : num  25.7 23.7 23.2 44.3 21.9 18.9 12.1 12.1 17.7 16.4 ... #>  $ Ca         : num  9 5.6 1.9 0.3 4.4 4.5 1.4 7 4.4 24.1 ... #>  $ CEC_7      : num  23 21.4 23.7 43 18.8 27.5 23.7 18 20 31.1 ... #>  $ ex_Ca_to_Mg: num  0.35 0.23 0.08 0.01 0.2 0.2 0.58 0.51 0.25 1.47 ... #>  $ sand       : int  46 42 40 27 54 49 43 36 27 43 ... #>  $ silt       : int  33 31 28 18 20 18 55 49 45 42 ... #>  $ clay       : int  21 27 32 55 25 34 3 15 27 15 ... #>  $ CF         : num  0.12 0.27 0.27 0.16 0.55 0.84 0.5 0.75 0.67 0.02 ... # optionally read about it... # ?sp4  # upgrade to SoilProfileCollection # 'id' is the name of the column containing the profile ID # 'top' is the name of the column containing horizon upper boundaries # 'bottom' is the name of the column containing horizon lower boundaries depths(sp4) <- id ~ top + bottom  # define \"horizon designation\" column name for the collection hzdesgnname(sp4) <- 'name'  # check it out: class(sp4) #> [1] \"SoilProfileCollection\" #> attr(,\"package\") #> [1] \"aqp\" print(sp4) #> SoilProfileCollection with 10 profiles and 30 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 16 - 49 cm #>  #> ----- Horizons (6 / 30 rows  |  10 / 14 columns) ----- #>      id hzID top bottom name   K   Mg  Ca CEC_7 ex_Ca_to_Mg #>  colusa    1   0      3    A 0.3 25.7 9.0  23.0        0.35 #>  colusa    2   3      8  ABt 0.2 23.7 5.6  21.4        0.23 #>  colusa    3   8     30  Bt1 0.1 23.2 1.9  23.7        0.08 #>  colusa    4  30     42  Bt2 0.1 44.3 0.3  43.0        0.01 #>   glenn    5   0      9    A 0.2 21.9 4.4  18.8        0.20 #>   glenn    6   9     34   Bt 0.3 18.9 4.5  27.5        0.20 #> [... more horizons ...] #>  #> ----- Sites (6 / 10 rows  |  1 / 1 columns) ----- #>         id #>     colusa #>      glenn #>      kings #>   mariposa #>  mendocino #>       napa #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY]"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"object-creation","dir":"Articles","previous_headings":"","what":"Object Creation","title":"Introduction to SoilProfileCollection Objects","text":"SoilProfileCollection objects typically created “promoting” data.frame objects (rectangular tables data) contain least three essential columns: ID column uniquely identifying groups horizons (e.g. pedons) horizon top boundaries horizon bottom boundaries data.frame sorted internally according profile ID horizon top boundary. Formula notation used define columns used promote data.frame object:","code":"idcolumn ~ hz_top_column + hz_bottom_column"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"rapid-templating","dir":"Articles","previous_headings":"Object Creation","what":"Rapid Templating","title":"Introduction to SoilProfileCollection Objects","text":"Small collections soil profiles can described using text “templates” quickSPC(). Templates take form : ID:AAA|BBB|CCCCCC: relative thickness specified horizon designations, split “|” symbol ID:-B-C: horizons random thickness specified horizon designations, split “-” symbol “ID:” prefix optional, unique IDs generated digest package omitted.","code":"# character vector of horizon templates # must all use the same formatting x <- c(   'P1:AAA|BwBwBwBw|CCCCCCC|CdCdCdCd',   'P2:ApAp|AE|BhsBhs|Bw1Bw1|Bw2|CCCCCCC',   'P3:A|Bt1Bt1Bt1|Bt2Bt2Bt2|Bt3|Cr|RRRRRR' )  # each horizon label is '10' depth-units (default) s <- quickSPC(x)  # sketch profiles par(mar = c(0, 0, 0, 0)) plotSPC(s, name.style = 'center-center',          cex.names = 1, depth.axis = FALSE,          hz.depths = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"accessing-setting-and-replacing-data","dir":"Articles","previous_headings":"","what":"Accessing, Setting, and Replacing Data","title":"Introduction to SoilProfileCollection Objects","text":"“Accessor” functions used extract specific components within SoilProfileCollection objects. Methods return column name. useful extracting depths, horizon designations, IDs, etc. taking SPC apart specific task. idname(sp4): extract profile ID name (column name used init SPC) horizonDepths(sp4): horizon top / bottom depth names (used init SPC) hzidname(sp4): horizon ID name (typically automatically built init time) hzdesgnname(sp4): horizon designation name (set) hztexclname(sp4): horizon texture class name (set) Methods return vector values. profile_id(sp4): profile IDs, order hzID(sp4): horizon IDs, order hzDesgn(sp4): horizon designations, order Methods return site/horizon attribute column names. names(sp4): site + horizon names concatenated single vector horizonNames(sp4): horizon names siteNames(sp4): site names Profile horizon totals. length(sp4): number profiles collection nrow(sp4): number horizons collection methods. depth_units(sp4): defaults ‘cm’ SPC creation metadata(sp4): returns list object base + optional (user-defined) metadata elements","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"horizon-and-site-data","dir":"Articles","previous_headings":"","what":"Horizon and Site Data","title":"Introduction to SoilProfileCollection Objects","text":"Horizon data information key columns (unique profile ID depths) primary input methods provided create object. Site data can derived unique profile-specific values within input horizon data, joined external source based profile ID. site horizon data stored data.frame within SoilProfileCollection; one rows (per profile ID) horizon table one row (per profile ID) site table. SoilProfileCollection also supports data.table, tibble objects data.frame slots. Columns site horizon tables can accessed $ syntax notation, similar data.frame. New data can assigned either table manner, long length new data : length number profiles collection (target site table) length number horizons collection (target horizon table) length 1; selecting target table requires site(object)$new_column <- new_value new site data horizons(object)$new_column <- new value horizon Assignment new data existing new attributes can proceed follows. Horizon site data can modified via extraction data.frame followed replacement (horizon data) join (site data). Note approach gives flexibility, also dangerous–replacement horizon data new data don’t exactly conform original sorting may corrupt SoilProfileCollection.","code":"# site-level (based on length of assigned data == number of profiles) sp4$elevation <- rnorm(n = length(sp4), mean = 1000, sd = 150)   # horizon-level (calculated from two horizon-level columns) sp4$thickness <- sp4$bottom - sp4$top   # extraction of specific attributes by name sp4$clay # vector of clay content (horizon data) #>  [1] 21 27 32 55 25 34  3 15 27 32 25 31 33 13 21 23 15 17 12 19 14 14 22 25 40 51 67 24 25 32 sp4$elevation # vector of simulated elevation (site data) #>  [1]  789.9935 1038.2976  634.4105  999.1643 1093.2329 1172.2617  726.7274  962.9012  963.3701 #> [10]  957.5942 # unit-length value explicitly targeting site data site(sp4)$collection_id <- 1  # assign a single single value into horizon-level attributes sp4$constant <- rep(1, times = nrow(sp4))  # unit-length value explicitly targeting horizon data horizons(sp4)$analysis_group <- \"SERP\"  # _moves_ the named column from horizon to site site(sp4) <- ~ constant # extract horizon data to data.frame h <- horizons(sp4)  # add a new column and save back to original object h$random.numbers <- rnorm(n = nrow(h), mean = 0, sd = 1)  # _replace_ original horizon data with modified version replaceHorizons(sp4) <- h  # extract site data to data.frame s <- site(sp4)  # add a fake group to the site data s$group <- factor(rep(c('A', 'B'), length.out = nrow(s)))  # join new site data with previous data: old data are _not_ replaced site(sp4) <- s  # check sp4 #> SoilProfileCollection with 10 profiles and 30 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 16 - 49 cm #>  #> ----- Horizons (6 / 30 rows  |  10 / 17 columns) ----- #>      id hzID top bottom name   K   Mg  Ca CEC_7 ex_Ca_to_Mg #>  colusa    1   0      3    A 0.3 25.7 9.0  23.0        0.35 #>  colusa    2   3      8  ABt 0.2 23.7 5.6  21.4        0.23 #>  colusa    3   8     30  Bt1 0.1 23.2 1.9  23.7        0.08 #>  colusa    4  30     42  Bt2 0.1 44.3 0.3  43.0        0.01 #>   glenn    5   0      9    A 0.2 21.9 4.4  18.8        0.20 #>   glenn    6   9     34   Bt 0.3 18.9 4.5  27.5        0.20 #> [... more horizons ...] #>  #> ----- Sites (6 / 10 rows  |  5 / 5 columns) ----- #>         id elevation collection_id constant group #>     colusa  789.9935             1        1     A #>      glenn 1038.2976             1        1     B #>      kings  634.4105             1        1     A #>   mariposa  999.1643             1        1     B #>  mendocino 1093.2329             1        1     A #>       napa 1172.2617             1        1     B #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY]"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"diagnostic-horizons","dir":"Articles","previous_headings":"","what":"Diagnostic Horizons","title":"Introduction to SoilProfileCollection Objects","text":"Diagnostic horizons typically span several genetic horizons may may present every profile. accommodate wide range possibilities, diagnostic horizon data stored data.frame “long format”: row corresponds diagnostic feature single profile, identified column matching ID column used initialize SoilProfileCollection object label reflecting feature kind. diagnostic horizon data restrictions data content, long row ID exists within collection. sure use ID column name used initialize SoilProfileCollection object.","code":"dh <- data.frame(   id = 'colusa',   kind = 'argillic',   top = 8,   bottom = 42,   stringsAsFactors = FALSE )  # overwrite any existing diagnostic horizon data diagnostic_hz(sp4) <- dh  # append to diagnostic horizon data dh <- diagnostic_hz(sp4) dh.new <- data.frame(   id = 'napa',   kind = 'argillic',   top = 6,   bottom = 20,   stringsAsFactors = FALSE )  # overwrite existing diagnostic horizon data with appended data diagnostic_hz(sp4) <- rbind(dh, dh.new)"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"root-restrictive-features","dir":"Articles","previous_headings":"","what":"Root Restrictive Features","title":"Introduction to SoilProfileCollection Objects","text":"Features restrict root entry (fine fine roots) commonly used estimate functional soil depth. Restrictive features include salt accumulations, duripans, fragipans, paralithic materials, lithic contact, abrupt change chemical property. soils restrictive features, therefore data stored data.frame “long format”. row corresponds restrictive feature, associated depths, identified profile_id(). may one restrictive feature per soil profile. example data sp4 describe restrictive features, simulate bottom profile + 20cm.","code":"# get the depth of each profile rf.top <- profileApply(sp4, max) rf.bottom <- rf.top + 20  # the profile IDs can be extracted from the names attribute pIDs <- names(rf.top)  # note: profile IDs must be stored in a column named for idname(sp4) -> 'id' rf <- data.frame(   id = pIDs,    top = rf.top,    bottom = rf.bottom,    kind = 'fake',   stringsAsFactors = FALSE )  # overwrite any existing diagnostic horizon data restrictions(sp4) <- rf  # check restrictions(sp4) #>                id top bottom kind #> 1          colusa  42     62 fake #> 2           glenn  34     54 fake #> 3           kings  40     60 fake #> 4        mariposa  49     69 fake #> 5       mendocino  30     50 fake #> 6            napa  20     40 fake #> 7      san benito  20     40 fake #> 8          shasta  40     60 fake #> 9  shasta-trinity  40     60 fake #> 10         tehama  16     36 fake"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"object-metadata","dir":"Articles","previous_headings":"","what":"Object Metadata","title":"Introduction to SoilProfileCollection Objects","text":"SoilProfileCollection metadata can extracted set using metadata() metadata<- methods.","code":"# metadata structure str(metadata(sp4)) #> List of 6 #>  $ aqp_df_class    : chr \"data.frame\" #>  $ aqp_group_by    : chr \"\" #>  $ aqp_hzdesgn     : chr \"name\" #>  $ aqp_hztexcl     : chr \"\" #>  $ depth_units     : chr \"cm\" #>  $ stringsAsFactors: logi FALSE # alter the depth unit metadata attribute depth_units(sp4) <- 'inches' # units are really 'cm'  # add or replace custom metadata metadata(sp4)$describer <- 'DGM' metadata(sp4)$date <- as.Date('2009-01-01') metadata(sp4)$citation <- 'McGahan, D.G., Southard, R.J, Claassen, V.P. 2009. Plant-Available Calcium Varies Widely in Soils on Serpentinite Landscapes. Soil Sci. Soc. Am. J. 73: 2087-2095.'  # check new values have been added str(metadata(sp4)) #> List of 9 #>  $ aqp_df_class    : chr \"data.frame\" #>  $ aqp_group_by    : chr \"\" #>  $ aqp_hzdesgn     : chr \"name\" #>  $ aqp_hztexcl     : chr \"\" #>  $ depth_units     : chr \"inches\" #>  $ stringsAsFactors: logi FALSE #>  $ describer       : chr \"DGM\" #>  $ date            : Date[1:1], format: \"2009-01-01\" #>  $ citation        : chr \"McGahan, D.G., Southard, R.J, Claassen, V.P. 2009. Plant-Available Calcium Varies Widely in Soils on Serpentini\"| __truncated__ # fix depth units, set back to 'cm' depth_units(sp4) <- 'cm'"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"spatial-data","dir":"Articles","previous_headings":"","what":"Spatial Data","title":"Introduction to SoilProfileCollection Objects","text":"Spatial data metadata can stored within SoilProfileCollection object. initialize “spatial” SoilProfileCollection, use initSpatial()<- method. allows specify columns contain geometry optionally Coordinate Reference System data. SoilProfileCollection stores two metadata entries: coordinates crs refer column names containing geometric data CRS, respectively.","code":"# generate some fake coordinates as site level attributes sp4$x <- rnorm(n = length(sp4), mean = 354000, sd = 100) sp4$y <- rnorm(n = length(sp4), mean = 4109533, sd = 100)  # initialize spatial coordinates (CRS optional) initSpatial(sp4, crs = \"EPSG:26911\") <- ~ x + y  # extract coordinates as matrix getSpatial(sp4) #>              x       y #>  [1,] 354007.0 4109619 #>  [2,] 353936.1 4109509 #>  [3,] 353995.0 4109512 #>  [4,] 353974.9 4109535 #>  [5,] 354044.5 4109536 #>  [6,] 354275.5 4109588 #>  [7,] 354004.7 4109306 #>  [8,] 354057.8 4109801 #>  [9,] 354011.8 4109497 #> [10,] 353808.8 4109554 # get/set spatial reference system using prj()<- prj(sp4) <- '+proj=utm +zone=11 +datum=NAD83'  # return CRS information prj(sp4) #> [1] \"+proj=utm +zone=11 +datum=NAD83\" if (requireNamespace(\"sf\", quietly = TRUE)) {   # extract spatial data + site level attributes in new spatial object   sp4.sp <- as(sp4, 'SpatialPointsDataFrame')   sp4.sf <- as(sp4, 'sf') }"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"validity-and-horizon-logic","dir":"Articles","previous_headings":"","what":"Validity and Horizon Logic","title":"Introduction to SoilProfileCollection Objects","text":"several SoilProfileCollection methods defined identify corrupted objects/bad depth logic fix . Usually “invalid” “corrupt” SoilProfileCollection comes direct modification S4 object slot contents (using standard methods), can result omissions reordering bypasses internal accounting methods. Occasionally issues arise illogical inputs (depths) collections missing data. latter cases (standard methods produce corrupt SPC given “degenerate” input data) considered “bugs” reported issue tracker: https://github.com/ncss-tech/aqp/issues checkSPC() returns TRUE SoilProfileCollection contains slots defined class prototype. spc_in_sync() used validity method SoilProfileCollection, determines reordering horizon data relative unique profile ID / site order occurred. rebuildSPC() used re-construct required slots SoilProfileCollection, given source, possibly corrupt, object. function fixes major issues related internal ordering data slots, well missing slots metadata. checkHzDepthLogic() ability perform logical tests whole profiles individual horizons. Four different tests performed related four common errors horizon depths: bottom depth shallower top depth equal top bottom depth missing (NA) top bottom depth gap overlap adjacent horizons","code":"checkSPC(sp4) spc_in_sync(sp4) #>   nSites relativeOrder valid #> 1   TRUE          TRUE  TRUE z <- rebuildSPC(sp4) checkHzDepthLogic(sp4) #>                id valid depthLogic sameDepth missingDepth overlapOrGap #> 1          colusa  TRUE      FALSE     FALSE        FALSE        FALSE #> 2           glenn  TRUE      FALSE     FALSE        FALSE        FALSE #> 3           kings  TRUE      FALSE     FALSE        FALSE        FALSE #> 4        mariposa  TRUE      FALSE     FALSE        FALSE        FALSE #> 5       mendocino  TRUE      FALSE     FALSE        FALSE        FALSE #> 6            napa  TRUE      FALSE     FALSE        FALSE        FALSE #> 7      san benito  TRUE      FALSE     FALSE        FALSE        FALSE #> 8          shasta  TRUE      FALSE     FALSE        FALSE        FALSE #> 9  shasta-trinity  TRUE      FALSE     FALSE        FALSE        FALSE #> 10         tehama  TRUE      FALSE     FALSE        FALSE        FALSE checkHzDepthLogic(sp4, byhz = TRUE) #>                id top bottom valid hzID depthLogic sameDepth missingDepth overlapOrGap #> 1          colusa   0      3  TRUE    1      FALSE     FALSE        FALSE           NA #> 2          colusa   3      8  TRUE    2      FALSE     FALSE        FALSE           NA #> 3          colusa   8     30  TRUE    3      FALSE     FALSE        FALSE           NA #> 4          colusa  30     42  TRUE    4      FALSE     FALSE        FALSE           NA #> 5           glenn   0      9  TRUE    5      FALSE     FALSE        FALSE           NA #> 6           glenn   9     34  TRUE    6      FALSE     FALSE        FALSE           NA #> 7           kings   0      4  TRUE    7      FALSE     FALSE        FALSE           NA #> 8           kings   4     13  TRUE    8      FALSE     FALSE        FALSE           NA #> 9           kings  13     40  TRUE    9      FALSE     FALSE        FALSE           NA #> 10       mariposa   0      3  TRUE   10      FALSE     FALSE        FALSE           NA #> 11       mariposa   3     14  TRUE   11      FALSE     FALSE        FALSE           NA #> 12       mariposa  14     34  TRUE   12      FALSE     FALSE        FALSE           NA #> 13       mariposa  34     49  TRUE   13      FALSE     FALSE        FALSE           NA #> 14      mendocino   0      2  TRUE   14      FALSE     FALSE        FALSE           NA #> 15      mendocino   2      8  TRUE   15      FALSE     FALSE        FALSE           NA #> 16      mendocino   8     30  TRUE   16      FALSE     FALSE        FALSE           NA #> 17           napa   0      6  TRUE   17      FALSE     FALSE        FALSE           NA #> 18           napa   6     20  TRUE   18      FALSE     FALSE        FALSE           NA #> 19     san benito   0      8  TRUE   19      FALSE     FALSE        FALSE           NA #> 20     san benito   8     20  TRUE   20      FALSE     FALSE        FALSE           NA #> 21         shasta   0      3  TRUE   21      FALSE     FALSE        FALSE           NA #> 22         shasta   3     40  TRUE   22      FALSE     FALSE        FALSE           NA #> 23 shasta-trinity   0      2  TRUE   23      FALSE     FALSE        FALSE           NA #> 24 shasta-trinity   2      5  TRUE   24      FALSE     FALSE        FALSE           NA #> 25 shasta-trinity   5     12  TRUE   25      FALSE     FALSE        FALSE           NA #> 26 shasta-trinity  12     23  TRUE   26      FALSE     FALSE        FALSE           NA #> 27 shasta-trinity  23     40  TRUE   27      FALSE     FALSE        FALSE           NA #> 28         tehama   0      3  TRUE   28      FALSE     FALSE        FALSE           NA #> 29         tehama   3      7  TRUE   29      FALSE     FALSE        FALSE           NA #> 30         tehama   7     16  TRUE   30      FALSE     FALSE        FALSE           NA"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"coercion","dir":"Articles","previous_headings":"","what":"Coercion","title":"Introduction to SoilProfileCollection Objects","text":"SoilProfileCollection objects can coerced data.frame, list SpatialPointsDataFrame (spatial slot set ):","code":"# check our work by viewing the internal structure str(sp4)  # create a data.frame from horizon+site data as(sp4, 'data.frame')   # or, equivalently: as.data.frame(sp4)  # convert SoilProfileCollection to a named list containing all slots as(sp4, 'list')  # extraction of site + spatial data as SpatialPointsDataFrame as(sp4, 'SpatialPointsDataFrame')"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"subsetting-soilprofilecollection-objects","dir":"Articles","previous_headings":"","what":"Subsetting SoilProfileCollection Objects","title":"Introduction to SoilProfileCollection Objects","text":"SoilProfileCollection objects can subset using familiar [-style notation used matrix data.frame objects, : spc[, j] return profiles identified integer vector , horizons identified integer vector j. Omitting either index result profiles (omitted) horizons (j omitted). Typically, site-level attributes used subsetting criteria. Functions return index matches (grep() ()) provide link attributes index matching profiles.","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"profiles","dir":"Articles","previous_headings":"Subsetting SoilProfileCollection Objects","what":"Profiles","title":"Introduction to SoilProfileCollection Objects","text":"Using index, select one profiles numeric index. index greater number profiles return empty SoilProfileCollection object. interactive session, often simpler use subset() directly:","code":"# explicit string matching idx <- which(sp4$group == 'A')  # numerical expressions idx <- which(sp4$elevation < 1000)  # regular expression, matches any profile ID containing 'shasta' idx <- grep('shasta', profile_id(sp4), ignore.case = TRUE)  # perform subset based on index sp4[idx, ] subset(sp4, group == 'A') subset(sp4, elevation < 1000) subset(sp4, grepl('shasta', id, ignore.case = TRUE))"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"horizons-by-index","dir":"Articles","previous_headings":"Subsetting SoilProfileCollection Objects","what":"Horizons by Index","title":"Introduction to SoilProfileCollection Objects","text":"Using j index, select 2nd horizon profile collection. Use caution, asking horizon beyond length profile collection result error.","code":"sp4[, 2]"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"horizons-by-keyword","dir":"Articles","previous_headings":"Subsetting SoilProfileCollection Objects","what":"Horizons by Keyword","title":"Introduction to SoilProfileCollection Objects","text":"Using k index, select .FIRST first .LAST horizons (profile) within collection. Note .FIRST .LAST special keywords used SoilProfileCollection subset methods.","code":"sp4[, , .FIRST] sp4[, , .LAST]"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"splitting-duplication-and-selection-of-unique-profiles","dir":"Articles","previous_headings":"","what":"Splitting, Duplication, and Selection of Unique Profiles","title":"Introduction to SoilProfileCollection Objects","text":"SoilProfileCollection objects combined passing list objects combine() function. Ideally objects share internal structure, profile ID, horizon ID, depth units, parameters SoilProfileCollection. Manually subset example data 3 pieces, compile list, combine back together. possible combine SoilProfileCollection objects different internal structure. final object contain site horizon columns inputs, possibly creating sparse tables. IDs horizon depth names taken first object.","code":"# subset data into chunks s1 <- sp4[1:2, ] s2 <- sp4[4, ] s3 <- sp4[c(6, 8, 9), ]  # combine subsets s <- combine(list(s1, s2, s3))  # double-check result plotSPC(s) # sample data as data.frame objects data(sp1) data(sp3)  # rename IDs horizon top / bottom columns sp3$newid <- sp3$id sp3$hztop <- sp3$top sp3$hzbottom <- sp3$bottom  # remove originals sp3$id <- NULL sp3$top <- NULL sp3$bottom <- NULL  # promote to SoilProfileCollection depths(sp1) <- id ~ top + bottom depths(sp3) <- newid ~ hztop + hzbottom  # label each group via site-level attribute site(sp1)$g <- 'sp1' site(sp3)$g <- 'sp3'  # combine x <- combine(list(sp1, sp3))  # make grouping variable into a factor for groupedProfilePlot x$g <- factor(x$g)  # check results str(x)  # graphical check # convert character horizon IDs into numeric x$.horizon_ids_numeric <- as.numeric(hzID(x))  par(mar = c(0, 0, 3, 1)) plotSPC(x, color='.horizon_ids_numeric', col.label = 'Horizon ID') groupedProfilePlot(x, 'g', color='.horizon_ids_numeric', col.label = 'Horizon ID', group.name.offset = -15)"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"splitting","dir":"Articles","previous_headings":"Splitting, Duplication, and Selection of Unique Profiles","what":"Splitting","title":"Introduction to SoilProfileCollection Objects","text":"inverse combine() split(): subsets SoilProfileCollection split list elements, containing new SoilProfileCollection.","code":"# continuing from above # split subsets of x into a list of SoilProfileCollection objects using site-level attribute 'g' res <- split(x, 'g') str(res, 1)"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"duplication","dir":"Articles","previous_headings":"Splitting, Duplication, and Selection of Unique Profiles","what":"Duplication","title":"Introduction to SoilProfileCollection Objects","text":"Duplicate first profile sp4 (Colusa) 8 times, resulting new SoilProfileCollection object containing unique profile IDs.","code":"d <- duplicate(sp4[1, ], times = 8) par(mar = c(0, 2, 0, 1)) plotSPC(d, color = 'ex_Ca_to_Mg')"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"selecting-unique-profiles","dir":"Articles","previous_headings":"Splitting, Duplication, and Selection of Unique Profiles","what":"Selecting Unique Profiles","title":"Introduction to SoilProfileCollection Objects","text":"","code":"# an example soil profile   x <- data.frame(   id = 'A',   name = c('A', 'E', 'Bhs', 'Bt1', 'Bt2', 'BC', 'C'),   top = c(0, 10, 20, 30, 40, 50, 100),   bottom = c(10, 20, 30, 40, 50, 100, 125),   z = c(8, 5, 3, 7, 10, 2, 12) )  # init SPC depths(x) <- id ~ top + bottom hzdesgnname(x) <- 'name'  # horizon depth variability for simulation horizons(x)$.sd <- 2  # duplicate several times x.dupes <- duplicate(x, times = 5)  # simulate some new profiles based on example # 2cm constant standard deviation of transition between horizons assumed x.sim <- perturb(x, n = 5, thickness.attr = '.sd')  # graphical check par(mar = c(0, 2, 0, 4))  # inspect unique results plotSPC(unique(x.dupes, vars = c('top', 'bottom')),         name.style = 'center-center',         width = 0.15) # \"uniqueness\" is a function of variables selected to consider plotSPC(unique(x.sim, vars = c('top', 'bottom')),         name.style = 'center-center') plotSPC(unique(x.sim, vars = c('name')),         name.style = 'center-center',         width = 0.15)"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"plotting-soilprofilecollection-objects","dir":"Articles","previous_headings":"","what":"Plotting SoilProfileCollection Objects","title":"Introduction to SoilProfileCollection Objects","text":"plotSPC() method SoilProfileCollection objects generates sketches profiles within collection based horizon boundaries, vertically aligned integer sequence 1 number profiles. Horizon names automatically extracted horizon-level attribute name (present), via alternate attributed given argument: name='column.name'. Horizon colors automatically generated horizon-level attribute soil_color, attribute R-compatible color description given argument: color='column.name'. function highly customizable, therefore, prudent consult help(plotSPC) time time. Soil colors Munsell notation can converted R-compatible colors via munsell2rgb(). Many following examples make use par() set graphical options mar (customized margins) /xpd = NA (turn clipping) optimize display different numbers profiles various plotSPC() arguments. detailed description argument plotSPC() (many examples) can found Soil Profile Sketches tutorial.","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"making-adjustments","dir":"Articles","previous_headings":"Plotting SoilProfileCollection Objects","what":"Making Adjustments","title":"Introduction to SoilProfileCollection Objects","text":"explainPlotSPC() function helpful adjusting obscure arguments plotSPC(). basic plot debugging information overlaid:  Make sketches wider:  Move soil surface 0cm “” 5cm:  Move soil surface 0cm “” 10cm; useful sketches shallow profiles:  Scale depths 50%:  graphical explanation profiles re-arranged via plot.order argument:  Leave room additional 2 profile sketches:","code":"par(mar = c(4, 3, 2, 2)) explainPlotSPC(sp4, name = 'name') par(mar = c(4, 3, 2, 2)) explainPlotSPC(sp4, name = 'name', width = 0.3) par(mar = c(4, 3, 2, 2)) explainPlotSPC(sp4, name = 'name', y.offset = 5) par(mar = c(4, 3, 2, 2)) explainPlotSPC(sp4, name = 'name', y.offset = -10) par(mar = c(4, 3, 2, 2)) explainPlotSPC(sp4, name = 'name', scaling.factor = 0.5) par(mar = c(4, 3, 2, 2)) explainPlotSPC(sp4, name = 'name', plot.order = length(sp4):1) par(mar = c(4, 3, 2, 2)) explainPlotSPC(sp4, name = 'name', n = length(sp4) + 2)"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"small-soilprofilecollections","dir":"Articles","previous_headings":"Plotting SoilProfileCollection Objects > Making Adjustments","what":"Small SoilProfileCollections","title":"Introduction to SoilProfileCollection Objects","text":"Making quality figures fewer 5 soil profiles usually requires customization basic call plotSPC. general, following good starting point: shrink margins disable clipping par adjust output graphic device (e.g. png()) dimensions resolution increase font size cex.names adjust sketch width width, typically within 0.15-0.35 move depth axis left using negative line values, e.g. (depth.axis = list(line = -2)) Get example data Official Series Descriptions: Using 5x6 inch output device:  Using 7x6 inch output device, slight adjustments width usually required:  Using 8x6 inch output device, slight adjustments usually required:","code":"data(osd) x <- osd par(mar = c(0, 2, 0, 4), xpd = NA) plotSPC(x[1, ], cex.names = 1) # set margins and turn off clipping par(mar = c(0, 2, 0, 4), xpd = NA) plotSPC(x[1:2, ], cex.names = 1, width = 0.25) par(mar = c(0, 2, 0, 4), xpd = NA) plotSPC(x, cex.names = 1, depth.axis = list(line = -0.1), width = 0.3)"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"horizon-depth-labeling","dir":"Articles","previous_headings":"Plotting SoilProfileCollection Objects","what":"Horizon Depth Labeling","title":"Introduction to SoilProfileCollection Objects","text":"Horizon depths can labeled profile alternative single depth axis.  aqp version 1.41, possible “fix” overlapping horizon depth labels new fixLabelCollisions argument. approach labeling depths works best moving horizon designations name.style argument. Note setting fixLabelCollisions = TRUE may incur performance penalty plotting large SoilProfileCollection objects. aqp version 2.0, fixLabelCollisions set TRUE setting hz.depths = TRUE.","code":"par(mar = c(0, 0, 1, 1)) plotSPC(   x,   cex.names = 1,   name.style = 'center-center',   width = 0.3,   depth.axis = FALSE,   hz.depths = TRUE,   hz.depths.offset = 0.08 )"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"relative-horizontal-positioning","dir":"Articles","previous_headings":"Plotting SoilProfileCollection Objects","what":"Relative Horizontal Positioning","title":"Introduction to SoilProfileCollection Objects","text":"Relative horizontal positioning via relative.pos argument. Can used plot.order careful: relative.pos must specified final ordering profiles. See ?plotSPC details.  Relative positioning works well vector positions close default spacing along integer sequence, positions closer width profile sketch.  fixOverlap() function can used find suitable arrangement profiles based compromise suggested relative positions minimization overlap. iterative procedure, based random perturbations overlapping profiles, therefore possible algorithm stop sub-optimal configuration. Results can controlled using set.seed().  several parameters available optimizing horizontal position presence overlap. See ?fixOverlap details examples. SPC plotting ideas tutorial contains several additional examples.","code":"par(mar = c(4, 3, 2, 2)) pos <- jitter(1:length(sp4)) explainPlotSPC(sp4, name = 'name', relative.pos = pos) par(mar = c(4, 3, 2, 2)) pos <- c(1, 1.2, 3, 4, 5, 5.2, 7, 8, 9, 10) explainPlotSPC(sp4, name = 'name', relative.pos = pos) par(mar = c(4, 3, 2, 2)) new.pos <- fixOverlap(pos) explainPlotSPC(sp4, name = 'name', relative.pos = new.pos) par(mar = c(4, 3, 2, 2)) new.pos <- fixOverlap(pos, thresh = 0.7) explainPlotSPC(sp4, name = 'name', relative.pos = new.pos)"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"thematic-sketches","dir":"Articles","previous_headings":"Plotting SoilProfileCollection Objects","what":"Thematic Sketches","title":"Introduction to SoilProfileCollection Objects","text":"Horizon-level attributes can symbolized color, case using horizon-level attribute “clay”:  Use different set colors:  Categorical properties can also used make thematic sketch. Colors interpolated classes colors provided col.palette:  Try generalized horizon labels:  Horizon-level attributes represent volume fraction (e.g. coarse-fragment percentage) can added existing figure. See ?addVolumeFraction adding layers existing plot based attributes.","code":"par(mar = c(0, 0, 3, 0)) plotSPC(sp4,         name = 'name',         color = 'clay',         col.label = 'Clay Content (%)') par(mar = c(0, 0, 3, 0))  plotSPC(   sp4,   name = 'name',   color = 'clay',   col.label = 'Clay Content (%)' ) par(mar = c(0, 0, 3, 0)) plotSPC(   sp4,   name = 'name',   color = 'name',   col.label = 'Original Horizon Name' ) par(mar = c(0, 0, 3, 0))   # generalize horizon names into 3 groups sp4$genhz <- generalize.hz(sp4$name, new = c('A', 'AB', 'Bt'), pat = c('A[0-9]?', 'AB', '^Bt'))  plotSPC(   sp4,   name = 'name',   color = 'genhz',   col.label = 'Generalized Horizon Name' ) par(mar = c(0, 0, 3, 0))  # convert coarse rock fragment proportion to percentage sp4$frag_pct <- sp4$CF * 100  # label horizons with fragment percent plotSPC(sp4, name = 'frag_pct', color = 'frag_pct')  # symbolize volume fraction data addVolumeFraction(sp4, colname = 'frag_pct')"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"depth-intervals","dir":"Articles","previous_headings":"Plotting SoilProfileCollection Objects","what":"Depth Intervals","title":"Introduction to SoilProfileCollection Objects","text":"Annotation depth-intervals can accomplished using “brackets”. extract top/bottom depths associated top bottom depth horizons using min/max variants depthOf() function. See ?depthOf details.  Add labels:  possible arrange profile sketches site-level grouping variable:  need brackets profiles collection:  bottom depths missing arrow used:  Manually define bottom depth:  customization brackets:","code":"# extract top/bottom depths associated with all A horizons tops <- minDepthOf(sp4, pattern = '^A', hzdesgn = 'name', top = TRUE) bottoms <- maxDepthOf(sp4, pattern = '^A', hzdesgn = 'name', top = FALSE)  IDs <- profile_id(sp4)  # assemble data.frame a <- data.frame(id = IDs, top = tops$top, bottom = bottoms$bottom)  # check a #>                id top bottom #> 1          colusa   0      8 #> 2           glenn   0      9 #> 3           kings   0      4 #> 4        mariposa   0      3 #> 5       mendocino   0      2 #> 6            napa   0      6 #> 7      san benito   0      8 #> 8          shasta   0      3 #> 9  shasta-trinity   0     12 #> 10         tehama   0      3 par(mar = c(0, 0, 0, 0)) plotSPC(sp4)  # annotate A horizon depth interval with brackets addBracket(a, col = 'red', offset = -0.4) par(mar = c(0, 0, 0, 0)) plotSPC(sp4, name = 'name')  # addBracket() looks for a column `label`; add a ID for each bracket a$label <- site(sp4)$id  # note that depth brackets \"knows which profiles to use\" via profile ID addBracket(   a,   col = 'red',   label.cex = 0.75,   missing.bottom.depth = 25,   offset = -0.4 ) par(mar = c(0, 0, 0, 0))  groupedProfilePlot(sp4, groups = 'group') addBracket(a, col = 'red', offset = -0.4) par(mar = c(0, 0, 0, 0)) a.sub <- a[1:4,] groupedProfilePlot(sp4, groups = 'group') addBracket(a.sub, col = 'red', offset = -0.4) a$bottom <- NA par(mar = c(0, 0, 0, 0)) groupedProfilePlot(sp4, groups = 'group') addBracket(a, col = 'red', offset = -0.4) par(mar = c(0, 0, 0, 0)) groupedProfilePlot(sp4, groups = 'group') addBracket(   a,   col = 'red',   label.cex = 0.75,   missing.bottom.depth = 25,   offset = -0.4 ) par(mar = c(0, 0, 0, 0)) plotSPC(sp4, max.depth = 75)  # copy root-restricting features a <- restrictions(sp4)  # add a label: restrictive feature 'kind' a$label <- a$kind  # add restrictions using vertical bars addBracket(   a,   col = 'red',   label.cex = 0.75,   tick.length = 0,   lwd = 3,   offset = -0.4 )"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"notes","dir":"Articles","previous_headings":"Plotting SoilProfileCollection Objects > Depth Intervals","what":"Notes","title":"Introduction to SoilProfileCollection Objects","text":"functions (addBracket(), addDiagnosticBracket(), addVolumeFraction()) automatically compensate alternative sketch ordering relative positioning profiles.","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"svg-output-for-use-in-page-layout-tools","dir":"Articles","previous_headings":"Plotting SoilProfileCollection Objects","what":"SVG Output for Use in Page Layout Tools","title":"Introduction to SoilProfileCollection Objects","text":"Sketches use layout tools Adobe Illustrator Inkscape stored vector file format. SVG compatible software titles. WMF output compatible MS Office tools can written win.metafile() function.","code":"# library(svglite) # svglite(filename = 'e:/temp/fig.svg', width = 7, height = 6, pointsize = 12) #  # par(mar = c(0,2,0,4), xpd = NA) # plotSPC(x, cex.names=1, depth.axis = list(line = -0.2), width=0.3) #  # dev.off()"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"iterating-over-profiles-in-a-collection","dir":"Articles","previous_headings":"","what":"Iterating Over Profiles in a Collection","title":"Introduction to SoilProfileCollection Objects","text":"profileApply() function extension familiar apply() family functions extended SoilProfileCollection objects. function named FUN argument evaluated profile collection, typically returning single value per profile. case, ordering results match ordering values site level attribute table. FUN returns vector length number horizons profile, profileApply() can used create new horizon-level attributes. example, change clay content horizon depth (delta.clay, ) calculated : complex summaries can generated writing custom function called profileApply(). Note profile passed function accessed via temporary variable (), SoilProfileCollection object containing single profile. See help(profileApply) details. list SoilProfileCollection objects returned custom function can combined single SoilProfileCollection object via combine(). can now use new site-level attributes order profiles plotting. case profiles ordered based horizon-thickness weighted mean, exchangeable Ca:Mg values. Horizons colored exchangeable Ca:Mg values.","code":"# max() returns the depth of a soil profile sp4$soil.depth <- profileApply(sp4, FUN = max)  # max() with additional argument give max depth to non-missing 'clay' sp4$soil.depth.clay <- profileApply(sp4, FUN = max, v = 'clay')  # nrow() returns the number of horizons sp4$n.hz <- profileApply(sp4, FUN = nrow)  # compute the mean clay content by profile using an inline function sp4$mean.clay <- profileApply(sp4, FUN = function(i) mean(i$clay))  # estimate soil depth based on horizon designation sp4$soil.depth <- profileApply(sp4, estimateSoilDepth, name = 'name') # save as horizon-level attribute sp4$delta.clay <- profileApply(sp4, FUN = function(i) c(NA, diff(i$clay)))  # check results: horizons(sp4)[1:6, c('id', 'top', 'bottom', 'clay', 'delta.clay')] #>       id top bottom clay delta.clay #> 1 colusa   0      3   21         NA #> 2 colusa   3      8   27          6 #> 3 colusa   8     30   32          5 #> 4 colusa  30     42   55         23 #> 5  glenn   0      9   25         NA #> 6  glenn   9     34   34          9 # compute hz-thickness weighted mean exchangeable-Ca:Mg wt.mean.ca.mg <- function(i) {   # use horizon thickness as a weight   thick <- i$bottom - i$top      # compute the thickness weighted mean, ignoring missing values   weighted.mean(i$ex_Ca_to_Mg, w = thick, na.rm = TRUE) }  # apply our custom function and save results as a site-level attribute sp4$wt.mean.ca.to.mg <- profileApply(sp4, wt.mean.ca.mg) # plot the data using our new order based on Ca:Mg weighted average # the result is an index of rank  new.order <- order(sp4$wt.mean.ca.to.mg)  par(mar = c(4, 0, 3, 0)) # tighten figure margins plotSPC(sp4,         name = 'name',         color = 'ex_Ca_to_Mg',         plot.order = new.order)  # add an axis labeled with the sorting criteria axis(1, at = 1:length(sp4), labels = round(sp4$wt.mean.ca.to.mg, 3), cex.axis = 0.75) mtext(1, line = 2.25, text = 'Horizon Thickness Weighted Mean Ex. Ca:Mg', cex = 0.75)"},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"slicing-horizons-dice","dir":"Articles","previous_headings":"Depth-wise Selection and Resampling","what":"Slicing Horizons: dice()","title":"Introduction to SoilProfileCollection Objects","text":"Collections soil profiles can sliced (re-sampled) regular depth-intervals dice() function. slicing structure variables interest defined via formula notation: seq sequence integers (e.g. 0:15, c(5,10,15,20), etc.) var.1 + var.2 + var.3 + ... horizon-level attributes slice. continuous categorical variables can named right-hand-side formula. results returned dice() either SoilProfileCollection, data.frame called optional argument SPC = FALSE. example, slice sample data set 1-cm intervals, 0–15 cm:  soil profile data sliced, simple extract “chunks” data depth interval via [-subsetting:","code":"# slice select horizon-level attributes seq ~ var.1 + var.2 + var.3 + ... # slice all horizon-level attributes seq ~ . # resample to 1cm slices s <- dice(sp4, fm = 0:15 ~ sand + silt + clay + name + ex_Ca_to_Mg)  # check the result class(s) #> [1] \"SoilProfileCollection\" #> attr(,\"package\") #> [1] \"aqp\" # plot sliced data par(mar = c(0, 0, 3, 0)) # tighten figure margins plotSPC(s, color = 'ex_Ca_to_Mg') # slice from 0 to max depth in the collection s <- dice(sp4, fm= 0:max(sp4) ~ sand + silt + clay + name + ex_Ca_to_Mg)  # extract all data over the range of 5--10 cm: plotSPC(s[, 5:10])  # extract all data over the range of 25--50 cm: plotSPC(s[, 25:50])  # extract all data over the range of 10--20 and 40--50 cm: plotSPC(s[, c(10:20, 40:50)])"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"ragged-extraction-glom","dir":"Articles","previous_headings":"Depth-wise Selection and Resampling","what":"Ragged Extraction: glom()","title":"Introduction to SoilProfileCollection Objects","text":"Select horizons overlap interval 5-15cm:","code":"# truncate to the interval 5-15cm clods <- glom(sp4, z1 = 5, z2 = 15)  # plot outlines of original profiles par(mar = c(0, 0, 3, 1.5))  plotSPC(sp4, color = NA, name = NA, print.id = FALSE, depth.axis = FALSE, lwd = 0.5)  # overlay glom() depth criteria rect(xleft = 0.5, ybottom = 15, xright = length(sp4) + 0.5, ytop = 5, lty = 2)  # add SoilProfileCollection with selected horizons plotSPC(clods, add = TRUE, cex.names = 0.6, name = 'name', color = 'ex_Ca_to_Mg', name.style = 'center-center')"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"truncation-trunc","dir":"Articles","previous_headings":"Depth-wise Selection and Resampling","what":"Truncation: trunc()","title":"Introduction to SoilProfileCollection Objects","text":"Truncate SPC interval 5-15cm:","code":"# truncate to the interval 5-15cm sp4.truncated <- trunc(sp4, 5, 15)  # plot outlines of original profiles par(mar = c(0, 0, 3, 1.5))  plotSPC(sp4, color = NA, name = NA, print.id = FALSE, lwd = 0.5)  # overlay truncation criteria rect(xleft = 0.5, ybottom = 15, xright = length(sp4) + 0.5, ytop = 5, lty = 2)  # add truncated SoilProfileCollection plotSPC(sp4.truncated, depth.axis = FALSE, add = TRUE, cex.names = 0.6, name = 'name', color = 'ex_Ca_to_Mg', name.style = 'center-center')"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"change-of-support","dir":"Articles","previous_headings":"Depth-wise Selection and Resampling","what":"Change of Support","title":"Introduction to SoilProfileCollection Objects","text":"often need converting data new set depth intervals. re-alignment horizon depths via aggregation can considered type change support. operation SoilProfileCollection objects requires aggregation function (mean, median, etc.) possibly interpolation (e.g. splines).","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"aggregation-over-slabs","dir":"Articles","previous_headings":"Depth-wise Selection and Resampling > Change of Support","what":"Aggregation over “slabs”","title":"Introduction to SoilProfileCollection Objects","text":"slab() function simplest way implement change depth support via aggregation. Profile grouping criteria horizon attribute selection parameterized via formula: either groups ~ var1 + var2 + var3 named variables aggregated within groups named variables aggregated across entire collection ~ var1 + var2 + var3. default summary function (slab.fun) computes 5th, 25th, 50th, 75th, 95th percentiles via Harrell-Davis quantile estimator. depth structure (“slabs”) summaries computed defined slab.structure argument using: single integer (e.g. 10): data aggregated regular sequence 10-unit thickness slabs vector 2 integers (e.g. c(50, 60)): data aggregated depths spanning 50–60 units vector 3 integers (e.g. c(0, 5, 10, 50, 100)): data aggregated depths spanning 0–5, 5–10, 10–50, 50–100 units  Depth-wise aggregation can useful visual evaluation multivariate similarity among groups profiles.  following example based set 9 randomly generated profiles, re-aligned Global Soil Map (GSM) standard depths. simple graphical comparison original re-aligned soil profile data, converting slab() result long -> wide format {data.table} dcast():  Note re-aligned data may represent reality (therefore used caution) original soil depth shallower deepest new (re-aligned) horizon depths. contributing_fraction metric returned slab() can useful assessing much real data used generate new set re-aligned data.","code":"# aggregate a couple of the horizon-level attributes,  # across the entire collection,  # from 0--10 cm # computing the mean value ignoring missing data slab(   sp4,   fm = ~ sand + silt + clay,   slab.structure = c(0, 10),   slab.fun = mean,   na.rm = TRUE ) #>   variable all.profiles value contributing_fraction top bottom #> 1     sand            1 47.63                     1   0     10 #> 2     silt            1 31.15                     1   0     10 #> 3     clay            1 21.11                     1   0     10 # again, this time within groups defined by a site-level attribute: slab(   sp4,   fm = group ~ sand + silt + clay,   slab.structure = c(0,  10),   slab.fun = mean,   na.rm = TRUE ) #>   variable group value contributing_fraction top bottom #> 1     sand     A 48.26                     1   0     10 #> 2     sand     B 47.00                     1   0     10 #> 3     silt     A 31.52                     1   0     10 #> 4     silt     B 30.78                     1   0     10 #> 5     clay     A 20.30                     1   0     10 #> 6     clay     B 21.92                     1   0     10 # again, this time over several depth ranges slab(   sp4,   fm = ~ sand + silt + clay,   slab.structure = c(0, 10, 25, 40),   slab.fun = mean,   na.rm = TRUE ) #>   variable all.profiles    value contributing_fraction top bottom #> 1     sand            1 47.63000             1.0000000   0     10 #> 2     sand            1 42.38931             0.8733333  10     25 #> 3     sand            1 32.14607             0.5933333  25     40 #> 4     silt            1 31.15000             1.0000000   0     10 #> 5     silt            1 29.41221             0.8733333  10     25 #> 6     silt            1 31.34831             0.5933333  25     40 #> 7     clay            1 21.11000             1.0000000   0     10 #> 8     clay            1 28.10687             0.8733333  10     25 #> 9     clay            1 36.26966             0.5933333  25     40 # again, this time along 1-cm slices, computing quantiles agg <- slab(sp4, fm = ~ Mg + Ca + ex_Ca_to_Mg + CEC_7 + clay)  # see ?slab for details on the default aggregate function head(agg) #>   variable all.profiles  p.q5  p.q25 p.q50  p.q75 p.q95 contributing_fraction top bottom #> 1       Mg            1 6.015 12.175 14.60 21.125 27.13                     1   0      1 #> 2       Mg            1 6.015 12.175 14.60 21.125 27.13                     1   1      2 #> 3       Mg            1 6.015 12.175 19.15 25.650 27.76                     1   2      3 #> 4       Mg            1 6.195 13.175 21.05 25.050 30.73                     1   3      4 #> 5       Mg            1 6.195 13.175 21.05 25.050 30.73                     1   4      5 #> 6       Mg            1 6.195 13.175 21.05 26.250 31.72                     1   5      6 # plot median +/i bounds defined by the 25th and 75th percentiles # this is lattice graphics, syntax is a little rough xyplot(top ~ p.q50 | variable, data = agg, ylab = 'Depth',         xlab = 'median bounded by 25th and 75th percentiles',        lower = agg$p.q25, upper = agg$p.q75, ylim = c(42, -2),        panel = panel.depth_function,        alpha = 0.25, sync.colors = TRUE,        par.settings = list(superpose.line = list(col = 'RoyalBlue', lwd = 2)),         prepanel = prepanel.depth_function,        cf = agg$contributing_fraction, cf.col = 'black', cf.interval = 5,        layout = c(5, 1), strip = strip.custom(bg = grey(0.8)),        scales = list(x = list(          tick.number = 4,          alternating = 3,          relation = 'free'        )) ) # processing the \"napa\" and tehama profiles idx <- which(profile_id(sp4) %in% c('napa', 'tehama')) napa.and.tehama <- slab(sp4[idx,], fm = ~ Mg + Ca + ex_Ca_to_Mg + CEC_7 + clay)  # combine with the collection-wide aggregate data g <- make.groups(collection = agg, napa.and.tehama = napa.and.tehama)  # compare graphically: xyplot(top ~ p.q50 | variable, groups = which, data = g, ylab = 'Depth',        xlab = 'median bounded by 25th and 75th percentiles',        lower = g$p.q25, upper = g$p.q75, ylim = c(42, -2),        panel = panel.depth_function,        alpha = 0.25, sync.colors = TRUE, cf = g$contributing_fraction, cf.interval = 10,        par.settings = list(superpose.line = list(          col = c('RoyalBlue', 'Red4'),          lwd = 2,          lty = c(1, 2)        )),        prepanel = prepanel.depth_function,        layout = c(5, 1),         strip = strip.custom(bg = grey(0.8)),        scales = list(x = list(          tick.number = 4,          alternating = 3,          relation = 'free'        )),        auto.key = list(columns = 2,                        lines = TRUE,                        points = FALSE) ) library(data.table)  # 9 random profiles # 1 simulated property via logistic power peak (LPP) function # 6, 7, or 8 horizons per profile # result is a list of single-profile SPC d <- lapply(   as.character(1:9),    random_profile,    n = c(6, 7, 8),    n_prop = 1,    method = 'LPP',   SPC = TRUE )  # combine into single SPC d <- combine(d)  # GSM depths gsm.depths <- c(0, 5, 15, 30, 60, 100, 200)  # aggregate using mean: wt.mean within slabs # see ?slab for ideas on how to parameterize slab.fun d.gsm <- slab(d, fm = id ~ p1, slab.structure = gsm.depths, slab.fun = mean, na.rm = TRUE)  # note: result is in long-format # note: horizon names are lost due to aggregation head(d.gsm, 7) #>   variable id    value contributing_fraction top bottom #> 1       p1  1 45.44919             1.0000000   0      5 #> 2       p1  1 52.60948             1.0000000   5     15 #> 3       p1  1 50.62579             1.0000000  15     30 #> 4       p1  1 46.70293             1.0000000  30     60 #> 5       p1  1 37.54221             1.0000000  60    100 #> 6       p1  1 31.23363             0.7826087 100    200 #> 7       p1  2 16.26688             1.0000000   0      5 # reshape to wide format # this scales to > 1 aggregated variables d.gsm.pedons <- data.table::dcast(   data.table(d.gsm),    formula = id + top + bottom ~ variable,    value.var = 'value' )  # init SPC depths(d.gsm.pedons) <- id ~ top + bottom  # iterate over aggregated profiles and make new hz names d.gsm.pedons$hzname <- profileApply(d.gsm.pedons, function(i) {   paste0('GSM-', 1:nrow(i)) })  # compare original and aggregated par(mar = c(1, 0, 3, 3), mfrow = c(2, 1)) plotSPC(d, color = 'p1') mtext('original depths', side = 2, line = -1.5) plotSPC(d.gsm.pedons, color = 'p1') mtext('GSM depths', side = 2, line = -1.5) # reshape to wide format d.gsm.pedons.2 <- data.table::dcast(   data.table(d.gsm),    formula = id + top + bottom ~ variable,    value.var = 'contributing_fraction' )  # init SPC depths(d.gsm.pedons.2) <- id ~ top + bottom  # compare original and aggregated par(mar = c(1, 0, 3, 3), mfrow = c(2, 1)) plotSPC(d.gsm.pedons, name = '', color = 'p1') mtext('GSM depths', side = 2, line = -1.5)  plotSPC(   d.gsm.pedons.2,   name = '',   color = 'p1',   col.label = 'Contributing Fraction', ) mtext('GSM depths', side = 2, line = -1.5)"},{"path":"https://ncss-tech.github.io/aqp/articles/Introduction-to-SoilProfileCollection-Objects.html","id":"pair-wise-dissimilarity-ncsp","dir":"Articles","previous_headings":"","what":"Pair-Wise Dissimilarity: NCSP()","title":"Introduction to SoilProfileCollection Objects","text":"Calculation -profile dissimilarity performed using NCSP() (Numerical Classification Soil Profiles). aqp 2.0, NCSP() replaces older implementation profile_compare() now deprecated. Dissimilarity values depend attributes selection (e.g. clay, CEC, pH , etc.), optional depth-weighting parameter (k), maximum depth evaluation (maxDepth). See function manual page paper details.  additional examples can found : Pair-Wise Distances Generalized Horizon Labels Competing Soil Series Soil Profile Distances document based aqp version 2.2-1.","code":"library(cluster) library(ape)  # start fresh data(sp4) depths(sp4) <- id ~ top + bottom hzdesgnname(sp4) <- 'name'  # eval dissimilarity: # using Ex-Ca:Mg ratio and CEC at pH 7 # no depth-weighting (k = 0) # to a maximum depth of 40 cm d <- NCSP(sp4, vars = c('ex_Ca_to_Mg', 'CEC_7'), k = 0, maxDepth = 40)  # check distance matrix: round(d, 1) #>                colusa glenn kings mariposa mendocino napa san benito shasta shasta-trinity #> glenn            13.8                                                                      #> kings            16.0  13.1                                                                #> mariposa          8.4  11.6  16.5                                                          #> mendocino        12.1   8.2  17.0     15.5                                                 #> napa             31.5  24.9  30.5     30.3      22.2                                       #> san benito       26.8  21.4  27.4     29.3      16.4 18.0                                  #> shasta           17.2  13.6   8.7     17.6      17.6 34.8       23.3                       #> shasta-trinity    6.4  16.9  22.3      9.6      17.0 30.9       28.3   23.3                #> tehama           30.1  23.9  29.2     28.6      20.8  9.0       15.3   32.7           29.2 # visualize dissimilarity matrix via divisive hierarchical clustering d.diana <- diana(d)  # may require some margin adjustments par(mar = c(0, 0, 4, 0))  plotProfileDendrogram(   sp4,   d.diana,   scaling.factor = 0.9,   y.offset = 5,   cex.names = 0.7,   width = 0.3,   color = 'ex_Ca_to_Mg',   name.style = 'center-center',   hz.depths = TRUE,   depth.axis = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/articles/Munsell-color-conversion.html","id":"color-conversion-functions","dir":"Articles","previous_headings":"","what":"Color Conversion Functions","title":"Munsell Color Conversion","text":"Conversion Munsell notation “something” can displayed -screen (sRGB color representation) probably common color transformation applied soil morphology data. munsell2rgb() function convenient operation Munsell notation split vectors hue, value, chroma. columns data.frame separate vectors. parseMunsell() function convenient full Munsell notation given character vector. Note parseMunsell() wrapper munsell2rgb(). example, converting 10YR 4/6 either function can return: hex-notation color: #805921FF, sRGB color coordinates: 0.5002233 0.3489249 0.1287694, CIELAB color coordinates: 40.95021 10.31088 37.49513. Selection closest n Munsell color “chips”, given sRGB CIELAB colorspace coordinates performed col2Munsell() function. Input function can colorspace coordinates, named colors (e.g. red), hex-notation color. example, selection closest Munsell chip CIELAB coordinates (51.4337, 9.917916, 38.6889) results 10YR 5/6 reported sigma (error) 1.5e-6. error estimated CIE2000 distance source CIELAB coordinates CIELAB coordinates closest Munsell chip. representative Munsell color can estimated reflectance spectra range 380nm 730nm spec2Munsell() function.","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/Munsell-color-conversion.html","id":"special-cases","dir":"Articles","previous_headings":"","what":"Special Cases","title":"Munsell Color Conversion","text":"Neutral colors commonly specified two ways Munsell system: N 3/ N 3/0, either format work munsell2rgb() parseMunsell(). Non-standard Munsell notation (e.g. 3.6YR 4.4 / 5.6), possibly collected sensor vs. color book, can approximated getClosestMunsellChip(). accurate conversion can performed munsellinterpol package..","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/Munsell-color-conversion.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Munsell Color Conversion","text":"","code":"# Munsell -> hex color parseMunsell('5PB 4/6') #> [1] \"#476189FF\" # Munsell -> sRGB parseMunsell('5PB 4/6',  return_triplets = TRUE) #>           r         g         b #> 1 0.2774433 0.3816871 0.5373067 # Munsell -> CIELAB parseMunsell('5PB 4/6',  returnLAB = TRUE) #>          L        A         B #> 1 40.78393 1.583845 -25.09816 # hex color -> Munsell col2Munsell('#476189FF') #>   hue value chroma     sigma #> 1 5PB     4      6 0.2196242 # neutral color parseMunsell('N 5/') #> [1] \"#313233FF\" # non-standard notation getClosestMunsellChip('3.3YR 4.4/6.1', convertColors = FALSE) #> [1] \"2.5YR 4/6\""},{"path":"https://ncss-tech.github.io/aqp/articles/NCSP.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Numerical Classification of Soil Profiles","text":"release {aqp} 2.0, soil profile comparison algorithm implemented profile_compare() (Beaudette et al., 2013) completely re-written NCSP() re-named “Numerical Comparison Soil Profiles”. recent discussion algorithm provided Maynard et al. (2020). short vignette demonstrates use NCSP() function {aqp} 2.x perform pair-wise comparison soil data encoded SoilProfileCollection object. pair-wise comparison site-level attributes, previously available profile_compare() removed NCSP() implemented stand-alone function named compareSites(). final distance matrix (combining horizon site level attributes) created via weighted average. detailed version vignette can found Pair-Wise Distances Generalized Horizon Labels tutorial.","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/NCSP.html","id":"a-simple-example","dir":"Articles","previous_headings":"","what":"A Simple Example","title":"Numerical Classification of Soil Profiles","text":"Consider three soil profiles, containing basic morphology associated Appling, Bonneau, Cecil soil series. data provided example data set “osd” part {aqp} package. Simulation used generate 4 realizations soil series, using perturb() function. quick review source simulated profiles, note patterns horizon depths, horizon designation, moist soil colors. profiles visually truncated 185cm clarity (note ragged bottoms). new .aqp.plotSPC.args option used set default arguments plotSPC() remainder R session. Simulated profiles labeled numeric suffix (e.g. “-01”)  Subgroup level classification (encoded un-ordered factor) used site-level attribute computing pair-wise distances. Quickly review grouping structure groupedProfilePlot().  Horizon designation, grouped “generalized horizon labels” used horizon-level attribute computing pair-wise distances. REGEX pattern matching used apply generalized horizon labels (GHL) horizon, encoded ordered factors. thematic soil profile sketch (horizon color defined property condition) convenient way graphically check GHL assignment.  Define weights compute separately horizon site level distance matrices. case, site-level distances give double weight horizon-level distances. See manual pages (?NCSP ?compareSites) additional arguments can used customize comparison. Investigate final distance matrix using divisive hierarchical clustering. plotProfileDendrogram() function convenient way combine resulting dendrogram soil profile sketches. Note site-level distances strong effect overall clustering structure.","code":"library(aqp) library(cluster)  # load data and make a copy data(\"osd\") x <- osd # assume a standard deviation of 10cm for horizon boundary depths # far too large for most horizons, but helps to make a point x$hzd <- 10  # generate 4 realizations of each soil profile in `x` # limit the minimum horizon thickness to 5cm set.seed(10101) s <- perturb(x, id = sprintf(\"sim-%02d\", 1:4), boundary.attr = 'hzd', min.thickness = 5)  # combine source + simulated data into a single SoilProfileCollection z <- combine(x, s) # set plotSPC argument defaults options(.aqp.plotSPC.args = list(name.style = 'center-center', depth.axis = list(style = 'compact', line = -2.5), width = 0.33, cex.names = 0.75, cex.id = 0.66, max.depth = 185))  par(mar = c(0, 0, 0, 1)) plotSPC(z) # encode as a factor for distance calculation z$subgroup <- factor(z$subgroup)  par(mar = c(0, 0, 1, 1)) groupedProfilePlot(z, groups = 'subgroup', group.name.offset = -10, break.style = 'arrow', group.line.lty = 1, group.line.lwd = 1) # assign GHL z$genhz <- generalize.hz(   z$hzname, new = c('A', 'E', 'Bt', 'C'),    pattern = c('A', 'E', 'Bt', 'C|Bt4') )  # check GHL par(mar = c(0, 0, 3, 1)) groupedProfilePlot(z, groups = 'subgroup', group.name.offset = -10, break.style = 'arrow', group.line.lty = 1, group.line.lwd = 1, color = 'genhz') # horizon-level distance matrix weight w1 <- 1 # perform NCSP using only the GHL (ordered factors) to a depth of 185cm d1 <- NCSP(z, vars = c('genhz'), maxDepth = 185, k = 0, rescaleResult = TRUE)  # site-level distance matrix weight w2 <- 2 # Gower's distance metric applied to subgroup classification (nominal factor) d2 <- compareSites(z, 'subgroup')  # perform weighted average of distance matrices D <- Reduce(   `+`,    list(d1 * w1, d2 * w2) ) / sum(c(w1, w2)) library(ape)  # divisive hierarchical clustering h <- as.hclust(diana(D))  # hang soil profile sketches from resulting dendrogram par(mar = c(1, 0, 0, 1)) plotProfileDendrogram(z, clust = h, scaling.factor = 0.0075, y.offset = 0.1, width = 0.33, color = 'genhz', name = NA)  # annotate dendrogram with subgroup classification # this handy function provided by the ape package tiplabels(pch = 15, col = c(2, 3)[z$subgroup], cex = 1.5, offset = 0.05)  # helpful legend legend('topleft', legend = levels(z$subgroup), pch = 15, col = c(2, 3), bty = 'n')"},{"path":"https://ncss-tech.github.io/aqp/articles/NCSP.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Numerical Classification of Soil Profiles","text":"Beaudette, D.E., P. Roudier, .T. O’Geen. 2013. Algorithms quantitative pedology: toolkit soil scientists. Computers Geoscience 52:258-268. Maynard, J.J., S.W. Salley, D.E. Beaudette, J.E. Herrick. 2020. Numerical soil classification supports soil identification citizen scientists using limited, simple soil observations. Soil Science Society America Journal 84:1675-1692.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"soil-morphology","dir":"Articles","previous_headings":"Related Tutorials by Topic","what":"Soil Morphology","title":"An Overview of the aqp Package","text":"Soil Profile Sketches Visualization Horizon Boundaries Assigning Generalized Horizon Labels Dealing Troublesome Data Simulation Soil Morphology Perturbation Soil Texture Visualization Ideas SPC Sketch Tips Vertical vs. Perpendicular Horizon Depths","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"soil-color","dir":"Articles","previous_headings":"Related Tutorials by Topic","what":"Soil Color","title":"An Overview of the aqp Package","text":"Mixing Munsell Colors Soil Color Contrast ideas summarizing soil color Soil Color Tiles Investigating Soil Color Ideas Soil Color Signatures Soil Color Transition Probability","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"numerical-classification","dir":"Articles","previous_headings":"Related Tutorials by Topic","what":"Numerical Classification","title":"An Overview of the aqp Package","text":"Pair-Wise Distances Generalized Horizon Labels Pair-Wise Distance Profiles Mixed Variable Types","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"soil-hydrology","dir":"Articles","previous_headings":"Related Tutorials by Topic","what":"Soil Hydrology","title":"An Overview of the aqp Package","text":"Theoretical Water Retention Curves Water Retention Curve Development KSSL Data","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"geomorphology","dir":"Articles","previous_headings":"Related Tutorials by Topic","what":"Geomorphology","title":"An Overview of the aqp Package","text":"Hydrologic Ordering Geomorphic Proportions Exploring Geomorphic Summaries","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"soil-taxonomy","dir":"Articles","previous_headings":"Related Tutorials by Topic","what":"Soil Taxonomy","title":"An Overview of the aqp Package","text":"subgroup look like? Querying Soil Series Data","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"multivariate-summaries-of-soil-property-data","dir":"Articles","previous_headings":"Related Tutorials by Topic","what":"Multivariate Summaries of Soil Property Data","title":"An Overview of the aqp Package","text":"L1 Profiles Getting Comparing KSSL Data","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"soil-spectroscopy","dir":"Articles","previous_headings":"Related Tutorials by Topic","what":"Soil Spectroscopy","title":"An Overview of the aqp Package","text":"Soil Colors VNIR Spectra","code":""},{"path":[]},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"creation","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Creation","title":"An Overview of the aqp Package","text":"depths(): init SPC data.frame site(): set add site-level attributes SPC quickSPC(): quickly build SPC simple text templates random_profile(): generate random SPC suite depth functions","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"metadata","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Metadata","title":"An Overview of the aqp Package","text":"hzdesgnname(): get/set column containing horizon designations hzDesgn(): get vector horizon designations hztexclname(): get/set column containing horizon texture class metadata(): get/set SPC metadata (list) hzID(): get vector horizon IDs hzidname(): get/set column containing horizon IDs horizonDepths() get/set columns containing horizon top bottom depths","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"properties","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Properties","title":"An Overview of the aqp Package","text":"length(): number profiles SPC nrow(): number horizons SPC names(): list horizon site names siteNames(): site-level column names horizonNames(): horizon-level column names","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"subset","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Subset","title":"An Overview of the aqp Package","text":"glom(): extract horizons based overlap criteria defined point interval trunc(): truncate SPC given depth interval subset(): subset profiles based logical expressions subsetHz(): subset horizons based logical expressions [: data.frame-like subsetting profiles (-index) /horizons (j-index) [[: access site horizon-level columns name k-index expressions: .FIRST, .LAST, .HZID, .NHZ","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"depth","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Depth","title":"An Overview of the aqp Package","text":"min(): minimum bottom depth within SPC max(): maximum bottom depth within SPC depthOf(): generalized “depth ” based REGEX matching minDepthOf(): special case depthOf() maxDepthOf(): special case depthOf() getSoilDepthClass(): estimate soil depth based REGEX matching applied horizon designation associated depth class aggregateSoilDepth(): statistical estimation soil depth (REGEX matching horizon designation) within groups profiles","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"utility","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Utility","title":"An Overview of the aqp Package","text":"combine(), c(): combine multiple SPCs single SPC duplicate(): duplicate profiles within SPC perturb(): randomly adjust horizon thickness depths simulate template SPC warpHorizons(): expand / contract horizon thickness harmonize(): create new profiles within SPC based sets related horizon-level data hzAbove(), hzBelow(): locate horizons criteria unique(): determine uniqueness among profiles SPC via MD5 hash split(): split SPC list SPCs based grouping factor site(): get site data data.frame horizons(): get horizon data data.frame replaceHorizons(): replace horizon data diagnostic_hz(): get/set diagnostic features restrictions(): get/set restrictions denormalize(): convert site-level data horizon-level data via replication compositeSPC(): downgrade SPC list site horizon-level data","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"iteration","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Iteration","title":"An Overview of the aqp Package","text":"profileApply(): apply function profile within SPC (slow simple interface) summarizeSPC(): perform group-wise summaries profiles within SPC transform(): modify SPC using expressions operation site horizon-level data","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"change-of-support","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Change of Support","title":"An Overview of the aqp Package","text":"dice(): convert SPC 1 depth-unit intervals replication slab(): apply aggregate function groups within “dice()-ed” SPC spc2mpspline(): interface equal-area spline fitting mpspline2 package segment(): generate segment labels depth-weighted aggregation L1_profiles(): create representative profiles via multivariate median (L1 estimator) slicedHSD(): apply Tukey’s HSD groups within “dice()-ed” SPC","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"horizon-depth-logic","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Horizon Depth Logic","title":"An Overview of the aqp Package","text":"accumulateDepths(): fix horizon depths old-style O horizon notation used fillHzGaps(): fill topological gaps horizon depth repairMissingHzDepths(): attempt fixing missing duplicated horizon bottom depths flagOverlappingHz(): flag horizons perfect overlap checkHzDepthLogic(): apply battery horizon depth topological tests splitLogicErrors(): split SPC according variety possibly horizon depth errors HzDepthLogicSubset(): remove profiles SPC depth logic errors present","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"data-qc","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Data QC","title":"An Overview of the aqp Package","text":"evalMissingData(): report metrics missing data profile within SPC missingDataGrid(): visual indication missing data profileInformationIndex(): experimental indices “information content” profile","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"object-coercion","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Object Coercion","title":"An Overview of the aqp Package","text":"(SPC, 'list'): convert SPC list (SPC, 'data.frame'): convert site horizon data data.frame (SPC, 'sf'): convert site spatial data sf object","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"spatial-data","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Spatial Data","title":"An Overview of the aqp Package","text":"prj(): get/set coordinate reference system (CRS) metadata initSpatial(): set (site-level) column names containing coordinates getSpatial(): get spatial data (site + coordinates) SPC","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"internal-consistency","dir":"Articles","previous_headings":"Function Index by Topic > SoilProfileCollection Objects","what":"Internal Consistency","title":"An Overview of the aqp Package","text":"checkSPC(): check SPC internal consistency rebuildSPC(): re-make SPC previous version aqp (rarely required)","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"soil-profile-sketches","dir":"Articles","previous_headings":"Function Index by Topic","what":"Soil Profile Sketches","title":"An Overview of the aqp Package","text":"plotSPC(): create sketches soil profiles SPC explainPlotSPC(): explain various elements soil profile sketch groupedProfilePlot(): create grouped sketches soil profiles plotMultipleSPC(): create sketches multiple, possibly non-conformal SPCs addBracket(): add vertical brackets beside soil profile sketches addDiagnosticBracket(): add vertical brackets beside soil profile sketches based diagnostic features addVolumeFraction(): add visual explanation coarse fragment volume soil profile sketches alignTransect(): align soil profiles external gradient topographic sequence","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"color-conversion","dir":"Articles","previous_headings":"Function Index by Topic > Soil Color / Color Science","what":"Color Conversion","title":"An Overview of the aqp Package","text":"col2Munsell(): convert various color notations Munsell notation munsell2rgb(): convert Munsell notation sRGB CIELAB color coordinates parseMunsell(): parse optionally convert munsell color spec2Munsell(): estimate closest Munsell color given reflectance spectra visible range getClosestMunsellChip(): estimate reasonably close Munsell color given non-standard notation estimateSoilColor(): estimate moist soil color dry soil color (vice versa)","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"comparison","dir":"Articles","previous_headings":"Function Index by Topic > Soil Color / Color Science","what":"Comparison","title":"An Overview of the aqp Package","text":"colorContrast(): pair-wise color contrast CIE2000 (dE00) based colors Munsell notation colorContrastPlot(): visual explanation soil color contrast dE00 contrastChart(): Munsell color book style explanation soil color contrast dE00 soilColorSignature(): derive soil color signatures profiles within SPC","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"aggregation","dir":"Articles","previous_headings":"Function Index by Topic > Soil Color / Color Science","what":"Aggregation","title":"An Overview of the aqp Package","text":"colorChart(): Munsell color book representation color frequency aggregateColor(): estimate color proportions within SPC according within groups horizons colorQuantiles(): marginal L1 quantiles color CIELAB coordinates","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"utility-1","dir":"Articles","previous_headings":"Function Index by Topic > Soil Color / Color Science","what":"Utility","title":"An Overview of the aqp Package","text":"huePosition(): generate ordered factor standard Munsell hues huePositionCircle(): graphical representation standard Munsell hues, optional simulation common color vision deficiency simulateColor(): simulate range Munsell colors given measures central tendency spread previewColors(): graphical preview colors grid via nMDS soilPalette(): generate swatch-like arrangements colors labels equivalentMunsellChips(): specified Munsell color, identify Munsell colors lower CIE2000 color contrast difference","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"simulation-of-mixtures","dir":"Articles","previous_headings":"Function Index by Topic > Soil Color / Color Science","what":"Simulation of Mixtures","title":"An Overview of the aqp Package","text":"mixMunsell(): simulate subtractive mixture pigments specified Munsell notation plotColorMixture(): simulate subtractive mixture pigments, display reflectance spectra","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"numerical-classification-of-soil-profiles","dir":"Articles","previous_headings":"Function Index by Topic","what":"Numerical Classification of Soil Profiles","title":"An Overview of the aqp Package","text":"NCSP(): numerical classification soil profiles, within SoilProfileCollection compareSites(): pair-wise comparison site-level data SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"pedology","dir":"Articles","previous_headings":"Function Index by Topic","what":"Pedology","title":"An Overview of the aqp Package","text":"allocate(): perform one several classification systems soil property data estimateAWC(): estimate plant-available water holding capacity correctAWC(): apply rock fragment soluble salt corrections AWC estimates hzDistinctnessCodeToOffset(): convert horizon boundary distinctness codes vertical offset hzTopographyCodeToLineType(): convert horizon boundary topography codes line types hzTopographyCodeToOffset(): convert horizon boundary topography codes offset ph_to_rxnclass(): convert pH reaction class rxnclass_to_ph(): convert reaction class pH range ReactionClassLevels(): ordered factor reaction classes horizonColorIndices(): compute various soil color-based indices horizons within SPC","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"soil-texture","dir":"Articles","previous_headings":"Function Index by Topic > Pedology","what":"Soil Texture","title":"An Overview of the aqp Package","text":"textureTriangleSummary(): graphical summary sand, silt, clay fractions soil texture triangle bootstrapSoilTexture(): simulation realistic compositions (sand, silt, clay) small set example data SoilTextureLevels(): ordered factor soil texture classes texcl_to_ssc(): convert soil texture classes sand, silt, clay centroids ssc_to_texcl(): convert sand, silt, clay values soil texture class texture_to_taxpartsize(): convert soil texture Soil Taxonomy particle size class","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"coarse-fragments","dir":"Articles","previous_headings":"Function Index by Topic > Pedology","what":"Coarse Fragments","title":"An Overview of the aqp Package","text":"fragmentSieve(): classify coarse fragments fragment diameter texmod_to_fragvoltot(): estimate ranges coarse fragment volume based soil texture modifier texture_to_texmod() fragvol_to_texmod() fragmentClasses(): coarse fragment diameter thresholds used USDA-NRCS","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"soil-taxonomy-1","dir":"Articles","previous_headings":"Function Index by Topic > Pedology","what":"Soil Taxonomy","title":"An Overview of the aqp Package","text":"getArgillicBounds(): estimate upper lower boundaries argillic horizon getCambicBounds(): estimate upper lower boundaries cambic horizon getSurfaceHorizonDepth() getMineralSoilSurfaceDepth() getPlowLayerDepth() hasDarkColors() estimatePSCS()","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"generalized-horizon-labels-ghl","dir":"Articles","previous_headings":"Function Index by Topic > Pedology","what":"Generalized Horizon Labels (GHL)","title":"An Overview of the aqp Package","text":"generalize.hz(): apply REGEX rules group horizon designations reduced set “generalized horizon labels” evalGenHZ(): evaluate internal consistency assigned GHL genhzTableToAdjMat(): convert cross-tabulation GHL vs. original horizon designations adjacency matrix get.ml.hz(): extract likely horizon boundary depths probability depth functions guessGenHzLevels(): estimate correct ordering GHL given horizon depths GHL(): get/set GHL metadata SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"misc-","dir":"Articles","previous_headings":"Function Index by Topic","what":"Misc.","title":"An Overview of the aqp Package","text":"invertLabelColor(): automatic adjustment label color maximum contrast, based specified background color hzTransitionProbabilities(): derive transition probability matrix horizon level data mostLikelyHzSequence(): use Markov Chains predict likely sequence horizons","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"accuracy-and-uncertainty","dir":"Articles","previous_headings":"Function Index by Topic > Misc.","what":"Accuracy and Uncertainty","title":"An Overview of the aqp Package","text":"shannonEntropy(): Shannon entropy brierScore(): Brier’s score tauW(): weighted tau statistic","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"overlapping-annotation","dir":"Articles","previous_headings":"Function Index by Topic > Misc.","what":"Overlapping Annotation","title":"An Overview of the aqp Package","text":"findOverlap(): identify overlap within vector positions based given threshold overlapMetrics(): metrics overlap within vector positions based given threshold fixOverlap(): attempt minimum adjustments vector positions given distance threshold enforced","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/aqp-overview.html","id":"example-data","dir":"Articles","previous_headings":"Function Index by Topic","what":"Example Data","title":"An Overview of the aqp Package","text":"sp1 sp2 sp3 sp4 sp5 sp6 sierraTransect wilson2022 rowley2019 jacobs2000 osd SPC..overlap us.state.soils soil_minerals munsell equivalent_munsell munsellHuePosition munsell.spectra spectral.reference ROSETTA.centroids reactionclass soiltexture","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/label-placement.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Overlapping Annotation","text":"creation soil profile sketches cornerstone {aqp} package since first CRAN release 2010. addition horizon depth annotation 2017 became clear form label placement adjustment required avoid overlapping annotation. Thin horizons / large font sizes almost always lead overlapping horizon depth labels (see numbers just right horizon boundaries figure ).  Version 2.0 {aqp} package provides two algorithms avoiding overlapping annotation, available plotSPC() adjustment horizon depth annotation, general use via fixOverlap(). Within context plotSPC(), overlapping horizon depth labels flagged according overlap threshold computed label text height current graphics device. Consider following example soil profile sketches, created single soil profile template characterized multiple thin horizons. Simulation duplication used generate multiple copies three variations original template. Overlapping horizon depth labels clear. Note three copies simulated variation original template. Colors represent sequence top bottom, visual aid across perturbed duplicated profiles. Selecting optimal label-adjustment methods parameters depend collection profiles, horizonation, profile height, font sizes, graphics device settings (figure height, resolution). electrostatic simulation: generally best method, deterministic solutions typically move labels little possible fewer iterations. well many thin horizons near top bottom profile. complex profiles larger font sizes may require setting q values larger 1. Set q values 0.25-0.75 minimize adjustment distances. method (yet) provide label adjustment solution presence missing horizon depths horizons top == bottom. simulated annealing: method adaptive, typically capable providing reasonable solutions even complex profiles. non-deterministic solutions can undesirable preparing figures publication. Use set.seed() control output runs.","code":"library(aqp)  # soil profile template x <- quickSPC(   \"SPC:Oi|Oe|AAAAA|E1|E2|Bhs1Bhs1Bhs1|Bhs2|CCCCCC|RRRRRRRRRR\",    interval = 3 )  # set variability in horizon thickness horizons(x)$thick.sd <- 3 # setup horizon designations horizons(x)$nm <- factor(x$name, levels = c('Oi', 'Oe', 'A', 'E1', 'E2', 'Bhs1', 'Bhs2', 'C', 'R'))  # simulate 3 realizations of original profile set.seed(10101) s <- perturb(x, n = 3, thickness.attr = 'thick.sd', min.thickness = 2)  # create 3 copies of each simulation s <- duplicate(s, times = 3)"},{"path":"https://ncss-tech.github.io/aqp/articles/label-placement.html","id":"electrostatic-simulation","dir":"Articles","previous_headings":"Introduction","what":"Electrostatic Simulation","title":"Overlapping Annotation","text":"electrostatic simulation applies forces repulsion labels within given distance threshold forces attraction uniformly spaced sequence. Affected labels iteratively perturbed either overlap reported, maximum number iterations reached. Label adjustment solutions deterministic can controlled additional arguments electroStatics_1D(). common adjustment via charge density (q). See comparisons .","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/label-placement.html","id":"simulated-annealing","dir":"Articles","previous_headings":"Introduction","what":"Simulated Annealing","title":"Overlapping Annotation","text":"approach makes small adjustments affected label positions overlap removed, maximum number iterations reached. Rank order boundary conditions preserved. underlying algorithm based simulated annealing. Label placement solutions non-deterministic, use set.seed() repeatability important. “cooling schedule” parameters T0 k can used tune algorithm specific applications. additional arguments passed SANN_1D() via fixOverlap(). Note solution, within duplicate profiles, slightly different.","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/label-placement.html","id":"quick-comparison","dir":"Articles","previous_headings":"","what":"Quick Comparison","title":"Overlapping Annotation","text":"Create busy profile lots possible overlapping horizon depth labels. Set arguments plotSPC() define custom function demonstrate various label adjustment settings. Compare contrast. “LAI” index label adjustment, relative original label positions. Larger values imply higher degree adjustment. Note simulated annealing (SANN) label adjustment different, unless randomness “controlled” using set.seed().","code":"x <- quickSPC(   \"SPC:Oi|Oe|AAA|E1|E2|E3|BhsBhsBhsBhs|Bt1|Bt2|Bt3Bt3|CCCCCC|Ab1|Ab2|2C2C2C2C2C2C|2Cr|2R2R2R2R2R2R2R2R\",    interval = 1 )  x$z <- as.numeric(x$hzID) # pretty colors .bluecolors <- hcl.colors(n = 25, palette = 'Blues')[-25]  # plotSPC arguments .a <- list(   width = 0.2,    max.depth = 40,   hz.depths = TRUE,    name.style = 'center-center',    cex.names = 1.5,   name = NA,   depth.axis = FALSE,    color = 'z',   show.legend = FALSE,   print.id = FALSE,   col.palette = .bluecolors )  # set plotSPC default arguments options(.aqp.plotSPC.args = .a)  # wrapper function to test label collision solutions testIt <- function(x, ...) {      # make sketches   plotSPC(x, ...)      # a normalized index of label adjustment   .LAI <- get('last_spc_plot', envir = aqp.env)$hz.depth.LAI   .LAI <- ifelse(is.na(.LAI), 0, .LAI)      # annotate with label adjustment index   .txt <- sprintf(\"LAI: %0.3f\", .LAI)   mtext(.txt, side = 1, at = 1, line = -1.5, cex = 0.8) } par(mar = c(1, 0, 0, 0), mfcol = c(1, 8))  testIt(x, fixLabelCollisions = FALSE) title('No\\nAdjustment', line = -3.5, adj = 0.5)  testIt(x, fixOverlapArgs = list(method = 'S')) title('SANN\\nsim 1', line = -3.5, adj = 0.5)  testIt(x, fixOverlapArgs = list(method = 'S')) title('SANN\\nsim 2', line = -3.5, adj = 0.5)  testIt(x, fixOverlapArgs = list(method = 'S')) title('SANN\\nsim 3', line = -3.5, adj = 0.5)  testIt(x, fixOverlapArgs = list(method = 'E', q = 1.5)) title('Electrostatic\\nq = 1.5', line = -3.5, adj = 0.5)  testIt(x, fixOverlapArgs = list(method = 'E', q = 1)) title('Electrostatic\\nq = 1', line = -3.5, adj = 0.5)  testIt(x, fixOverlapArgs = list(method = 'E', q = 0.5)) title('Electrostatic\\nq = 0.5', line = -3.5, adj = 0.5)  testIt(x, fixOverlapArgs = list(method = 'E', q = 0.25)) title('Electrostatic\\nq = 0.25', line = -3.5, adj = 0.5)"},{"path":"https://ncss-tech.github.io/aqp/articles/label-placement.html","id":"compare-with-real-soil-series","dir":"Articles","previous_headings":"","what":"Compare with Real Soil Series","title":"Overlapping Annotation","text":"","code":"library(aqp) library(soilDB)  s <- c('inks' , 'pardee', 'clarksville', 'palau', 'hao', 'inks', 'eheuiki', 'puaulu', 'zook', 'cecil') x <- fetchOSD(s)  par(mar = c(0, 0, 0, 3))  .args <- list(width = 0.3, name.style = 'center-center', hz.depths = TRUE, cex.names = 0.8) options(.aqp.plotSPC.args = .args)  plotSPC(x, fixOverlapArgs = list(method = 'E', q = 1.25), max.depth = 151) plotSPC(x, fixOverlapArgs = list(method = 'E', q = 1), max.depth = 151) plotSPC(x, fixOverlapArgs = list(method = 'E', q = 0.75), max.depth = 151) plotSPC(x, fixOverlapArgs = list(method = 'E', q = 0.5), max.depth = 151) plotSPC(x, fixOverlapArgs = list(method = 'E', q = 0.25), max.depth = 151) plotSPC(x, fixOverlapArgs = list(method = 'S'), max.depth = 151)"},{"path":"https://ncss-tech.github.io/aqp/articles/label-placement.html","id":"general-cases","dir":"Articles","previous_headings":"","what":"General Cases","title":"Overlapping Annotation","text":"label adjustment functionality can used outside context plotSPC(). function overlapMetics() can used determine overlap within vector positions based given distance threshold. fixOverlap() function attempt adjustment, given distance threshold method selection. Additional parameters passed SANN_1D() electroStatics_1D(). converged attribute included result signify successful solution possible. See manual page fixOverlap() additional details.","code":"x <- c(1, 2, 3, 3.4, 3.5, 5, 6, 10)  overlapMetrics(x, thresh = 0.5) #> $idx #> [1] 3 4 5 #>  #> $ov #> [1] 0.125 # vector of positions, typically labels but could be profile sketch alignment on the x-axis s <- c(1, 2, 2.3, 4, 5, 5.5, 7)  # simulated annealing, solution is non-deterministic fixOverlap(s, thresh = 0.5, method = 'S') #> 17 iterations #> [1] 1.000000 2.181620 2.888599 4.000000 5.000000 5.500000 7.000000 #> attr(,\"converged\") #> [1] TRUE # electrostatics-inspired simulation of particles # solution is deterministic fixOverlap(s, thresh = 0.5, method = 'E') #> 2 iterations #> [1] 1.000000 1.847048 2.419053 4.000000 5.000000 5.500000 7.000000 #> attr(,\"converged\") #> [1] TRUE"},{"path":"https://ncss-tech.github.io/aqp/articles/label-placement.html","id":"compare-algorithms","dir":"Articles","previous_headings":"","what":"Compare Algorithms","title":"Overlapping Annotation","text":"Define custom function comparing extended output fixOverlap(..., trace = TRUE) using electrostatic simulation (method = 'E') simulated annealing (method = 'S'). top panels represent objective function, smaller values better. Bottom panels illustrate perturbations elements position vector x. Larger values charge density q required applying electrostatic simulation method increasingly complex problems (e.g. larger thresholds, overlap). However, setting q high result chaos failure converge.      Additional examples tinker .","code":"evalMethods <- function(x, thresh, q, ...) {      cols <- hcl.colors(n = 9, palette = 'Zissou 1', rev = TRUE)   cols <- colorRampPalette(cols)(length(x))      z <- fixOverlap(x, thresh = thresh, method = 'E', maxIter = 250, trace = TRUE, q = q)   .n <- nrow(z$states)      op <- par(mar = c(0, 2, 2, 0.5), bg = 'black', fg = 'white')   layout(matrix(c(1, 2, 3, 4), ncol = 2, nrow = 2), heights = c(0.33, 0.66))      plot(seq_along(z$cost), z$cost, las = 1, type = 'b', axes = FALSE, cex = 0.66, xlim = c(1, .n))   mtext(text = sprintf(\"Converged (%s): %s\", .n, z$converged), at = 1, side = 3, line = 0, cex = 0.75, font = 3, adj = 0)   matplot(rbind(x, z$states), type = 'l', lty = 1, las = 1, axes = FALSE, col = cols, lwd = 1)      points(x = rep(1, times = length(x)), y = x, cex = 0.66, pch = 16, col = cols)   points(x = rep(.n + 1, times = length(x)), y = z$x, cex = 0.66, pch = 16, col = cols)      text(x = 1, y = x, col = cols, labels = seq_along(x), cex = 0.66, font = 2, pos = 2)   text(x = .n + 1, y = z$x, col = cols, labels = seq_along(x), cex = 0.66, font = 2, pos = 4)      axis(side = 2, at = unique(x), labels = round(unique(x), 1), col.axis = par('fg'), las = 1, cex.axis = 0.6)   title(main = 'Electrostatic Simulation', line = 1, col.main = 'white')      ## SANN_1D doesn't always preserve rank ordering   ##  ->> not designed to use unsorted input   ##  ->> maybe impossible with ties in x?      z <- fixOverlap(x, thresh = thresh, method = 'S', trace = TRUE, maxIter = 1000)   .n <- nrow(z$states)      plot(seq_along(z$stats), z$stats, las = 1, type = 'b', axes = FALSE, cex = 0.66, xlim = c(1, .n))   mtext(text = sprintf(\"Converged (%s): %s\", .n, z$converged), at = 1, side = 3, line = 0, cex = 0.75, font = 3, adj = 0)      matplot(z$states, type = 'l', lty = 1, las = 1, axes = FALSE, col = cols)      points(x = rep(1, times = length(x)), y = z$states[1, ], cex = 0.66, pch = 16, col = cols)   points(x = rep(.n, times = length(x)), y = z$x, cex = 0.66, pch = 16, col = cols)      text(x = 1, y = z$states[1, ], col = cols, labels = seq_along(x), cex = 0.66, font = 2, pos = 2)   text(x = .n, y = z$x, col = cols, labels = seq_along(x), cex = 0.66, font = 2, pos = 4)      axis(side = 2, at = unique(x), labels = round(unique(x), 1), col.axis = par('fg'), las = 1, cex.axis = 0.6)      title(main = 'Simulated Annealing', line = 1, col.main = 'white')      # reset graphics state   par(op)   layout(1)    } # explore effect of charge (q) # too large -> chaos x <- c(0, 2, 5, 12, 18, 20, 35, 40, 50, 56, 90, 120, 145, 150)  # just about right, very few perturbations required evalMethods(x, thresh = 5, q = 1.1) # ok, but now most label positions are affected evalMethods(x, thresh = 5, q = 1.8) # too high, wasting time on more iterations evalMethods(x, thresh = 5, q = 3) # far too high, wasting more time with little gain evalMethods(x, thresh = 5, q = 4) # chaos and eventually convergence evalMethods(x, thresh = 5, q = 5) # threshold too large evalMethods(x, thresh = 10, q = 3)  # large threshold x <- c(0, 5, 12, 18, 20, 35, 40, 55, 90, 120, 145, 150) evalMethods(x, thresh = 9, q = 2)  # single iteration enough x <- c(0, 3, 20, 35, 40, 55, 90, 120, 145, 150) evalMethods(x, thresh = 6, q = 1)  # clusters x <- sort(c(0, jitter(rep(10, 3)), jitter(rep(25, 3)), jitter(rep(90, 3)), 150)) evalMethods(x, thresh = 6, q = 3) evalMethods(x, thresh = 6, q = 2)   ## impact of scale / offset x <- c(0, 5, 12, 18, 20, 35, 40, 50, 120, 145, 150)  # works as expected evalMethods(x, thresh = 5, q = 1.1)  # works as expected, as long as threshold is scaled evalMethods(x / 10, thresh = 5 / 10, q = 1.1)  # works as expected, as long as threshold is scaled evalMethods(x * 10, thresh = 5 * 10, q = 1.1)   # all work as expected, threshold not modified evalMethods(x + 10, thresh = 5, q = 1.1) evalMethods(x + 100, thresh = 5, q = 1.1) evalMethods(x + 1000, thresh = 5, q = 1.1)  # works as expected x <- c(315, 325, 341, 353, 366, 374, 422) fixOverlap(x, thresh = 9.7, q = 1, method = 'E') evalMethods(x, thresh = 9.7, q = 1)   x <- c(1.0075, 1.1200, 1.3450, 1.6450, 1.8700, 1.8825) fixOverlap(x, thresh = 0.05442329, q = 1) evalMethods(x, thresh = 0.05442329, q = 1)"},{"path":"https://ncss-tech.github.io/aqp/articles/label-placement.html","id":"learning-more-about-the-sann-algorithm","dir":"Articles","previous_headings":"","what":"Learning More about the SANN Algorithm","title":"Overlapping Annotation","text":"Define custom function visualizing extended output fixOverlap(..., method = 'S', trace = TRUE). relatively challenging example.  challenging example.  Cleanup.","code":"tracePlot <- function(x, z, cex.axis.labels = 0.85) {   # setup plot device   op <- par(mar = c(4, 4, 1, 1), bg = 'black', fg = 'white')   layout(matrix(c(1,2,3)), widths = 1, heights = c(1,1,2))      # order:   # B: boundary condition violation   # O: rank (order) violation   # +: accepted perturbation   # -: rejected perturbation   cols <- c(grey(0.85), 'yellow', 'royalblue', 'firebrick')      cols.lines <- hcl.colors(9, 'Zissou 1', rev = TRUE)   cols.lines <- colorRampPalette(cols.lines)(length(x))      # total overlap (objective function) progress   plot(     seq_along(z$stats), z$stats,      type = 'h', las = 1,     xlab = 'Iteration', ylab = 'Total Overlap',     axes = FALSE,     col = cols[as.numeric(z$log)]   )      axis(side = 2, cex.axis = cex.axis.labels, col.axis = 'white', las = 1, line = -2)   mtext('Overlap', side = 2, line = 2, cex = cex.axis.labels, font = 2)      # deviation from original configuration   plot(     seq_along(z$stats), z$ssd,      type = 'h', las = 1,     xlab = 'Iteration', ylab = 'Deviation',     axes = FALSE,     col = cols[as.numeric(z$log)]   )      axis(side = 2, cex.axis = cex.axis.labels, col.axis = 'white', las = 1, line = -2)   mtext('Deviation', side = 2, line = 2, cex = cex.axis.labels, font = 2)   legend('top', legend = c('boundary\\nviolation', 'rank\\nviolation', 'accepted\\nperturbation', 'rejected\\nperturbation'), col = cols, bty = 'n', horiz = TRUE, inset = -0.5, lty = 1, lwd = 2, xpd = NA)      # adjustments at each iteration   matplot(     z$states, type = 'l',      lty = 1, las = 1,      xlab = 'Iteration', ylab = 'x-position',     axes = FALSE,     col = cols.lines   )      axis(side = 2, cex.axis = cex.axis.labels, col.axis = 'white', las = 1, at = x, labels = round(x, 1))   axis(side = 4, cex.axis = cex.axis.labels, col.axis = 'white', las = 1, at = z$x, labels = round(z$x, 1), line = -2)   mtext('Position', side = 2, line = 2.5, cex = cex.axis.labels, font = 2)      axis(side = 1, cex.axis = 1, col.axis = 'white', line = 0)   mtext('Iteration', side = 1, line = 2.5, cex = cex.axis.labels, font = 2)      par(op)   layout(1) } x <- c(0, 1, 2, 2.2, 2.8, 3.5, 6, 8, 10, 10.1, 12.8, 13, 14.8, 15, 15.5)  # fix overlap, return debugging information set.seed(10101) z <- fixOverlap(x, thresh = 0.73, method = 'S', trace = TRUE) #> 160 iterations # check convergence z$converged #> [1] TRUE # inspect algorithm trace tracePlot(x, z) # trace log # B: boundary condition violation # O: rank (order) violation # +: accepted perturbation # -: rejected perturbation table(z$log) #>  #>  B  O  +  -  #> 22 71 64  2 # fix overlap, return debugging information set.seed(101010) x <- sort(runif(10, min = 2.5, max = 3.5))  # widen boundary conditions z <- fixOverlap(x, thresh = 0.2, trace = TRUE, min.x = 0, max.x = 10, maxIter = 2000, adj = 0.05) #> 1203 iterations # check convergence z$converged #> [1] TRUE # inspect algorithm trace tracePlot(x, z) # reset plotSPC() options options(.aqp.plotSPC.args = NULL)"},{"path":"https://ncss-tech.github.io/aqp/articles/new-in-aqp-2.html","id":"notable-changes","dir":"Articles","previous_headings":"","what":"Notable Changes","title":"What is new in aqp 2.x?","text":"Deprecation slice() favor new, faster, robust implementation via dice(). sure update existing code use dice() now . argument names changed. Complete overhaul slab() (thanks @brownag), new arguments, faster back-end, weighted aggregation implemented (finally). site level attributes now handled compareSites() variable weights specified argument functions perturb() estimatePSCS() now vectorized, optimized larger SoilProfileCollection objects. mixMunsell() now uses mixingMethod = 'exact' default simulation subtractive color mixtures gower package moved SUGGESTS plotColorMixture() now using grid graphics functions determine color swatch geometry setting overlap detection threshold Deprecation rgb2munsell() favor general col2Munsell() Removal PMS2Munsell() support data Deprecation coordinates()<- proj4string()<- favor initSpatial()<- Removal rruff.sample example XRD patterns get.ml.hz() longer uses name argument","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/new-in-aqp-2.html","id":"major-changes-to-plotspc","dir":"Articles","previous_headings":"","what":"Major changes to plotSPC()","title":"What is new in aqp 2.x?","text":"maximum depth range figure now based max.depth max(x). means sketches generated {aqp} 2.x generally less white space bottom figure. Make room additional annotation visual effect setting desired depth range max.depth argument. Now using electroStatics_1D() method fixing horizon depth label overlap, solutions deterministic almost always better. Adjust label overlap adjustment strategy fixOverlapArgs = list(...). Better depth axis interval heuristics (specified), varying based figure depth range. Depth axis adjustments via new argument depth.axis, logical list plot.depth.axis: set via depth.axis = TRUE, depth.axis = FALSE, customize depth.axis = list(...) cex.depth.axis: set via depth.axis = list(cex = 1) axis.line.offset: set via depth.axis = list(line = -2)","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/new-in-aqp-2.html","id":"new-features","dir":"Articles","previous_headings":"","what":"New Features","title":"What is new in aqp 2.x?","text":"New example data, wilson2022. Fast prototyping SoilProfileCollection objects via quickSPC() list / character templates. Re-use arguments plotSPC() via setting options(.aqp.plotSPC.args = list(...)). Set options(.aqp.plotSPC.args = NULL) disable. Coarse fragment classification via fragmentSieve() fragmentClasses(). S4 .data.frame(<SPC>) shorthand (<SPC>, 'data.frame') plotSPC() now marks truncated profiles ragged bottom. electrostatic simulation (method = \"E\") simulated annealing (method = \"S\") New depth axis styles plotSPC(). New function flagOverlappingHz() identifying horizons perfect overlap New function warpHorizons() warping horizon thickness (inflate/deflate) simulateColor() adds multivariate simulation CIELAB colorspace","code":""},{"path":"https://ncss-tech.github.io/aqp/articles/new-in-aqp-2.html","id":"incremental-changes-should-have-no-effect-on-previous-code","dir":"Articles","previous_headings":"","what":"Incremental changes, should have no effect on previous code","title":"What is new in aqp 2.x?","text":"Bug fix plotSPC() fixLabelCollisions = TRUE, adjustments suggested fixOverlap() now scaled correctly. explainPlotSPC() reports label adjustment index label collision repair enabled. Aesthetic cleanup explainPlotSPC(). soilColorSignature() gains arguments perceptual color distances (dE00) via {farver} package. (<SPC>, \"data.frame\"): Replace plyr::join() merge(). correctAWC(): NA handling - return NA frags NA. mutate_profile(): Faster (data.table-based) evaluation profile-level expressions. profileApply: Add support custom lapply()-like function (APPLY.FUN) processing chunks. Add .interpretHorizonColor() outputs last_spc_plot aqp.env use custom legend(). Add simplify argument SoilTextureLevels() ssc_to_texcl() optionally convert ordered factor maximum 12 levels (rather 21). smaller list classes excludes sand grain size variants fine sand, loamy coarse sand, fine sandy loam. Major updates profileInformationIndex() methods performance boost. Enhancements evalMissingData().","code":""},{"path":"https://ncss-tech.github.io/aqp/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Beaudette. Author, maintainer. Pierre Roudier. Author, contributor. Andrew Brown. Author, contributor. Stephen Roecker. Author, contributor.","code":""},{"path":"https://ncss-tech.github.io/aqp/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beaudette, D., Roudier, P., Brown, . (2023). aqp: Algorithms Quantitative Pedology. R package version 2.0. <https://CRAN.R-project.org/package=aqp> Beaudette, D.E., Roudier, P., O'Geen, .T. Algorithms quantitative pedology: toolkit soil scientists, Computers & Geosciences, Volume 52, March 2013, Pages 258-268, ISSN 0098-3004, http://dx.doi.org/10.1016/j.cageo.2012.10.020.","code":"@Manual{,   title = {aqp: Algorithms for Quantitative Pedology},   author = {{Beaudette} and {D.} and {Roudier} and {P.} and {Brown} and {A.}},   note = {R package version 2.0},   url = {https://CRAN.R-project.org/package=aqp},   year = {2023}, } @Article{,   title = {Algorithms for quantitative pedology: A toolkit for soil scientists},   author = {{Beaudette} and {D.E.} and {Roudier} and {P.} and {O'Geen} and {A.T.}},   journal = {Computers & Geosciences},   year = {2013},   volume = {52},   pages = {258-268},   url = {http://dx.doi.org/10.1016/j.cageo.2012.10.020}, }"},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"algorithms-for-quantitative-pedology-aqp-package-for-r","dir":"","previous_headings":"","what":"Algorithms for Quantitative Pedology","title":"Algorithms for Quantitative Pedology","text":"Algorithms Quantitative Pedology (AQP) project started 2009 organize loosely-related set concepts source code topic soil profile visualization, aggregation, classification package (aqp). past 8 years, project grown suite related R packages enhance simplify quantitative analysis soil profile data. Central AQP project new vocabulary specialized functions data structures can accommodate inherent complexity soil profile information; freeing scientist focus ideas rather boilerplate data processing tasks doi:10.1016/j.cageo.2012.10.020. functions data structures extensively tested documented, applied projects involving hundreds thousands soil profiles, deeply integrated widely used tools SoilWeb https://casoilresource.lawr.ucdavis.edu/soilweb-apps. Components AQP project (aqp, soilDB, sharpshootR, soilReports packages) serve important role routine data analysis within USDA-NRCS Soil Science Division. AQP suite R packages offer convenient platform bridging gap pedometric theory practice.","code":""},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Algorithms for Quantitative Pedology","text":"Get stable version CRAN: Get development version Github, installing CRAN version + dependencies: Install suggested packages:","code":"install.packages('aqp', dep=TRUE) remotes::install_github(\"ncss-tech/aqp\", dependencies=FALSE, upgrade=FALSE, build=FALSE) p <- c(\"colorspace\", \"ape\", \"soilDB\", \"latticeExtra\", \"tactile\", \"compositions\",  \"sharpshootR\", \"markovchain\", \"xtable\", \"testthat\", \"Gmedian\",  \"farver\", \"Hmisc\", \"tibble\", \"RColorBrewer\", \"scales\", \"digest\",   \"mpspline2\", \"soiltexture\", \"knitr\", \"rmarkdown\", \"mvtnorm\")  install.packages(p)"},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"website","dir":"","previous_headings":"","what":"Website","title":"Algorithms for Quantitative Pedology","text":"http://ncss-tech.github.io/AQP/","code":""},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Algorithms for Quantitative Pedology","text":"","code":"library(aqp)  # example data from three official series descriptions data(\"osd\")  # simulate 2 copies of each # using horizon boundary distinctness offsets set.seed(10101) x <- perturb(osd, n = 2, boundary.attr = 'hzd', min.thickness = 5)  # tighter margins par(mar = c(0, 0, 1, 0))  # adjust default style # depict truncation at 175cm with ragged bottom plotSPC(   x,    name.style = 'center-center',    cex.names = 1,   width = 0.33,   cex.id = 0.9,   hz.distinctness.offset = 'hzd',    max.depth = 175,    depth.axis = FALSE,    hz.depths = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Algorithms for Quantitative Pedology","text":"","code":"citation(\"aqp\") #> To cite aqp in publications use: #>  #>   Beaudette, D., Roudier, P., Brown, A. (2023). aqp: Algorithms for #>   Quantitative Pedology. R package version 2.0. #>   <https://CRAN.R-project.org/package=aqp> #>  #>   Beaudette, D.E., Roudier, P., O'Geen, A.T. Algorithms for #>   quantitative pedology: A toolkit for soil scientists, Computers & #>   Geosciences, Volume 52, March 2013, Pages 258-268, ISSN 0098-3004, #>   http://dx.doi.org/10.1016/j.cageo.2012.10.020. #>  #> To see these entries in BibTeX format, use 'print(<citation>, #> bibtex=TRUE)', 'toBibtex(.)', or set #> 'options(citation.bibtex.max=999)'."},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"related-papers-and-book-chapters","dir":"","previous_headings":"","what":"Related Papers and Book Chapters","title":"Algorithms for Quantitative Pedology","text":"Beaudette D.E., P. Roudier, J. Skovlin. 2016. Probabilistic representation genetic soil horizons. Book Digital soil morphometrics. Springer. Maynard, J.J., S.W. Salley, D.E. Beaudette, J.E. Herrick. 2020. Numerical soil classification supports soil identification citizen scientists using limited, simple soil observations. Soil Science Society America Journal 84:1675-1692. Beaudette, D. E., J. Skovlin, . G. Brown, P. Roudier, S. M. Roecker. “Algorithms Quantitative Pedology.” Geopedology, edited Joseph Alfred Zinck, Graciela Metternicht, Héctor Francisco del Valle, Marcos Angelini, 201–22. Cham: Springer International Publishing, 2023. https://doi.org/10.1007/978-3-031-20667-2_11.","code":""},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"related-packages","dir":"","previous_headings":"","what":"Related Packages","title":"Algorithms for Quantitative Pedology","text":"soilDB sharpshootR","code":""},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Algorithms for Quantitative Pedology","text":"Introduction SoilProfileCollection Objects Numerical Classification Soil Profiles Overlapping Annotation new aqp 2.x?","code":""},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Algorithms for Quantitative Pedology","text":"Soil Profile Sketches Assigning Generalized Horizon Labels Visualization Horizon Boundaries Mixing Munsell Colors {aqp} Theoretical Water Retention Curves Soil Texture Visualization Ideas","code":""},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"related-presentations--posters","dir":"","previous_headings":"","what":"Related Presentations / Posters","title":"Algorithms for Quantitative Pedology","text":"Numerical Classification Soil Profiles (2023 NCSS Meetings)","code":""},{"path":"https://ncss-tech.github.io/aqp/index.html","id":"aqp-in-the-wild","dir":"","previous_headings":"","what":"aqp in the Wild","title":"Algorithms for Quantitative Pedology","text":"https://www.pnas.org/content/115/26/6751 found Scopus found Google Scholar http://www.scielo.br/scielo.php?script=sci_arttext&pid=S2179-80872019000100121","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/GHL.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set Generalized Horizon Label (GHL) Column Name — GHL","title":"Get or Set Generalized Horizon Label (GHL) Column Name — GHL","text":"GHL(): Get column name containing generalized horizon labels GHL<-: Set generalized horizon label column name","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/GHL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set Generalized Horizon Label (GHL) Column Name — GHL","text":"","code":"# S4 method for class 'SoilProfileCollection' GHL(object, required = FALSE)  # S4 method for class 'SoilProfileCollection' GHL(object, required = FALSE) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/GHL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set Generalized Horizon Label (GHL) Column Name — GHL","text":"object SoilProfileCollection required logical, attribute required? , set TRUE trigger error invalid value. value character, name column containing generalized horizon labels","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/GHL.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or Set Generalized Horizon Label (GHL) Column Name — GHL","text":"Store column name containing generalized horizon labels metadata slot SoilProfileCollection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/GHL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or Set Generalized Horizon Label (GHL) Column Name — GHL","text":"","code":"data(sp1)  # promote to SPC depths(sp1) <- id ~ top + bottom  # set horizon designation column GHL(sp1) <- \"name\"  # get horizon designation column GHL(sp1) #> [1] \"name\""},{"path":"https://ncss-tech.github.io/aqp/reference/HzDepthLogicSubset.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset SoilProfileCollection Objects or Horizons via checkHzDepthLogic — HzDepthLogicSubset","title":"Subset SoilProfileCollection Objects or Horizons via checkHzDepthLogic — HzDepthLogicSubset","text":"function removes profiles horizons SoilProfileCollection flagged invalid horizon depth logic checkHzDepthLogic. Invalid profiles may created setting byhz = TRUE; use caution functions may work properly presence gaps. Consider using fillHzGaps fill gaps.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/HzDepthLogicSubset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset SoilProfileCollection Objects or Horizons via checkHzDepthLogic — HzDepthLogicSubset","text":"","code":"HzDepthLogicSubset(x, byhz = FALSE)"},{"path":"https://ncss-tech.github.io/aqp/reference/HzDepthLogicSubset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset SoilProfileCollection Objects or Horizons via checkHzDepthLogic — HzDepthLogicSubset","text":"x SoilProfileCollection object byhz logical, evaluate horizon depth logic horizon level (profile level FALSE)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/HzDepthLogicSubset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset SoilProfileCollection Objects or Horizons via checkHzDepthLogic — HzDepthLogicSubset","text":"SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/HzDepthLogicSubset.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Subset SoilProfileCollection Objects or Horizons via checkHzDepthLogic — HzDepthLogicSubset","text":"function identify (remove) overlapping horizons byhz = TRUE.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/L1_profiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Representative Soil Profiles via L1 Estimator — L1_profiles","title":"Create Representative Soil Profiles via L1 Estimator — L1_profiles","text":"L1 estimator, geometric median, multivariate generalization (univariate) median concept. function performs multivariate aggregation (via L1 estimator) according suite ratio-scale soil properties. L1 estimator applied soil profile data sliced 1-depth-unit basis. Data well stratified groups defined fm, otherwise L1 median may make sense. See L1 Profiles Tutorial additional examples.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/L1_profiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Representative Soil Profiles via L1 Estimator — L1_profiles","text":"","code":"L1_profiles(   x,   fm,   basis = 1,   method = c(\"regex\", \"simple\", \"constant\"),   maxDepthRule = c(\"max\", \"min\"),   maxDepthConstant = NULL )"},{"path":"https://ncss-tech.github.io/aqp/reference/L1_profiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Representative Soil Profiles via L1 Estimator — L1_profiles","text":"x SoilProfileCollection object fm formula, example: group ~ p1 + p2 + p3, \"group\" site-level grouping variable, \"p1\", \"p2\", \"p3\" horizon level variables basis positive integer, aggregation basis (e.g. 1 1-depth-unit intervals). Values 1 currently supported. method soil depth evaluation method: \"regex\" regular expression, \"simple\", \"constant\". See details. maxDepthRule maximum depth rule: \"max\" \"min\" See details. maxDepthConstant positive integer, maximum depth maxDepthRule = 'constant'","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/L1_profiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Representative Soil Profiles via L1 Estimator — L1_profiles","text":"SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/L1_profiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Representative Soil Profiles via L1 Estimator — L1_profiles","text":"See related tutorial additional examples. method, maxDepthRule, maxDepthConstant arguments set maximum depth (entire collection) analysis used build \"L1 profiles\". following rules available: method = 'regex' uses pattern matching horizon designations (note hzdesgnname metadata must set hzdesgnname(x) <- 'columnname') method = 'simple' uses min max applied x, accounting non-soil horizons (e.g. Cr R) method = 'constant' uses fixed depth value supplied maxDepthConstant maxDepthRule argument sets depth calculation constraint, applied soil depths computed according method (min max).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/L1_profiles.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Representative Soil Profiles via L1 Estimator — L1_profiles","text":"function requires Gmedian package.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/L1_profiles.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create Representative Soil Profiles via L1 Estimator — L1_profiles","text":"Cardot, H., Cenac, P. Zitt, P-. (2013). Efficient fast estimation geometric median Hilbert spaces averaged stochastic gradient algorithm. Bernoulli, 19, 18-43.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/NCSP.html","id":null,"dir":"Reference","previous_headings":"","what":"Numerical Classification of Soil Profiles — NCSP","title":"Numerical Classification of Soil Profiles — NCSP","text":"Replacement profile_compare(). Performs numerical comparison soil profiles using named properties, based weighted, summed, depth-segment-aligned dissimilarity calculation. Variability soil depth can interfere significantly calculation -profile dissimilarity–numerical “distance” (dissimilarity) slice soil profile corresponding, missing, slice shallower profile B? Gower's distance metric yield NULL distance, despite fact intuition suggests otherwise: shallower soils dissimilar deeper soils. example, 25 cm deep profile compared 50 cm deep profile, numerical distances accumulated first 25 cm soil (distances 26 - 50 cm NULL). summed, total distance profiles generally less distance two profiles equal depth. algorithm replace NULL distances maximum distance pair profiles current depth slice. way, numerical distance slice soil corresponding slice non-soil reflects fact two materials treated differently. alternative calculation dissimilarities soil non-soil slices solves problem comparing shallow profiles deeper profiles. However, can result new problem: distances calculated two shallow profiles erroneously inflated beyond extent either profile's depth. algorithm preserve NULL distances slices slices represent non-soil material. Therefore, shallow profiles accumulate mutual dissimilarity depth deeper profile. Slices classified 'soil' maximum depth least one variables used dissimilarity calculation NA. cause problems profiles within collection contain NAs within columns used determine dissimilarity. approach identifying removing kind profiles presented examples section . approach builds work (Moore, 1972) previously mentioned depth-slicing algorithm. See references detailed explanation NCSP algorithm.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/NCSP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Numerical Classification of Soil Profiles — NCSP","text":"","code":"NCSP(   x,   vars,   fm = NULL,   weights = rep(1, times = length(vars)),   maxDepth = max(x),   k = 0,   isColor = FALSE,   rescaleResult = FALSE,   verbose = TRUE,   returnDepthDistances = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/NCSP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Numerical Classification of Soil Profiles — NCSP","text":"x SoilProfileColection object, pre-filtered remove profiles horizon depth logic, see HzDepthLogicSubset vars character vector, names horizon attributes use classification fm formula, formula specified dice(), yet implemented weights numeric vector, length vars: variable importance weights, need sum 1 maxDepth numeric, maximum depth analysis k numeric, weighting coefficient, usually 0-1. value 0 results depth-weighting. See examples. isColor, logical: variables represent color, CIELAB coordinates (D65 illuminant), weights ignored. Variables named L, , B specified order. rescaleResult logical, distance matrix rescaled based max(D) verbose logical, extra output messages returnDepthDistances logical, return list distances depth slice","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/NCSP.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Numerical Classification of Soil Profiles — NCSP","text":"NCSP() overwrite removed.profiles metadata x.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/NCSP.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Numerical Classification of Soil Profiles — NCSP","text":"J.J Maynard, S.W. Salley, D.E. Beaudette, J.E Herrick. Numerical soil classification supports soil identification citizen scientists using limited, simple soil observations. Soil Sci. Soc. . J. 2020; 84: 1675-1692. doi:10.1002/saj2.20119 . D.E. Beaudette, P. Roudier, .T. O'Geen, Algorithms quantitative pedology: toolkit soil scientists, Computers & Geosciences, Volume 52, 2013, Pages 258-268, ISSN 0098-3004, doi:10.1016/j.cageo.2012.10.020 . Moore, .; Russell, J. & Ward, W. Numerical analysis soils: comparison three soil profile models field classification. Journal Soil Science, 1972, 23, 194-209.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/NCSP.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Numerical Classification of Soil Profiles — NCSP","text":"Dylan E. Beaudette Jon Maynard","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ROSETTA.centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"Average Hydraulic Parameters from the ROSETTA Model by USDA Soil Texture Class — ROSETTA.centroids","title":"Average Hydraulic Parameters from the ROSETTA Model by USDA Soil Texture Class — ROSETTA.centroids","text":"Average soil hydraulic parameters generated first stage predictions ROSETTA model USDA soil texture class. data extracted ROSETTA documentation re-formatted ease use.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ROSETTA.centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average Hydraulic Parameters from the ROSETTA Model by USDA Soil Texture Class — ROSETTA.centroids","text":"","code":"data(ROSETTA.centroids)"},{"path":"https://ncss-tech.github.io/aqp/reference/ROSETTA.centroids.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Average Hydraulic Parameters from the ROSETTA Model by USDA Soil Texture Class — ROSETTA.centroids","text":"data frame: texture soil texture class, ordered low high available water holding capacity theta_r average saturated water content theta_s average residual water content alpha average value, related inverse air entry suction, log10-transformed values units cm npar average value, index pore size distribution, log10-transformed values units 1/cm theta_r_sd 1 standard deviation theta_r theta_s_sd 1 standard deviation theta_s alpha_sd 1 standard deviation alpha npar_sd 1 standard deviation npar sat approximate volumetric water content soil material saturated fc approximate volumetric water content matrix potential = -33kPa pwp approximate volumetric water content matrix potential = -1500kPa awc approximate available water holding capacity: VWC(-33kPa) VWC(-1500kPa)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ROSETTA.centroids.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Average Hydraulic Parameters from the ROSETTA Model by USDA Soil Texture Class — ROSETTA.centroids","text":"ROSETTA Class Average Hydraulic Parameters","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ROSETTA.centroids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Average Hydraulic Parameters from the ROSETTA Model by USDA Soil Texture Class — ROSETTA.centroids","text":"Theoretical water-retention parameters uniform soil material texture class estimated via van Genuchten model. See related tutorial","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ROSETTA.centroids.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Average Hydraulic Parameters from the ROSETTA Model by USDA Soil Texture Class — ROSETTA.centroids","text":"van Genuchten, M.Th. (1980). \"closed-form equation predicting hydraulic conductivity unsaturated soils\". Soil Science Society America Journal. 44 (5): 892-898. Schaap, M.G., F.J. Leij, M.Th. van Genuchten. 2001. ROSETTA: computer program estimating soil hydraulic parameters hierarchical pedotransfer functions. Journal Hydrology 251(3–4): 163-176.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ROSETTA.centroids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average Hydraulic Parameters from the ROSETTA Model by USDA Soil Texture Class — ROSETTA.centroids","text":"","code":"if (FALSE) { # \\dontrun{  library(aqp) library(soilDB) library(latticeExtra)  data(\"ROSETTA.centroids\")  # iterate over horizons and generate VG model curve res <- lapply(1:nrow(ROSETTA.centroids), function(i) {   m <- KSSL_VG_model(VG_params = ROSETTA.centroids[i, ], phi_min = 10^-3, phi_max=10^6)$VG_curve   # copy generalized hz label   m$hz <- ROSETTA.centroids$hz[i]   # copy ID   m$texture_class <- ROSETTA.centroids$texture[i]   return(m) })  # copy over lab sample number as ID res <- do.call('rbind', res)  # check: OK str(res)   # visual check: OK xyplot(   phi ~ theta | texture_class, data=res,   type=c('l', 'g'),   scales=list(alternating=3, x=list(tick.number=10), y=list(log=10, tick.number=10)),   yscale.components=yscale.components.logpower,   ylab=expression(Suction~~(kPa)),   xlab=expression(Volumetric~Water~Content~~(cm^3/cm^3)),   par.settings = list(superpose.line=list(col='RoyalBlue', lwd=2)),   strip=strip.custom(bg=grey(0.85)),   as.table=TRUE )   } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/SANN_1D.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix Overlap within a Sequence via Simulated Annealing — SANN_1D","title":"Fix Overlap within a Sequence via Simulated Annealing — SANN_1D","text":"function makes small adjustments elements x overlap defined thresh removed, maxIter reached. Rank order boundary conditions (defined min.x max.x) preserved. underlying algorithm based simulated annealing. \"cooling schedule\" parameters T0 k can used tune algorithm specific applications.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SANN_1D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix Overlap within a Sequence via Simulated Annealing — SANN_1D","text":"","code":"SANN_1D(   x,   thresh = 0.6,   adj = thresh * 2/3,   min.x = min(x) - 0.2,   max.x = max(x) + 0.2,   maxIter = 1000,   trace = FALSE,   tiny = 1e-04,   T0 = 500,   k = 10,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/SANN_1D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix Overlap within a Sequence via Simulated Annealing — SANN_1D","text":"x vector horizontal positions, pre-sorted thresh horizontal threshold defining \"overlap\" distance elements x. adjusting soil profile sketches values typically < 1 likely (0.3, 0.8). adj specifies size perturbations within runif(min = adj * -1, max = adj). Larger values sometimes reduce number iterations required solve particularly difficult overlap conditions. See coolingRate argument adj large min.x left-side boundary condition, consider expanding solution found within maxIter. max.x right-side boundary condition, consider expanding solution found within maxIter. maxIter maximum number iterations attempt giving returning regularly-spaced sequence trace print diagnostics, result list vs vector tiny smallest allowable overlap T0 starting temperature k cooling constant ... used, absorbs additional arguments fixOverlap()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SANN_1D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix Overlap within a Sequence via Simulated Annealing — SANN_1D","text":"trace = FALSE, vector length x, preserving rank-ordering boundary conditions. trace = TRUE list containing new sequence along information objective functions decisions made iteration.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SANN_1D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fix Overlap within a Sequence via Simulated Annealing — SANN_1D","text":"Ideas solving difficult overlap scenarios: widen boundary conditions adjusting min.x max.x beyond original scale x reduce allowable overlap threshold thresh reduce magnitude perturbations (adj) increase maxIter increase k","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/SANN_1D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fix Overlap within a Sequence via Simulated Annealing — SANN_1D","text":"D.E. Beaudette K.C. Thompson","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SANN_1D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix Overlap within a Sequence via Simulated Annealing — SANN_1D","text":"","code":"x <- c(1, 2, 3, 3.4, 3.5, 5, 6, 10)  # easy z <- fixOverlap(x, thresh = 0.2, trace = TRUE) #> 5 iterations  # harder z <- fixOverlap(x, thresh = 0.6, trace = TRUE) #> 9 iterations  # much harder z <- fixOverlap(x, thresh = 0.9, trace = TRUE) #> 136 iterations   # interpret `trace` output  # relatively challenging x <- c(1, 2, 3.4, 3.4, 3.4, 3.4, 6, 8, 10, 12, 13, 13, 15, 15.5)  # fix overlap, return debugging information set.seed(10101) z <- fixOverlap(x, thresh = 0.8, trace = TRUE) #> duplicates in `x`, applying jitter #> 237 iterations  # setup plot device par(mar = c(4, 4, 1, 1)) layout(matrix(c(1,2,3)), widths = 1, heights = c(1,1,2))  # objective function = overlap + SSD plot(   seq_along(z$stats), z$stats,    type = 'h', las = 1,   xlab = 'Iteration', ylab = 'Overlap',   cex.axis = 0.8 )  # SSD: deviation from original configuration  plot(   seq_along(z$ssd), z$ssd,    type = 'h', las = 1,   xlab = 'Iteration', ylab = 'Deviation',   cex.axis = 0.8 ) # adjustments at each iteration matplot(   z$states, type = 'l',    lty = 1, las = 1,    xlab = 'Iteration', ylab = 'x-position' )   # trace log # B: boundary condition violation # O: rank (order) violation # +: accepted perturbation # -: rejected perturbation table(z$log) #>  #>   B   O   +   -  #>  41 114  78   3"},{"path":"https://ncss-tech.github.io/aqp/reference/SPC.with.overlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Example SoilProfileCollection with Overlapping Horizons — SPC.with.overlap","title":"Example SoilProfileCollection with Overlapping Horizons — SPC.with.overlap","text":"SoilProfileCollection overlapping horizons, derived Dynamic Soil Properties project.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SPC.with.overlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example SoilProfileCollection with Overlapping Horizons — SPC.with.overlap","text":"","code":"data(SPC.with.overlap)"},{"path":"https://ncss-tech.github.io/aqp/reference/SPC.with.overlap.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example SoilProfileCollection with Overlapping Horizons — SPC.with.overlap","text":"SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 object representation of a group of soil profiles. — SoilProfileCollection","title":"An S4 object representation of a group of soil profiles. — SoilProfileCollection","text":"general, one use depths() initiate SoilProfileCollection object data. However, sometimes instances either empty, specific, object needed. case, general constructor SoilProfileCollection available.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"An S4 object representation of a group of soil profiles. — SoilProfileCollection","text":"","code":"SoilProfileCollection(   idcol = \"id\",   hzidcol = \"hzID\",   depthcols = c(\"top\", \"bottom\"),   metadata = list(aqp_df_class = \"data.frame\", aqp_group_by = \"\", aqp_hzdesgn = \"\",     aqp_hztexcl = \"\", stringsAsFactors = FALSE),   horizons = data.frame(id = character(0), hzID = character(0), top = numeric(0), bottom     = numeric(0), stringsAsFactors = FALSE),   site = data.frame(id = character(0), stringsAsFactors = FALSE),   diagnostic = data.frame(stringsAsFactors = FALSE),   restrictions = data.frame(stringsAsFactors = FALSE) )"},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"An S4 object representation of a group of soil profiles. — SoilProfileCollection","text":"idcol character. Profile ID Column Name hzidcol character. Horizon ID Column Name depthcols character. length 2 Top Bottom Depth Column Names metadata list. metadata including data.frame class use depth units horizons data.frame. object inheriting data.frame containing Horizon data. site data.frame. object inheriting data.frame containing Site data. diagnostic data.frame. object inheriting data.frame containing diagnostic feature data. Must contain profile ID. See diagnostic_hz() restrictions data.frame. object inheriting data.frame containing restrictive feature data. Must contain profile ID. See restrictions()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"An S4 object representation of a group of soil profiles. — SoilProfileCollection","text":"aqp 2.0.2, @sp slot removed SoilProfileCollection object. run errors related old object definitions, use rebuildSPC() problematic object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 object representation of a group of soil profiles. — SoilProfileCollection","text":"idcol character. hzidcol character. depthcols character. metadata list. horizons data.frame. site data.frame. diagnostic data.frame. restrictions data.frame.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"An S4 object representation of a group of soil profiles. — SoilProfileCollection","text":"Pierre Roudier, Dylan E. Beaudette, Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 object representation of a group of soil profiles. — SoilProfileCollection","text":"","code":"## structure of default, empty SoilProfileCollection str(SoilProfileCollection()) #> Formal class 'SoilProfileCollection' [package \"aqp\"] with 8 slots #>   ..@ idcol       : chr \"id\" #>   ..@ hzidcol     : chr \"hzID\" #>   ..@ depthcols   : chr [1:2] \"top\" \"bottom\" #>   ..@ metadata    :List of 6 #>   .. ..$ aqp_df_class    : chr \"data.frame\" #>   .. ..$ aqp_group_by    : chr \"\" #>   .. ..$ aqp_hzdesgn     : chr \"\" #>   .. ..$ aqp_hztexcl     : chr \"\" #>   .. ..$ depth_units     : chr \"cm\" #>   .. ..$ stringsAsFactors: logi FALSE #>   ..@ horizons    :'data.frame':\t0 obs. of  4 variables: #>   .. ..$ id    : chr(0)  #>   .. ..$ hzID  : chr(0)  #>   .. ..$ top   : num(0)  #>   .. ..$ bottom: num(0)  #>   ..@ site        :'data.frame':\t0 obs. of  1 variable: #>   .. ..$ id: chr(0)  #>   ..@ diagnostic  :'data.frame':\t0 obs. of  0 variables #>   ..@ restrictions:'data.frame':\t0 obs. of  0 variables   ## use the depths() formula interface to specify ## profile ID, top and bottom depth and set up ## a SPC that is topologically correct and complete  d <- do.call('rbind', lapply(1:10, random_profile))  # promote to SoilProfileCollection and plot depths(d) <- id ~ top + bottom plot(d)   # split into new SoilProfileCollection objects by index d.1 <- d[1, ] d.2 <- d[2, ] d.345 <- d[3:5, ]  # combine profile collections # note that profiles are sorted according to ID d.new <- c(d.345, d.1, d.2) plot(d.new)   data(sp1)  ## init SoilProfileCollection objects from data.frame depths(sp1) <- id ~ top + bottom  ## depth units du <- depth_units(sp1) depth_units(sp1) <- 'in' depth_units(sp1) <- du  ## horizon designation column hzdesgnname(sp1) <- \"name\" hzdesgnname(sp1) #> [1] \"name\"  ## all designations in an SPC (useful for single profile SPC) hzDesgn(sp1) #>  [1] \"A1\"   \"A2\"   \"AB\"   \"BA\"   \"Bt\"   \"Rt\"   \"Oi\"   \"A\"    \"C1\"   \"C2\"   #> [11] \"Oa/A\" \"AB\"   \"BA\"   \"Bt1\"  \"Bt2\"  \"A1\"   \"A2\"   \"A3\"   \"Bt1\"  \"Bt2\"  #> [21] \"A\"    \"AB\"   \"Bt1\"  \"Bt2\"  \"Oi\"   \"A\"    \"AB1\"  \"AB2\"  \"AB3\"  \"C1\"   #> [31] \"C2\"   \"2C1\"  \"2C2\"  \"3C\"   \"A1\"   \"A2\"   \"Bw1\"  \"Bw2\"  \"Bw3\"  \"C\"    #> [41] \"2C\"   \"3Bwb\" \"3Cb\"  \"Oi\"   \"A\"    \"AB\"   \"Bw1\"  \"Bw2\"  \"2C1\"  \"2C2\"  #> [51] \"3C\"   \"Oe\"   \"A1\"   \"A2\"   \"AB\"   \"Bw1\"  \"Bw2\"  \"2C\"   \"3Ab\"  \"3Bwb\"  ## horizon texture class column hztexclname(sp1) <- \"texture\" hztexclname(sp1) #> [1] \"texture\"  ## get/set metadata on SoilProfileCollection objects # this is a 1-row data.frame m <- metadata(sp1) m$sampler <- 'Dylan' metadata(sp1) <- m  ## extract horizon data from SoilProfileCollection objects as data.frame h <- horizons(sp1)  # also merge (left-join) of new columns and # replacement of existing columns via horizons<- horizons(sp1) <- h  # get number of horizons nrow(sp1) #> [1] 60   ## getting site-level data site(sp1) #>     id #> 1 P001 #> 2 P002 #> 3 P003 #> 4 P004 #> 5 P005 #> 6 P006 #> 7 P007 #> 8 P008 #> 9 P009  ## setting site-level data # site-level data from horizon-level data (stored in @horizons) site(sp1) <- ~ group   # make some fake site data, and append from data.frame # a matching ID column must be present in both @site and new data # note that IDs should all be character class d <- data.frame(id=profile_id(sp1), p=runif(n=length(sp1)), stringsAsFactors=FALSE) site(sp1) <- d  # edit horizon depths horizonDepths(sp1) <- c('t', 'b') horizonDepths(sp1) #> [1] \"t\" \"b\"  # edit profile IDs p <- sprintf(\"%s-new\", profile_id(sp1)) profile_id(sp1) <- p profile_id(sp1) #> [1] \"P001-new\" \"P002-new\" \"P003-new\" \"P004-new\" \"P005-new\" \"P006-new\" \"P007-new\" #> [8] \"P008-new\" \"P009-new\""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-crs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set Coordinate Reference System for SoilProfileCollection — prj,SoilProfileCollection-method","title":"Get or Set Coordinate Reference System for SoilProfileCollection — prj,SoilProfileCollection-method","text":"prj(): Get Coordinate Reference System (Projection) metadata prj()<-: Set Coordinate Reference System metadata SoilProfileCollection proj4string(): (Deprecated) Get Coordinate Reference System PROJ4 String proj4string()<-: (Deprecated) Set Coordinate Reference System metadata SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-crs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set Coordinate Reference System for SoilProfileCollection — prj,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' prj(object, ...)  # S4 method for class 'SoilProfileCollection' prj(object, ...) <- value  # S4 method for class 'SoilProfileCollection' proj4string(obj)  # S4 method for class 'SoilProfileCollection' proj4string(obj) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-crs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set Coordinate Reference System for SoilProfileCollection — prj,SoilProfileCollection-method","text":"object SoilProfileCollection ... Additional arguments (used) value character. Representation Coordinate Reference System \"authority:code\", integer EPSG code, WKT2019 / PROJ4 string, sf crs sp CRS object. obj SoilProfileCollection","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-plotting-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Soil Profile Sketches — plotSPC","title":"Create Soil Profile Sketches — plotSPC","text":"Generate diagram soil profile sketches SoilProfileCollection object. Introduction SoilProfileCollection Objects Vignette contains many examples discussion large number arguments function. Soil Profile Sketches tutorial longer-form discussion examples pertaining suites related arguments. Options can used conveniently specify sets arguments used several calls plotSPC() within single R session. example, arguments can specified named list (.) set using: options(.aqp.plotSPC.args = .). Reset options via options(.aqp.plotSPC.args = NULL). Arguments explicitly passed plotSPC() override arguments set via options().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-plotting-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Soil Profile Sketches — plotSPC","text":"","code":"plotSPC(   x,   color = \"soil_color\",   width = ifelse(length(x) < 2, 0.15, 0.25),   name = hzdesgnname(x),   name.style = \"right-center\",   label = idname(x),   raggedBottom = NULL,   hz.depths = FALSE,   hz.depths.offset = ifelse(fixLabelCollisions, 0.03, 0),   hz.depths.lines = fixLabelCollisions,   depth.axis = list(style = \"traditional\", cex = cex.names * 1.15),   alt.label = NULL,   alt.label.col = \"black\",   cex.names = 0.5,   cex.id = cex.names + (0.2 * cex.names),   font.id = 2,   srt.id = 0,   print.id = TRUE,   id.style = \"auto\",   plot.order = 1:length(x),   relative.pos = 1:length(x),   add = FALSE,   scaling.factor = 1,   y.offset = rep(0, times = length(x)),   x.idx.offset = 0,   n = length(x),   max.depth = ifelse(is.infinite(max(x)), 200, max(x)),   n.depth.ticks = 10,   shrink = FALSE,   shrink.cutoff = 3,   shrink.thin = NULL,   abbr = FALSE,   abbr.cutoff = 5,   divide.hz = TRUE,   hz.distinctness.offset = NULL,   hz.topography.offset = NULL,   hz.boundary.lty = NULL,   density = NULL,   show.legend = TRUE,   col.label = color,   col.palette = c(\"#5E4FA2\", \"#3288BD\", \"#66C2A5\", \"#ABDDA4\", \"#E6F598\", \"#FEE08B\",     \"#FDAE61\", \"#F46D43\", \"#D53E4F\", \"#9E0142\"),   col.palette.bias = 1,   col.legend.cex = 1,   n.legend = 8,   lwd = 1,   lty = 1,   default.color = grey(0.95),   fixLabelCollisions = hz.depths,   fixOverlapArgs = list(method = \"E\", q = 1),   cex.depth.axis = cex.names,   axis.line.offset = -2,   plot.depth.axis = TRUE,   ... )  # S4 method for class 'SoilProfileCollection' plot(x, y, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-plotting-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Soil Profile Sketches — plotSPC","text":"x SoilProfileCollection object color quoted column name containing R-compatible color descriptions, numeric / categorical data displayed thematically; see details width scaling profile widths (typically 0.1 - 0.4) name quoted column name (horizon-level) attribute containing horizon designations labels, missing hzdesgnname(x) used. Suppress horizon name printing setting name = NA name = ''. name.style one several possible horizon designations labeling styles: c('right-center', 'left-center', 'left-top', 'center-center', 'center-top') label quoted column name (site-level) attribute used identify profile sketches raggedBottom either quoted column name (site-level) attribute (logical) used mark profiles truncated lower boundary, FALSE suppress ragged bottom depths max.depth < max(x) hz.depths logical, annotate horizon top depths right sketch (FALSE) hz.depths.offset numeric, user coordinates left-right adjustment horizon depth annotation; reasonable values usually within 0.01-0.05 (default: 0) hz.depths.lines logical, draw segments horizon depth labels actual horizon depth; useful including horizon boundary distinctness /fixLabelCollisions = TRUE depth.axis logical list. Use logical suppress (FALSE) add depth axis using defaults (TRUE). Use list specify one : style: character, one 'traditional', 'compact', 'tape' line: numeric, negative values move axis left (apply style = 'tape') cex: numeric, scaling applied entire depth axis interval: numeric, axis interval See examples. alt.label quoted column name (site-level) attribute used secondary annotation alt.label.col color used secondary annotation text cex.names baseline character scaling applied text labels cex.id character scaling applied label font.id font style applied label, default 2 (bold) srt.id rotation applied label, id.style = 'top' print.id logical, print label /beside profile? (TRUE) id.style label printing style: 'auto' (default) = simple heuristic used select : 'top' = centered profile, 'side' = 'along top-left edge profiles' plot.order integer vector describing order individual soil profiles plotted relative.pos vector relative positions along x-axis, within {1, n}, ignores plot.order see details add logical, add existing figure scaling.factor vertical scaling profile depths, useful adding profiles existing figure y.offset numeric vector vertical offset top profiles depth units x, can either single numeric value vector length = length(x). vector y-offsets automatically re-ordered according plot.order. x.idx.offset integer specifying horizontal offset 0 (left-hand edge) n integer describing amount space along x-axis allocate, defaults length(x) max.depth numeric. lower depth sketches, deeper profiles truncated depth. Use larger values arbitrarily extend vertical dimension, convenient leaving extract space annotation. n.depth.ticks suggested number ticks depth scale shrink logical, reduce character scaling 'long' horizon 80% shrink.cutoff character length defining 'long' horizon names shrink.thin integer, horizon thickness threshold shrinking horizon names 80%, activated shrink = TRUE (NULL = shrinkage) abbr logical, abbreviate label abbr.cutoff suggested minimum length abbreviated label divide.hz logical, divide horizons line segment? (TRUE), see details hz.distinctness.offset NULL, quoted column name (horizon-level attribute) containing vertical offsets used depict horizon boundary distinctness (units profiles), see details hzDistinctnessCodeToOffset(); consider setting hz.depths.lines = TRUE used conjunction hz.depths = TRUE hz.topography.offset NULL, quoted column name (horizon-level attribute) containing offsets used depict horizon boundary topography (units profiles), see details hzTopographyCodeToOffset() hz.boundary.lty quoted column name (horizon-level attribute) containing line style (integers) used encode horizon topography density fill density used horizon color shading, either single integer quoted column name (horizon-level attribute) containing integer values (default NULL, shading) show.legend logical, show legend? (default TRUE) col.label thematic legend title col.palette color palette used thematic sketches (default rev(brewer.pal(10, 'Spectral'))) col.palette.bias color ramp bias (skew), see colorRamp() col.legend.cex scaling thematic legend n.legend approximate number classes used numeric legend, max number items per row categorical legend lwd line width multiplier used sketches lty line style used sketches default.color default horizon fill color used color attribute NA fixLabelCollisions use fixOverlap() attempt fixing hz depth labeling collisions, slow plotting large collections; enabling also sets hz.depths.lines = TRUE. Additional arguments fixOverlap() can passed via fixOverlapArgs. Overlap collisions fixed within profiles containing degenerate missing horizon depths (e.g. top == bottom). fixOverlapArgs named list arguments fixOverlap(). Overlap adjustments attempted using electrostatic simulation arguments: list(method = 'E', q = 1). Alternatively, select adjustment simulated annealing via list(method = 'S'). See electroStatics_1D() SANN_1D() details. cex.depth.axis (deprecated, use depth.axis instead) character scaling applied depth scale axis.line.offset (deprecated, use depth.axis instead) horizontal offset applied depth axis (default -2, larger numbers move axis right) plot.depth.axis (deprecated, use depth.axis instead) logical, plot depth axis? ... arguments passed lower level plotting functions y (used)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-plotting-methods.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Soil Profile Sketches — plotSPC","text":"Depth limits (max.depth) number depth ticks (n.depth.ticks) suggestions pretty() function. may tinker parameters get want. 'side' id.style useful plotting large collection profiles, /, profile IDs long. column containing horizon designations specified (name argument), column (presumed contain horizon designation labels) guessed based regular expression matching pattern 'name'–usually works, best manual specify name column containing horizon designations. color argument can either name column containing R-compatible colors, possibly created via munsell2rgb(), column containing either numeric categorical (either factor character) values. second case, values converted colors displayed along simple legend plot. Note functionality makes several assumptions plot geometry useful interactive setting. Adjustments legend can specified via col.label (legend title), col.palette (palette colors, automatically expanded), col.legend.cex (legend scaling), n.legend (approximate number classes numeric variables, , maximum number legend items per row categorical variables). Currently, plotSPC generate two rows legend items. Consider reducing number classes two rows enough room. Profile sketches can added according relative positions along x-axis (vs. integer sequence) via relative.pos argument. vector positions within {1,n} used horizontal placement. Default values 1:length(x). Care must taken plot.order relative.pos used simultaneously: relative.pos specifies horizontal placement sorting. addDiagnosticBracket() addVolumeFraction() use relative.pos values subsequent annotation. Relative positions close result overplotting sketches. Adjustments relative positions overlap minimized can performed fixOverlap(pos), pos original vector relative positions. x.idx.offset argument can used shift collection pedons left right figure. can useful plotting several different SoilProfileCollection objects within figure. Space must pre-allocated first plotting call, offset specified second call. See examples . Horizon depths (e.g. cm) converted figure y-coordinates via: y = (depth * scaling.factor) + y.offset.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-plotting-methods.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Soil Profile Sketches — plotSPC","text":"new plot soil profiles generated, optionally added existing plot.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-plotting-methods.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create Soil Profile Sketches — plotSPC","text":"Beaudette, D.E., Roudier P., .T. O'Geen. 2013. Algorithms Quantitative Pedology: Toolkit Soil Scientists. Computers & Geosciences. 52:258 - 268.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-plotting-methods.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create Soil Profile Sketches — plotSPC","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilProfileCollection-plotting-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Soil Profile Sketches — plotSPC","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))   # example data data(sp1) # usually best to adjust margins par(mar = c(0,0,3,0))  # add color vector sp1$soil_color <- with(sp1, munsell2rgb(hue, value, chroma))  # promote to SoilProfileCollection depths(sp1) <- id ~ top + bottom  # init horizon designation  hzdesgnname(sp1) <- 'name'  # plot profiles plotSPC(sp1, id.style = 'side')  # title, note line argument: title('Sample Data 1', line = 1, cex.main = 0.75)   # plot profiles without horizon-line divisions plotSPC(sp1, divide.hz = FALSE)   # diagonal lines encode horizon boundary distinctness sp1$hzD <- hzDistinctnessCodeToOffset(sp1$bound_distinct) plotSPC(sp1, hz.distinctness.offset = 'hzD', name.style = 'center-center')   # plot horizon color according to some property data(sp4) depths(sp4) <- id ~ top + bottom hzdesgnname(sp4) <- 'name' plotSPC(sp4, color = 'clay')   # another example data(sp2) depths(sp2) <- id ~ top + bottom hzdesgnname(sp2) <- 'name' site(sp2) <- ~ surface  # some of these profiles are very deep, truncate plot at 400cm # label / re-order with site-level attribute: `surface` plotSPC(sp2, label = 'surface', plot.order = order(sp2$surface),  max.depth = 400)   # example using a categorical attribute plotSPC(sp2, color = \"plasticity\",  max.depth = 400)   # plot two SPC objects in the same figure par(mar = c(1,1,1,1))  # plot the first SPC object and # allocate space for the second SPC object plotSPC(sp1, n = length(sp1) + length(sp2))  # plot the second SPC, starting from the first empty space plotSPC(sp2, x.idx.offset = length(sp1), add = TRUE)    ## ## demonstrate horizon designation shrinkage ##  data(\"jacobs2000\")  # shrink \"long\" horizon names plotSPC(   jacobs2000,    name = 'name',   name.style = 'center-center',    shrink = TRUE,    cex.names = 0.8 )   # shrink horizon names in \"thin\" horizons plotSPC(   jacobs2000,    name = 'name',   name.style = 'center-center',    shrink = TRUE,    shrink.thin = 15,   cex.names = 0.8, )    ## ## demonstrate adaptive legend ##  data(sp3) depths(sp3) <- id ~ top + bottom  # make some fake categorical data horizons(sp3)$fake.data <- sample(letters[1:15], size = nrow(sp3), replace=TRUE)  # better margins par(mar=c(0,0,3,1))  # note that there are enough colors for 15 classes (vs. previous limit of 10) # note that the legend is split into 2 rows when length(classes) > n.legend argument plotSPC(sp3, color='fake.data', name='fake.data', cex.names=0.8)   # make enough room in a single legend row plotSPC(sp3, color='fake.data', name='fake.data', cex.names=0.8, n.legend=15)    ## ## demonstrate y.offset argument ## must be of length 1 or length(x) ##  # example data and local copy data(\"jacobs2000\") x <- jacobs2000 hzdesgnname(x) <- 'name'  # y-axis offsets, simulating a elevation along a hillslope sequence # same units as horizon depths in `x` # same order as profiles in `x` y.offset <- c(-5, -10, 22, 65, 35, 15, 12)  par(mar = c(0, 0, 2, 2))  # y-offset at 0 plotSPC(x, color = 'matrix_color', cex.names = 0.66)   # constant adjustment to y-offset plotSPC(x, color = 'matrix_color', cex.names = 0.66, y.offset = 50)   # attempt using invalid y.offset # warning issued and default value of '0' used # plotSPC(x, color = 'matrix_color', cex.names = 0.66, y.offset = 1:2)  # variable y-offset # fix overlapping horizon depth labels par(mar = c(0, 0, 1, 0)) plotSPC(   x,    y.offset = y.offset,    color = 'matrix_color',    cex.names = 0.75,    shrink = TRUE,   hz.depths = TRUE,    hz.depths.offset = 0.05,   fixLabelCollisions = TRUE,   name.style = 'center-center' )  #> depth axis is disabled when more than 1 unique y offsets are supplied    # random y-axis offsets yoff <- runif(n = length(x), min = 1, max = 100)  # random gradient of x-positions xoff <- runif(n = length(x), min = 1, max = length(x))  # note profiles overlap plotSPC(x,          relative.pos = xoff,          y.offset = yoff,          color = 'matrix_color',          cex.names = 0.66,          hz.depths = TRUE,          name.style = 'center-center' )  #> depth axis is disabled when more than 1 unique y offsets are supplied   # align / adjust relative x positions set.seed(111) pos <- alignTransect(xoff, x.min = 1, x.max = length(x), thresh = 0.65) #> 111 iterations  # y-offset is automatically re-ordered according to # plot.order  par(mar = c(0.5, 0.5, 0.5, 0.5)) plotSPC(x,          plot.order = pos$order,          relative.pos = pos$relative.pos,          y.offset = yoff,          color = 'matrix_color',          cex.names = 0.66,          hz.depths = TRUE,          name.style = 'center-center' ) #> depth axis is disabled when more than 1 unique y offsets are supplied  box()"},{"path":"https://ncss-tech.github.io/aqp/reference/SoilTextureLevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranking Systems for USDA Soil Texture Classes — SoilTextureLevels","title":"Ranking Systems for USDA Soil Texture Classes — SoilTextureLevels","text":"Generate vector USDA soil texture codes class names, sorted according approximate particle size","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilTextureLevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranking Systems for USDA Soil Texture Classes — SoilTextureLevels","text":"","code":"SoilTextureLevels(which = \"codes\", simplify = FALSE)"},{"path":"https://ncss-tech.github.io/aqp/reference/SoilTextureLevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ranking Systems for USDA Soil Texture Classes — SoilTextureLevels","text":"'codes' (texture codes) 'names' (texture class names) simplify Return 12-class factor levels (TRUE) 21-class factor levels (default: FALSE)? 12-class system separate sands, loamy sands sandy loams sand fraction variants (e.g. \"fine sandy loam\" 21-class system \"sandy loam\" 12-class system)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilTextureLevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ranking Systems for USDA Soil Texture Classes — SoilTextureLevels","text":"ordered factor","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilTextureLevels.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ranking Systems for USDA Soil Texture Classes — SoilTextureLevels","text":"Field Book Describing Sampling Soils, version 3.0","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/SoilTextureLevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ranking Systems for USDA Soil Texture Classes — SoilTextureLevels","text":"","code":"# class codes SoilTextureLevels() #>  [1] cos  s    fs   vfs  lcos ls   lfs  lvfs cosl sl   fsl  vfsl l    sil  si   #> [16] scl  cl   sicl sc   sic  c    #> 21 Levels: cos < s < fs < vfs < lcos < ls < lfs < lvfs < cosl < sl < ... < c  # class names SoilTextureLevels(which = 'names') #>  [1] coarse sand          sand                 fine sand            #>  [4] very fine sand       loamy coarse sand    loamy sand           #>  [7] loamy fine sandy     loamy very fine sand coarse sandy loam    #> [10] sandy loam           fine sandy loam      very fine sandy loam #> [13] loam                 silt loam            silt                 #> [16] sandy clay loam      clay loam            silty clay loam      #> [19] sandy clay           silty clay           clay                 #> 21 Levels: coarse sand < sand < fine sand < ... < clay  # simpler class names SoilTextureLevels(which = 'names', simplify = TRUE) #>  [1] sand            loamy sand      sandy loam      loam            #>  [5] silt loam       silt            sandy clay loam clay loam       #>  [9] silty clay loam sandy clay      silty clay      clay            #> 12 Levels: sand < loamy sand < sandy loam < loam < silt loam < ... < clay"},{"path":"https://ncss-tech.github.io/aqp/reference/accumulateDepths.html","id":null,"dir":"Reference","previous_headings":"","what":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","title":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","text":"Fix old-style organic horizon depths depths non-standard datum \"depth accumulation\" method.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/accumulateDepths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","text":"","code":"accumulateDepths(   x,   id = NULL,   hzdepths = NULL,   hzname = NULL,   hzdatum = 0,   seqnum = NULL,   pattern = \"O\",   fix = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/reference/accumulateDepths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","text":"x data.frame SoilProfileCollection id unique profile ID. Default: NULL, x SoilProfileCollection idname(x) hzdepths character vector containing horizon top bottom depth column names. Default: NULL, x SoilProfileCollection horizonDepths(x) hzname character vector containing horizon designation label column names. Default: NULL, x SoilProfileCollection hzdesgnname(x) hzdatum numeric vector add accumulated depths. Default: 0. Can equal length number profiles x SoilProfileCollection number (unique) IDs x data.frame. seqnum Optional: character vector containing record \"sequence number\" column name; used -lieu hzname (NA) identify \"first\" record profile pattern pattern search hzname identify matching horizons append profile fix apply adjustments missing (NA) depths expand 0-thickness horizons? Default: TRUE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/accumulateDepths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","text":"horizon-level data.frame, suitable promoting SPC depths<-, SoilProfileCollection, depending class x.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/accumulateDepths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","text":"\"depth accumulation\" method calculates thicknesses individual horizons cumulative sums putting id + top depth order. routine tries determine context based hzname pattern. main transformation top depth deeper bottom depth, depths reflected Z-axis (made negative). data id + top depth sorted , thickness calculated accumulated replace old depths. function uses several heuristics adjust data transformation thickness calculation:","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/accumulateDepths.html","id":"regex-matching-of-horizon-designation-patterns-and-similar","dir":"Reference","previous_headings":"","what":"Regex matching of horizon designation patterns and similar","title":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","text":"matches pattern top bottom depth NA -> [0,1] [top,bottom] depth REMOVE horizons match pattern top bottom depths NA","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/accumulateDepths.html","id":"over-ride-hzname-handling-with-the-sequence-column-argument-seqnum","dir":"Reference","previous_headings":"","what":"Over-ride hzname handling with the sequence column argument seqnum","title":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","text":"seqnum column specified \"first record NA hzname\" considered pattern match seqnum == 1","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/accumulateDepths.html","id":"trigger-fixing-with-the-fix-argument-","dir":"Reference","previous_headings":"","what":"Trigger \"fixing\" with the fix argument:","title":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","text":"Add 1 cm bottom-horizons NA bottom depth Add 1 cm thickness horizons top bottom depth equal Add 1 cm thickness horizons NA top depth bottom depth 0","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/accumulateDepths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accumulate horizon depths, and reflect reversed depths, relative to new datum — accumulateDepths","text":"","code":"# example using hzdatum argument data(sp4) depths(sp4) <- id ~ top + bottom hz <- accumulateDepths(sp4,                        id = \"id\",                        hzdepths = c(\"top\", \"bottom\"),                        hzname = \"name\",                        hzdatum = 5 * 1:length(sp4)) plot(hz)     # example using old-style O horizons hz <- read.table(text = \"peiidref hzdept hzdepb hzname seqnum phiid                     1        11      0      5      A      2   295                     2        11      1      0     Oe      1   294                     3        11      5     13     C1      3   296                     4        11     13     58     C2      4   297                     5        11     58    152     C3      5   298                     6        13      0      5      A      2   303                     7        13      1      0     Oe      1   302                     8        13      5     25     Bw      3   304                     9        13     25     61      C      4   305                     10       13     61     NA      R      5   306                     11      136      0     13     A1      3   695                     12      136      1      0     Oe      2   694                     13      136      2      1     Oi      1   693                     14      136     13     61     C1      4   696                     15      136     61     76     C2      5   697\")                      depths(hz) <- peiidref ~ hzdept + hzdepb #> converting profile IDs from integer to character #> Warning: Horizon bottom depths contain NA! Check depth logic with aqp::checkHzDepthLogic() #> Warning: One or more horizon bottom depths are shallower than top depth. Check depth logic with aqp::checkHzDepthLogic()  hz_fixed <- accumulateDepths(hz,                              id = \"peiidref\",                              hzdepths = c(\"hzdept\", \"hzdepb\"),                              hzname = \"hzname\") is_valid <- checkHzDepthLogic(hz_fixed)$valid  test0 <- subset(hz_fixed, !is_valid) test1 <- subset(hz_fixed, is_valid)  origO <- subset(hz, grepl(\"O\", hzname)) fixedO <- subset(hz_fixed, grepl(\"O\", hzname))  par(mfrow = c(2, 1), mar = c(0, 0, 3, 2))  plotSPC(origO, max.depth = 25) plotSPC(fixedO, max.depth = 25)"},{"path":"https://ncss-tech.github.io/aqp/reference/addBracket.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Depth Brackets — addBracket","title":"Add Depth Brackets — addBracket","text":"Add depth brackets soil profile sketches.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addBracket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Depth Brackets — addBracket","text":"","code":"addBracket(   x,   label.cex = 0.75,   tick.length = 0.05,   arrow.length = 0.05,   offset = -0.3,   missing.bottom.depth = NULL,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/addBracket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Depth Brackets — addBracket","text":"x data.frame object containing idname(x), top, bottom, optionally label columns label.cex scaling factor label font tick.length length bracket \"tick\" mark arrow.length length arrowhead offset left-hand offset profile missing.bottom.depth distance (depth units) extend brackets missing lower depth (defaults max depth collection) ... arguments passed segments arrows","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addBracket.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Depth Brackets — addBracket","text":"x may contain multiple records per profile. Additional examples can found tutorial.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addBracket.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Add Depth Brackets — addBracket","text":"low-level plotting function: must first plot SoilProfileCollection object using function.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/addBracket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add Depth Brackets — addBracket","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addBracket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Depth Brackets — addBracket","text":"","code":"# sample data data(sp1)  # add color vector sp1$soil_color <- with(sp1, munsell2rgb(hue, value, chroma))  # promote to SoilProfileCollection depths(sp1) <- id ~ top + bottom  # plot profiles par(mar = c(0, 0, 0, 1)) plotSPC(sp1, width = 0.3)   # extract min--max depths associated with all A horizons # result is a single-row data.frame / profile combinedBracket <- function(i) {   h <- horizons(i)   idn <- idname(i)   this.id <- h[[idn]][1]      idx <- grep('^A', h$name)      res <- data.frame(     id = this.id,     top = min(h$top[idx]),      bottom = max(h$bottom[idx], na.rm=TRUE)   )   names(res)[1] <- idn      return(res) }  # return matching horizon top / bottom depths for A or C horizons # result is a 0 or more row data.frame / profile individualBrackets <- function(i) {   h <- horizons(i)   idn <- idname(i)   this.id <- h[[idn]][1]      idx <- grep('^A|^C', h$name)      res <- data.frame(     id = this.id,     top = h$top[idx],      bottom = h$bottom[idx]   )   names(res)[1] <- idn      return(res) }  # combined brackets b1 <- profileApply(sp1, combinedBracket, frameify = TRUE)  # individual brackets b2 <- profileApply(sp1, individualBrackets, frameify = TRUE)  # plot in reverse order plotSPC(sp1, plot.order = rev(1:length(sp1)), width = 0.25)  # note that plotting order is derived from the call to `plotSPC(sp1)` addBracket(b1, col='red', offset = -0.35)   # plot in reverse order plotSPC(sp1, plot.order = rev(1:length(sp1)), width = 0.25)  # note that plotting order is derived from the call to `plotSPC(sp1)` addBracket(b2, col='red', offset = -0.35)"},{"path":"https://ncss-tech.github.io/aqp/reference/addDiagnosticBracket.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate Diagnostic Features — addDiagnosticBracket","title":"Annotate Diagnostic Features — addDiagnosticBracket","text":"Annotate diagnostic features within sketch soil profiles.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addDiagnosticBracket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate Diagnostic Features — addDiagnosticBracket","text":"","code":"addDiagnosticBracket(   s,   kind,   feature = \"featkind\",   top = \"featdept\",   bottom = \"featdepb\",   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/addDiagnosticBracket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate Diagnostic Features — addDiagnosticBracket","text":"s SoilProfileCollection object kind filter applied feature column diagnostic horizons registered within s feature column name containing feature kind top column name containing feature top depth bottom column name containing feature top depth ... additional arguments passed addBracket","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addDiagnosticBracket.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate Diagnostic Features — addDiagnosticBracket","text":"Additional examples can found tutorial.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addDiagnosticBracket.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Annotate Diagnostic Features — addDiagnosticBracket","text":"low-level plotting function: must first plot SoilProfileCollection object using function.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/addDiagnosticBracket.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Annotate Diagnostic Features — addDiagnosticBracket","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addVolumeFraction.html","id":null,"dir":"Reference","previous_headings":"","what":"Symbolize Volume Fraction within a Soil Profile Collection Plot — addVolumeFraction","title":"Symbolize Volume Fraction within a Soil Profile Collection Plot — addVolumeFraction","text":"Symbolize volume fraction existing soil profile collection plot.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addVolumeFraction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symbolize Volume Fraction within a Soil Profile Collection Plot — addVolumeFraction","text":"","code":"addVolumeFraction(   x,   colname,   res = 10,   cex.min = 0.1,   cex.max = 0.5,   pch = 1,   col = \"black\" )"},{"path":"https://ncss-tech.github.io/aqp/reference/addVolumeFraction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symbolize Volume Fraction within a Soil Profile Collection Plot — addVolumeFraction","text":"x SoilProfileCollection object colname character vector length 1, naming column containing volume fraction data (horizon-level attribute). Values within 0-100 percent. res integer, resolution grid used symbolize volume fraction cex.min minimum symbol size cex.max maximum symbol size pch integer, plotting character code col symbol color, either single color many colors horizons x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addVolumeFraction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Symbolize Volume Fraction within a Soil Profile Collection Plot — addVolumeFraction","text":"function can called plotting SoilProfileCollection object. Details associated call plotSPC() automatically accounted within function: e.g. plot.order, width, etc..","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/addVolumeFraction.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Symbolize Volume Fraction within a Soil Profile Collection Plot — addVolumeFraction","text":"may necessary adjust res, cex.min, cex.max optimal legibility.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/addVolumeFraction.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Symbolize Volume Fraction within a Soil Profile Collection Plot — addVolumeFraction","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColor.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Soil Colors — aggregateColor","title":"Summarize Soil Colors — aggregateColor","text":"Summarize soil color data, weighted occurrence horizon thickness.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Soil Colors — aggregateColor","text":"","code":"aggregateColor(   x,   groups = \"genhz\",   col = \"soil_color\",   k = NULL,   profile_wt = NULL,   mixingMethod = c(\"estimate\", \"exact\") )"},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Soil Colors — aggregateColor","text":"x SoilProfileCollection object groups name horizon site attribute used group horizons, see examples col name horizon-level attribute soil color specified hexadecimal (.e. \"#rrggbb\") k single integer specifying number colors discretized via PAM (cluster::pam()), see details profile_wt name site-level attribute used modify weighting, e.g. area mixingMethod method used estimate \"aggregate\" soil colors, see mixMunsell()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Soil Colors — aggregateColor","text":"list following components: scaled.data: list colors associated weights, one item generalized horizon label least one color specified source data aggregate.data: data.frame weighted-mean colors, one row generalized horizon label least one color specified source data","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Soil Colors — aggregateColor","text":"Weights computed : w_i = sqrt(sum(thickness_i)) * n_i w_i weight associated color , thickness_i total thickness horizons associated color , n_i number horizons associated color . Weights computed within groups specified groups. See related tutorial additional examples.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summarize Soil Colors — aggregateColor","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Soil Colors — aggregateColor","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # load some example data data(sp1, package = 'aqp')  # upgrade to SoilProfileCollection and convert Munsell colors sp1$soil_color <- with(sp1, munsell2rgb(hue, value, chroma)) depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  # generalize horizon names n <- c('O', 'A', 'B', 'C') p <- c('O', 'A', 'B', 'C') sp1$genhz <- generalize.hz(sp1$name, n, p)  # aggregate colors over horizon-level attribute: 'genhz' a <- aggregateColor(sp1, groups = 'genhz', col = 'soil_color')  # check results str(a) #> List of 2 #>  $ scaled.data   :List of 4 #>   ..$ O:'data.frame':\t3 obs. of  5 variables: #>   .. ..$ soil_color: chr [1:3] \"#3C2C22FF\" \"#3A2D20FF\" \"#564436FF\" #>   .. ..$ weight    : num [1:3] 0.678 0.177 0.145 #>   .. ..$ n.hz      : int [1:3] 2 1 1 #>   .. ..$ munsell   : chr [1:3] \"7.5YR 2/2\" \"10YR 2/2\" \"7.5YR 3/2\" #>   .. ..$ .id       : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 1 1 1 #>   ..$ A:'data.frame':\t9 obs. of  5 variables: #>   .. ..$ soil_color: chr [1:9] \"#3A2D20FF\" \"#564436FF\" \"#745C41FF\" \"#3C2C22FF\" ... #>   .. ..$ weight    : num [1:9] 0.3515 0.2342 0.1067 0.0754 0.0621 ... #>   .. ..$ n.hz      : int [1:9] 4 3 1 2 1 1 1 1 1 #>   .. ..$ munsell   : chr [1:9] \"10YR 2/2\" \"7.5YR 3/2\" \"10YR 4/3\" \"7.5YR 2/2\" ... #>   .. ..$ .id       : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 2 2 2 2 2 2 2 2 2 #>   ..$ B:'data.frame':\t14 obs. of  5 variables: #>   .. ..$ soil_color: chr [1:14] \"#564436FF\" \"#745C41FF\" \"#544535FF\" \"#58432CFF\" ... #>   .. ..$ weight    : num [1:14] 0.2842 0.2033 0.1265 0.0821 0.0552 ... #>   .. ..$ n.hz      : int [1:14] 5 3 3 2 2 2 2 1 1 1 ... #>   .. ..$ munsell   : chr [1:14] \"7.5YR 3/2\" \"10YR 4/3\" \"10YR 3/2\" \"10YR 3/3\" ... #>   .. ..$ .id       : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 3 3 3 3 3 3 3 3 3 3 ... #>   ..$ C:'data.frame':\t9 obs. of  5 variables: #>   .. ..$ soil_color: chr [1:9] \"#564436FF\" \"#725C50FF\" \"#8E775AFF\" \"#795B36FF\" ... #>   .. ..$ weight    : num [1:9] 0.279 0.152 0.131 0.131 0.089 ... #>   .. ..$ n.hz      : int [1:9] 3 2 2 2 1 1 1 1 1 #>   .. ..$ munsell   : chr [1:9] \"7.5YR 3/2\" \"5YR 4/2\" \"10YR 5/3\" \"10YR 4/4\" ... #>   .. ..$ .id       : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 4 4 4 4 4 4 4 4 4 #>  $ aggregate.data:'data.frame':\t4 obs. of  9 variables: #>   ..$ genhz   : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 1 2 3 4 #>   ..$ hue     : chr [1:4] \"7.5YR\" \"7.5YR\" \"7.5YR\" \"7.5YR\" #>   ..$ value   : num [1:4] 2 3 3 4 #>   ..$ chroma  : num [1:4] 2 2 3 3 #>   ..$ munsell : chr [1:4] \"7.5YR 2/2\" \"7.5YR 3/2\" \"7.5YR 3/3\" \"7.5YR 4/3\" #>   ..$ distance: num [1:4] 1.16 2.19 2.75 2.85 #>   ..$ col     : chr [1:4] \"#3C2C22FF\" \"#564436FF\" \"#5B422EFF\" \"#775B44FF\" #>   ..$ n       : int [1:4] 3 9 14 9 #>   ..$ H       : num [1:4] 1.23 2.66 3.14 2.91  # simple visualization aggregateColorPlot(a)"},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColorPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot aggregate soil color data — aggregateColorPlot","title":"Plot aggregate soil color data — aggregateColorPlot","text":"Generate plot summaries generated aggregateColor().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColorPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot aggregate soil color data — aggregateColorPlot","text":"","code":"aggregateColorPlot(   x,   print.label = TRUE,   label.font = 1,   label.cex = 0.65,   label.orientation = c(\"v\", \"h\"),   buffer.pct = 0.02,   print.n.hz = FALSE,   rect.border = \"black\",   horizontal.borders = FALSE,   horizontal.border.lwd = 2,   x.axis = TRUE,   y.axis = TRUE,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColorPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot aggregate soil color data — aggregateColorPlot","text":"x list, results aggregateColor() print.label logical, print Munsell color labels inside rectangles, fit label.font font specification color labels label.cex font size color labels label.orientation label orientation, v vertical h horizontal buffer.pct extra space labels color rectangles print.n.hz optionally print number horizons Munsell color labels rect.border color rectangle border horizontal.borders optionally add horizontal borders bands color horizontal.border.lwd line width horizontal borders x.axis logical, add scale label x-axis? y.axis logical, add group labels y-axis? ... additional arguments passed plot","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColorPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot aggregate soil color data — aggregateColorPlot","text":"data returned, function called graphical output","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColorPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot aggregate soil color data — aggregateColorPlot","text":"See related tutorial additional examples.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColorPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot aggregate soil color data — aggregateColorPlot","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateColorPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot aggregate soil color data — aggregateColorPlot","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # load some example data data(sp1, package = 'aqp')  # upgrade to SoilProfileCollection and convert Munsell colors sp1$soil_color <- with(sp1, munsell2rgb(hue, value, chroma)) depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  # generalize horizon names n <- c('O', 'A', 'B', 'C') p <- c('O', 'A', 'B', 'C') sp1$genhz <- generalize.hz(sp1$name, n, p)  # aggregate colors over horizon-level attribute: 'genhz' a <- aggregateColor(sp1, groups = 'genhz', col = 'soil_color')  # check results str(a) #> List of 2 #>  $ scaled.data   :List of 4 #>   ..$ O:'data.frame':\t3 obs. of  5 variables: #>   .. ..$ soil_color: chr [1:3] \"#3C2C22FF\" \"#3A2D20FF\" \"#564436FF\" #>   .. ..$ weight    : num [1:3] 0.678 0.177 0.145 #>   .. ..$ n.hz      : int [1:3] 2 1 1 #>   .. ..$ munsell   : chr [1:3] \"7.5YR 2/2\" \"10YR 2/2\" \"7.5YR 3/2\" #>   .. ..$ .id       : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 1 1 1 #>   ..$ A:'data.frame':\t9 obs. of  5 variables: #>   .. ..$ soil_color: chr [1:9] \"#3A2D20FF\" \"#564436FF\" \"#745C41FF\" \"#3C2C22FF\" ... #>   .. ..$ weight    : num [1:9] 0.3515 0.2342 0.1067 0.0754 0.0621 ... #>   .. ..$ n.hz      : int [1:9] 4 3 1 2 1 1 1 1 1 #>   .. ..$ munsell   : chr [1:9] \"10YR 2/2\" \"7.5YR 3/2\" \"10YR 4/3\" \"7.5YR 2/2\" ... #>   .. ..$ .id       : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 2 2 2 2 2 2 2 2 2 #>   ..$ B:'data.frame':\t14 obs. of  5 variables: #>   .. ..$ soil_color: chr [1:14] \"#564436FF\" \"#745C41FF\" \"#544535FF\" \"#58432CFF\" ... #>   .. ..$ weight    : num [1:14] 0.2842 0.2033 0.1265 0.0821 0.0552 ... #>   .. ..$ n.hz      : int [1:14] 5 3 3 2 2 2 2 1 1 1 ... #>   .. ..$ munsell   : chr [1:14] \"7.5YR 3/2\" \"10YR 4/3\" \"10YR 3/2\" \"10YR 3/3\" ... #>   .. ..$ .id       : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 3 3 3 3 3 3 3 3 3 3 ... #>   ..$ C:'data.frame':\t9 obs. of  5 variables: #>   .. ..$ soil_color: chr [1:9] \"#564436FF\" \"#725C50FF\" \"#8E775AFF\" \"#795B36FF\" ... #>   .. ..$ weight    : num [1:9] 0.279 0.152 0.131 0.131 0.089 ... #>   .. ..$ n.hz      : int [1:9] 3 2 2 2 1 1 1 1 1 #>   .. ..$ munsell   : chr [1:9] \"7.5YR 3/2\" \"5YR 4/2\" \"10YR 5/3\" \"10YR 4/4\" ... #>   .. ..$ .id       : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 4 4 4 4 4 4 4 4 4 #>  $ aggregate.data:'data.frame':\t4 obs. of  9 variables: #>   ..$ genhz   : Factor w/ 4 levels \"O\",\"A\",\"B\",\"C\": 1 2 3 4 #>   ..$ hue     : chr [1:4] \"7.5YR\" \"7.5YR\" \"7.5YR\" \"7.5YR\" #>   ..$ value   : num [1:4] 2 3 3 4 #>   ..$ chroma  : num [1:4] 2 2 3 3 #>   ..$ munsell : chr [1:4] \"7.5YR 2/2\" \"7.5YR 3/2\" \"7.5YR 3/3\" \"7.5YR 4/3\" #>   ..$ distance: num [1:4] 1.16 2.19 2.75 2.85 #>   ..$ col     : chr [1:4] \"#3C2C22FF\" \"#564436FF\" \"#5B422EFF\" \"#775B44FF\" #>   ..$ n       : int [1:4] 3 9 14 9 #>   ..$ H       : num [1:4] 1.23 2.66 3.14 2.91  # simple visualization aggregateColorPlot(a)"},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateSoilDepth.html","id":null,"dir":"Reference","previous_headings":"","what":"Probabilistic Estimation of Soil Depth within Groups — aggregateSoilDepth","title":"Probabilistic Estimation of Soil Depth within Groups — aggregateSoilDepth","text":"Estimate -likely depth contact within collection soil profiles. Consider getSoilDepthClass followed group-wise percentile estimation faster alternative.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateSoilDepth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probabilistic Estimation of Soil Depth within Groups — aggregateSoilDepth","text":"","code":"aggregateSoilDepth(   x,   groups,   crit.prob = 0.9,   name = hzdesgnname(x),   p = \"Cr|R|Cd\",   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateSoilDepth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probabilistic Estimation of Soil Depth within Groups — aggregateSoilDepth","text":"x SoilProfileCollection object groups name site-level attribute defines groups profiles within collection crit.prob probability cutoff used determine likely depth contact , e.g. 0.9 translates 90% profiles shallower depth name horizon-level attribute horizon designation stored, defaults hzdesgnname(x) p REGEX pattern matches non-soil genetic horizons ... additional arguments slab","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateSoilDepth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Probabilistic Estimation of Soil Depth within Groups — aggregateSoilDepth","text":"data.frame returned, many rows unique group labels, specified groups.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateSoilDepth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probabilistic Estimation of Soil Depth within Groups — aggregateSoilDepth","text":"function computes probability-based estimate soil depth group. grouping variable exists, dummy value can used compute single estimate. crit.prob argument sets critical probability (e.g. 0.9) soil depth within group profiles determined. example, crit.prob 0.95 might result estimated soil depth (e.g. 120cm) 95% profiles (group) depths less equal 120cm.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateSoilDepth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Probabilistic Estimation of Soil Depth within Groups — aggregateSoilDepth","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aggregateSoilDepth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probabilistic Estimation of Soil Depth within Groups — aggregateSoilDepth","text":"","code":"data(sp1) depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  # set horizon designation in SPC hzdesgnname(sp1) <- 'name'  aggregateSoilDepth(sp1, 'group', crit.prob = 0.9) #> horizons with zero thickness have been omitted from results #>   group soil.top soil.bottom #> 1     1        0         232 #> 2     2        0          67"},{"path":"https://ncss-tech.github.io/aqp/reference/alignTransect.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Relative Positions from Transect Data — alignTransect","title":"Calculate Relative Positions from Transect Data — alignTransect","text":"function used support relative positioning soil profiles plotSPC, based transect gradient values typically associated site level attribute (e.g. elevation). Gradient values specified x translated range used plotSPC (usually 1, length(SPC)) specified x.min x.max.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/alignTransect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Relative Positions from Transect Data — alignTransect","text":"","code":"alignTransect(x, x.min, x.max, fix = TRUE, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/alignTransect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Relative Positions from Transect Data — alignTransect","text":"x numeric vector, describing values along transect: distance, elevation, climatic variables, etc.. Typically sourced site level attributes SoilProfileCollection object. Order important. x.min numeric, lower boundary relative position scale x.max numeric, upper boundary relative position scale fix logical, attempt fixing overlapping positions fixOverlap ... additional arguments fixOverlap","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/alignTransect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Relative Positions from Transect Data — alignTransect","text":"list containing: grad: values x ascending order order: ordering vector x relative.pos: elements x translated new relative scale defined x.min x.max","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/alignTransect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Relative Positions from Transect Data — alignTransect","text":"See Pair-Wise Distances Generalized Horizon Labels tutorial additional examples.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/alignTransect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Relative Positions from Transect Data — alignTransect","text":"","code":"data(\"sierraTransect\")  # split transects g <- subset(sierraTransect, transect == 'Granite') a <- subset(sierraTransect, transect == 'Andesite')  g.p <- alignTransect(g$elev, x.min = 1, x.max = length(g), fix = FALSE) a.p <- alignTransect(a$elev, x.min = 1, x.max = length(a), fix = FALSE)  op <- par(mar=c(2,0,0,2), mfrow=c(2,1))  plotSPC(g, width=0.25, name.style='center-center',          cex.names=0.75,          relative.pos = g.p$relative.pos, plot.order = g.p$order)  axis(1, at = g.p$relative.pos, labels = g.p$grad, line = -1.5)  plotSPC(a, width=0.25, name.style='center-center',          cex.names=0.75,          relative.pos = a.p$relative.pos, plot.order = a.p$order)  axis(1, at = a.p$relative.pos, labels = a.p$grad, line = -1.5)    par(op)"},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocate soil properties within various classification systems. — allocate","title":"Allocate soil properties within various classification systems. — allocate","text":"Generic function allocate soil properties different classification schemes.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocate soil properties within various classification systems. — allocate","text":"","code":"allocate(   ...,   to = c(\"FAO Salt Severity\", \"FAO Black Soil\", \"ST Diagnostic Features\"),   droplevels = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocate soil properties within various classification systems. — allocate","text":"... arguments specific allocation functions, see details examples character specifying classification scheme: FAO Salt Severity, FAO Black Soil (see details required ...) droplevels logical indicating whether drop unused levels factors. useful results large number unused classes, can waste space tables figures.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocate soil properties within various classification systems. — allocate","text":"vector data.frame object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Allocate soil properties within various classification systems. — allocate","text":"function intended allocate set soil properties established soil classification scheme, Salt Severity Black Soil. Allocation semantically different classification. classification 'act' developing grouping scheme, allocation assignment identification measurements established class (Powell, 2008).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":"usage-details","dir":"Reference","previous_headings":"","what":"Usage Details","title":"Allocate soil properties within various classification systems. — allocate","text":"classification scheme (argument) uses different set arguments. FAO Salt Severity EC: electrical conductivity column name, dS/m pH: pH column name, saturated paste extract ESP: exchangeable sodium percentage column name, percent FAO Black Soils object: data.frame SoilProfileCollection pedonid: pedon ID column name, required object data.frame hztop: horizon top depth column name, required object data.frame hzbot: horizon bottom depth column name, required object data.frame OC: organic carbon column name, percent m_chroma: moist Munsell chroma column name m_value: moist Munsell value column name d_value: dry Munsell value column name CEC: cation exchange capacity column name (NH4OAc pH 7), units cmol(+)/kg soil BS: base saturation column name (NH4OAc pH 7), percent tropical: logical, data associated \"tropical soils\" ST Diagnostic Features object: data.frame SoilProfileCollection pedonid: pedon ID column name, required object data.frame hzname: horizon name column, required object data.frame hztop: horizon top depth column name, required object data.frame hzbot: horizon bottom depth column name, required object data.frame texcl: soil texture class (USDA) column name rupresblkcem: rupture resistance column name m_value: moist Munsell value column name m_chroma: moist Munsell chroma column name d_value: dry Munsell value column name BS: base saturation column name (method ??), percent OC: organic carbon column name, percent n_value: ?? featkind: ??","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Allocate soil properties within various classification systems. — allocate","text":"results returned allocate(= \"ST Diagnostic Features\") currently return limited set diagnostic features easily defined. Also, logic implemented features include criteria defined Keys Soil Taxonomy.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Allocate soil properties within various classification systems. — allocate","text":"Abrol, ., Yadav, J. & Massoud, F. 1988. Salt-affected soils management. . Bulletin 39. Rome, FAO Soils. FAO. 2006. Guidelines soil description. Rome, Food Agriculture Organization United Nations. FAO. 2020. DEFINITION | black soil? (online). (Cited 28 December 2020). http://www.fao.org/global-soil-partnership/intergovernmental-technical-panel-soils/gsoc17-implementation/internationalnetworkblacksoils/--black-soils/definition----black-soil/es/ Powell, B., 2008. Classifying soil land, : McKenzie, N.J., Grundy, M.J., Webster, R., Ringrose-Voase, .J. (Eds.), Guidelines Survey Soil Land Resources, Australian Soil Land Survey Handbook Series. CSIRO, Melbourne, p. 572. Richards, L.. 1954. Diagnosis Improvement Saline Alkali Soils. U. S. Government Printing Office. 166 pp. Soil Survey Staff, 2014. Keys Soil Taxonomy, 12th ed. USDA-Natural Resources Conservation Service, Washington, D.C.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Allocate soil properties within various classification systems. — allocate","text":"Stephen Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/allocate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allocate soil properties within various classification systems. — allocate","text":"","code":"# Salt Severity test <- expand.grid(   EC  = sort(sapply(c(0, 0.75, 2, 4, 8, 15, 30), function(x) x + c(0, -0.05, 0.05))),   pH  = c(8.1, 8.2, 8.3, 8.4, 8.5, 8.6),   ESP = sort(sapply(c(0, 15, 30, 50, 70, 100), function(x) x + c(0, 0.1, -0.1))) ) test$ss      <- with(test, allocate(EC = EC, pH = pH, ESP = ESP, to = \"FAO Salt Severity\")) table(test$ss) #>  #>     extremely saline very strongly saline      strongly saline  #>                  150                   90                   90  #>    moderately saline      slightly saline                 none  #>                   90                   90                  120  #>       slightly sodic     moderately sodic       strongly sodic  #>                  132                  198                  198  #>  very strongly sodic         saline-sodic  #>                  330                  780   # Black Soil Category 1 (BS1) test <- expand.grid(   dept = seq(0, 50, 10),   OC   = sort(sapply(c(0, 0.6, 1.2, 20, 40), function(x) x + c(0, -0.05, 0.05))),   chroma_moist  = 2:4,   value_moist   = 2:4,   value_dry     = 4:6,   thickness     = 24:26,   CEC           = 24:26,   BS            = 49:51,   tropical      = c(TRUE, FALSE) ) test$pedon_id <- rep(1:21870, each = 6) test$depb     <- test$dept + 10  bs1 <- allocate(test, pedonid = \"pedon_id\", hztop = \"dept\", hzbot = \"depb\",                  OC = \"OC\", m_chroma = \"chroma_moist\", m_value = \"value_moist\",                  d_value = \"value_dry\", CEC = \"CEC\", BS = \"BS\",                  to = \"FAO Black Soil\" )  table(BS1 = bs1$BS1, BS2 = bs1$BS2) #>        BS2 #> BS1     FALSE  TRUE #>   FALSE 20142   960 #>   TRUE      0   768   # SoilProfileCollection interface  data(sp3) depths(sp3) <- id ~ top + bottom hzdesgnname(sp3) <- 'name'  # fake base saturation horizons(sp3)$bs <- 75  plotSPC(sp3)   allocate(   sp3,    to = 'FAO Black Soil',    OC = 'tc',    m_chroma = 'chroma',    m_value = 'value',    d_value = 'value',   CEC = 'cec',   BS = 'bs' ) #>    peiid   BS1   BS2 #> 1      1 FALSE FALSE #> 2     10 FALSE FALSE #> 3      2 FALSE FALSE #> 4      3 FALSE FALSE #> 5      4 FALSE FALSE #> 6      5 FALSE FALSE #> 7      6 FALSE FALSE #> 8      7 FALSE FALSE #> 9      8 FALSE FALSE #> 10     9 FALSE FALSE  # make a copy and edit horizon values x <- sp3 x$value <- 2 x$chroma <- 2 x$cec <- 26 x$tc <- 2  x$soil_color <- munsell2rgb(x$hue, x$value, x$chroma)  plotSPC(x)   allocate(   x,    to = 'FAO Black Soil',    OC = 'tc',    m_chroma = 'chroma',    m_value = 'value',    d_value = 'value',   CEC = 'cec',   BS = 'bs' ) #>    peiid  BS1  BS2 #> 1      1 TRUE TRUE #> 2     10 TRUE TRUE #> 3      2 TRUE TRUE #> 4      3 TRUE TRUE #> 5      4 TRUE TRUE #> 6      5 TRUE TRUE #> 7      6 TRUE TRUE #> 8      7 TRUE TRUE #> 9      8 TRUE TRUE #> 10     9 TRUE TRUE   # Soil Taxonomy Diagnostic Features data(sp1) sp1$texcl = gsub(\"gr|grv|cbv\", \"\", sp1$texture) df <- allocate(object = sp1, pedonid = \"id\", hzname = \"name\",                 hzdept = \"top\", hzdepb = \"bottom\", texcl = \"texcl\",                 to = \"ST Diagnostic Features\" ) #> Warning: the minimum dataset includes: pedonid, hzdept, hzdepb, and hzname; if texcl or rupreblkcem are missing the resulting diagnostic features are inferred from the available information #> guessing lithic contact #> Warning: the minimum dataset includes: pedonid, hzdept, hzdepb, and hzname; if texcl or rupreblkcem are missing the resulting diagnostic features are inferred from the available information #> guessing paralithic contact #> Warning: the minimum dataset includes: pedonid, hzdept, hzdepb, and hzname; if texcl or rupreblkcem are missing the resulting diagnostic features are inferred from the available information #> guessing densic contact #> Warning: the minimum dataset includes: pedonid, hzdept, hzdepb, and hzname; if texcl or rupreblkcem are missing the resulting diagnostic features are inferred from the available information #> guessing petrocalcic horizon #> Warning: the minimum dataset includes: pedonid, hzdept, hzdepb, and hzname; if texcl or rupreblkcem are missing the resulting diagnostic features are inferred from the available information #> guessing calcic horizon #> Warning: the minimum dataset includes: pedonid, hzdept, hzdepb, and hzname; if texcl or rupreblkcem are missing the resulting diagnostic features are inferred from the available information #> guessing secondary carbonates #> Warning: the minimum dataset includes: pedonid, hzdept, hzdepb, and hzname; if texcl or rupreblkcem are missing the resulting diagnostic features are inferred from the available information #> guessing mollic epipedon aggregate(featdept ~ id, data = df, summary) #>     id featdept.Min. featdept.1st Qu. featdept.Median featdept.Mean #> 1 P001            89               89              89            89 #>   featdept.3rd Qu. featdept.Max. #> 1               89            89"},{"path":"https://ncss-tech.github.io/aqp/reference/aqp-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Algorithms for Quantitative Pedology — aqp-package","title":"Algorithms for Quantitative Pedology — aqp-package","text":"aqp (Algorithms Quantitative Pedology) package R developed address difficulties associated processing soils information, specifically related visualization, aggregation, classification soil profile data. package based mix S3/S4 functions classes, functions use basic dataframes input, rows represent soil horizons columns define properties horizons. Common functions requirements horizon boundaries defined depth 0, profiles uniquely defined id column. aqp package defines S4 class, \"SoilProfileCollection\", storage profile-level metadata, well summary, print, plotting methods customized common tasks related soils data.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aqp-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Algorithms for Quantitative Pedology — aqp-package","text":"Demos: demo(aqp) Project homepage","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/aqp-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Algorithms for Quantitative Pedology — aqp-package","text":"Dylan E. Beaudette debeaudette@ucdavis.edu, Pierre Roudier, Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aqp_df_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Get aqp_df_class entry from metadata or return a safe value. — aqp_df_class,SoilProfileCollection-method","title":"Get aqp_df_class entry from metadata or return a safe value. — aqp_df_class,SoilProfileCollection-method","text":"accessor replacement method aqp_df_class entry metadata slot. entry used internally methods interact data.frame objects slots ensure class used promote SoilProfileCollection initially used throughout process.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/aqp_df_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get aqp_df_class entry from metadata or return a safe value. — aqp_df_class,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' aqp_df_class(object)  # S4 method for class 'SoilProfileCollection' aqp_df_class(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/aqp_df_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get aqp_df_class entry from metadata or return a safe value. — aqp_df_class,SoilProfileCollection-method","text":"object SoilProfileCollection value \"data.frame\", \"data.table\" \"tbl_df\"","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/argillic.clay.increase.depth.html","id":null,"dir":"Reference","previous_headings":"","what":"Return upper boundary of argillic horizon — argillic.clay.increase.depth","title":"Return upper boundary of argillic horizon — argillic.clay.increase.depth","text":"Returns top depth argillic horizon numeric vector.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/argillic.clay.increase.depth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return upper boundary of argillic horizon — argillic.clay.increase.depth","text":"","code":"argillic.clay.increase.depth(p, clay.attr = \"clay\")"},{"path":"https://ncss-tech.github.io/aqp/reference/argillic.clay.increase.depth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return upper boundary of argillic horizon — argillic.clay.increase.depth","text":"p single-profile SoilProfileCollection object. clay.attr OPTIONAL: horizon attribute name referring clay content. default: clay","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/argillic.clay.increase.depth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return upper boundary of argillic horizon — argillic.clay.increase.depth","text":"numeric vector containing top depth argillic horizon, present, NA.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/argillic.clay.increase.depth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return upper boundary of argillic horizon — argillic.clay.increase.depth","text":"Uses crit.clay.argillic determine threshold clay increase, get.increase.matrix determine increase met within vertical distance 30 cm.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/argillic.clay.increase.depth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return upper boundary of argillic horizon — argillic.clay.increase.depth","text":"Andrew Gene Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/argillic.clay.increase.depth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return upper boundary of argillic horizon — argillic.clay.increase.depth","text":"","code":"data(sp1, package = 'aqp') depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  p <- sp1[1] attr <- 'prop' # clay contents  foo <- argillic.clay.increase.depth(p, clay.attr = attr) foo #> [1] 49"},{"path":"https://ncss-tech.github.io/aqp/reference/barron.torrent.redness.LAB.html","id":null,"dir":"Reference","previous_headings":"","what":"Barron & Torrent (1986) Redness Index in LAB color space — barron.torrent.redness.LAB","title":"Barron & Torrent (1986) Redness Index in LAB color space — barron.torrent.redness.LAB","text":"Calculate Redness Index Barron & Torrent (1986) \"Use Kubelka—Munk Theory Study Influence Iron Oxides Soil Colour\" using Munsell colors converted LAB. DOI: 10.1111/j.1365-2389.1986.tb00382.x. Accepts vectorized inputs hue, value chroma, produces vector output.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/barron.torrent.redness.LAB.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barron & Torrent (1986) Redness Index in LAB color space — barron.torrent.redness.LAB","text":"","code":"barron.torrent.redness.LAB(hue, value, chroma)"},{"path":"https://ncss-tech.github.io/aqp/reference/barron.torrent.redness.LAB.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barron & Torrent (1986) Redness Index in LAB color space — barron.torrent.redness.LAB","text":"hue character vector containing Munsell hues (e.g. \"7.5YR\") value numeric vector containing Munsell values chroma numeric vector containing Munsell chromas","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/barron.torrent.redness.LAB.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barron & Torrent (1986) Redness Index in LAB color space — barron.torrent.redness.LAB","text":"numeric vector horizon redness index (higher values = redder).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/barron.torrent.redness.LAB.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Barron & Torrent (1986) Redness Index in LAB color space — barron.torrent.redness.LAB","text":"Barron, V. Torrent, J. (1986), Use Kubelka-Munk theory study influence iron oxides soil colour. Journal Soil Science, 37: 499-510. doi:10.1111/j.1365-2389.1986.tb00382.x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/barron.torrent.redness.LAB.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Barron & Torrent (1986) Redness Index in LAB color space — barron.torrent.redness.LAB","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/bootstrapSoilTexture.html","id":null,"dir":"Reference","previous_headings":"","what":"Bootstrap Soil Texture Data — bootstrapSoilTexture","title":"Bootstrap Soil Texture Data — bootstrapSoilTexture","text":"Simulate realistic sand/silt/clay values (composition) using multivariate Normal distribution Dirichlet distribution. Simulations multivariate Normal distribution based compositional mean variance-covariance matrix. Simulations Dirichlet distribution based maximum likelihood estimation alpha parameters.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/bootstrapSoilTexture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bootstrap Soil Texture Data — bootstrapSoilTexture","text":"","code":"bootstrapSoilTexture(ssc, method = c(\"dirichlet\", \"normal\"), n = 100)"},{"path":"https://ncss-tech.github.io/aqp/reference/bootstrapSoilTexture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bootstrap Soil Texture Data — bootstrapSoilTexture","text":"ssc data.frame object 3 columns: 'sand', 'silt', 'clay' least three rows data within range 0-100 (percent). NA automatically removed, care taken ensure sand/silt/clay values add 100 percent. Simulations based examples. method type simulation: 'dirichlet' 'normal'. See details. n number simulated compositions. See details.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/bootstrapSoilTexture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bootstrap Soil Texture Data — bootstrapSoilTexture","text":"list containing: samples - data.frame simulated sand, silt, clay values mean - compositional mean var - compositional variance-covariance matrix D.alpha - (fitted) alpha parameters Dirichlet distribution, NULL method = 'normal'","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/bootstrapSoilTexture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bootstrap Soil Texture Data — bootstrapSoilTexture","text":"Simulations multivariate normal distribution closely track marginal distributions sand, silt, clay–possibly better fit \"squished\" compositions (TODO elaborate). However, simulations can result extreme (unlikely) estimates. Simulations Dirichlet distribution usually better fit (fewer extreme estimates) require fairly large number records ssc (n >= 30?) reliable fit. Additional examples added tutorial.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/bootstrapSoilTexture.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bootstrap Soil Texture Data — bootstrapSoilTexture","text":"Aitchison, J. (1986) Statistical Analysis Compositional Data Monographs Statistics Applied Probability. Chapman & Hall Ltd., London (UK). 416p. Aitchison, J, C. Barcel'o-Vidal, J.J. Egozcue, V. Pawlowsky-Glahn (2002) concise guide algebraic geometric structure simplex, sample space compositional data analysis, Terra Nostra, Schriften der Alfred Wegener-Stiftung, 03/2003 Malone Brendan, Searle Ross (2021) Updating Australian digital soil texture mapping (Part 1*): re-calibration field soil texture class centroids description field soil texture conversion algorithm. Soil Research. https://www.publish.csiro.au/SR/SR20283 Malone Brendan, Searle Ross (2021) Updating Australian digital soil texture mapping (Part 2*): spatial modelling merged field lab measurements. Soil Research. https://doi.org/10.1071/SR20284","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/bootstrapSoilTexture.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bootstrap Soil Texture Data — bootstrapSoilTexture","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/bootstrapSoilTexture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bootstrap Soil Texture Data — bootstrapSoilTexture","text":"","code":"# \\donttest{ if( requireNamespace(\"compositions\") &   requireNamespace(\"soiltexture\") ) {      # sample data, data.frame   data('sp4')      # filter just Bt horizon data   ssc <- sp4[grep('^Bt', sp4$name), c('sand', 'silt', 'clay')]   names(ssc) <- toupper(names(ssc))      # simulate 100 samples   s <- bootstrapSoilTexture(ssc, n = 100)   s <- s$samples      # empty soil texture triangle   TT <- soiltexture::TT.plot(     class.sys= \"USDA-NCSS.TT\",     main= \"\",     tri.sum.tst=FALSE,     cex.lab=0.75,     cex.axis=0.75,     frame.bg.col='white',     class.lab.col='black',     lwd.axis=1.5,     arrows.show=TRUE,     new.mar = c(3, 0, 0, 0)   )      # add original data points   soiltexture::TT.points(     tri.data = s, geo = TT, col='firebrick',      pch = 3, cex = 0.5, lwd = 1,      tri.sum.tst = FALSE   )      # add simulated points   soiltexture::TT.points(     tri.data = ssc, geo = TT, bg='royalblue',      pch = 22, cex = 1, lwd = 1,      tri.sum.tst = FALSE   )      # simple legend   legend('top',           legend = c('Source', 'Simulated'),           pch = c(22, 3),           col = c('black', 'firebrick'),           pt.bg = c('royalblue', NA),           horiz = TRUE, bty = 'n'   )       } #> Loading required namespace: compositions #> Loading required namespace: soiltexture #> Warning: no DISPLAY variable so Tk is not available   # }"},{"path":"https://ncss-tech.github.io/aqp/reference/brierScore.html","id":null,"dir":"Reference","previous_headings":"","what":"Multinominal Brier Score — brierScore","title":"Multinominal Brier Score — brierScore","text":"Compute multinominal Brier score predicted class probabilities observed class label. Lower values associated accurate classifier.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/brierScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multinominal Brier Score — brierScore","text":"","code":"brierScore(x, classLabels, actual = \"actual\")"},{"path":"https://ncss-tech.github.io/aqp/reference/brierScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multinominal Brier Score — brierScore","text":"x data.frame class probabilities (numeric) observed class label (character), see examples classLabels vector predicted class labels (probabilities), corresponding column names x actual name column containing observed class, character vector factor","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/brierScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multinominal Brier Score — brierScore","text":"single Brier score, representative data x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/brierScore.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multinominal Brier Score — brierScore","text":"Brier, Glenn W. 1950. \"Verification Forecasts Expressed Terms Probability.\" Monthly Weather Review 78 (1): 1-3. doi:10.1175/1520-0493(1950)078<0001:VOFEIT>2.0.CO;2.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/brierScore.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Multinominal Brier Score — brierScore","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/brierScore.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multinominal Brier Score — brierScore","text":"","code":"# columns 'a', 'b', 'c' contain predicted probabilities # column 'actual' contains observed class label  # a good classifier d.good <- data.frame(   a = c(0.05, 0.05, 0.10),   b = c(0.90, 0.85, 0.75),   c = c(0.05, 0.10, 0.15),   actual = c('b', 'b', 'b'),   stringsAsFactors = FALSE )  # a rather bad classifier d.bad <- data.frame(   a = c(0.05, 0.05, 0.10),   b = c(0.90, 0.85, 0.75),   c = c(0.05, 0.10, 0.15),   actual = c('c', 'c', 'c'),   stringsAsFactors = FALSE )  # class labels are factors d.factors <- data.frame(   a = c(0.05, 0.05, 0.10),   b = c(0.90, 0.85, 0.75),   c = c(0.05, 0.10, 0.15),   actual = c('b', 'b', 'b'),   stringsAsFactors = TRUE )  # relatively low value = accurate brierScore(x = d.good, classLabels = c('a', 'b', 'c'), actual = 'actual') #> [1] 0.04833333  # high values = not accuate brierScore(x = d.bad, classLabels = c('a', 'b', 'c'), actual = 'actual') #> [1] 1.515  # message related to conversion of factor -> character brierScore(x = d.factors, classLabels = c('a', 'b', 'c'), actual = 'actual') #> converting `actual` from factor to character #> [1] 0.04833333"},{"path":"https://ncss-tech.github.io/aqp/reference/buntley.westin.index.html","id":null,"dir":"Reference","previous_headings":"","what":"Buntley-Westin (1965) Index — buntley.westin.index","title":"Buntley-Westin (1965) Index — buntley.westin.index","text":"Calculate \"Color Development Equivalent\" method Buntley & Westin (1965) \"Comparative Study Developmental Color Chestnut-Chernozem-Brunizem Soil Climosequence\" DOI: 10.2136/sssaj1965.03615995002900050029x. Originally developed Mollisols, Buntley-Westin index used tool separate soils based depth particular colors.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/buntley.westin.index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Buntley-Westin (1965) Index — buntley.westin.index","text":"","code":"buntley.westin.index(hue, chroma)"},{"path":"https://ncss-tech.github.io/aqp/reference/buntley.westin.index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Buntley-Westin (1965) Index — buntley.westin.index","text":"hue character vector containing Munsell hues (e.g. \"7.5YR\") chroma numeric vector containing Munsell chromas","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/buntley.westin.index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Buntley-Westin (1965) Index — buntley.westin.index","text":"numeric vector reflecting horizon color development.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/buntley.westin.index.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Buntley-Westin (1965) Index — buntley.westin.index","text":"Buntley, G.J. Westin, F.C. (1965), Comparative Study Developmental Color Chestnut-Chernozem-Brunizem Soil Climosequence. Soil Science Society America Journal, 29: 579-582. doi:10.2136/sssaj1965.03615995002900050029x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/buntley.westin.index.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Buntley-Westin (1965) Index — buntley.westin.index","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ca630.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Data from the Central Sierra Nevada Region of California — ca630","title":"Soil Data from the Central Sierra Nevada Region of California — ca630","text":"Site laboratory data soils sampled central Sierra Nevada Region California.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ca630.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Data from the Central Sierra Nevada Region of California — ca630","text":"","code":"data(ca630)"},{"path":"https://ncss-tech.github.io/aqp/reference/ca630.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil Data from the Central Sierra Nevada Region of California — ca630","text":"List containing: $site : data frame containing site information. user_site_id national user site id mlra MLRA county county ssa soil survey area lon longitude, WGS84 lat latitude, WGS84 pedon_key national soil profile id user_pedon_id local soil profile id cntrl_depth_to_top control section top depth (cm) cntrl_depth_to_bot control section bottom depth (cm) sampled_taxon_name soil series name $lab : data frame containing horizon information. pedon_key national soil profile id layer_key national horizon id layer_sequence horizon sequence number hzn_top horizon top (cm) hzn_bot horizon bottom (cm) hzn_desgn horizon name texture_description USDA soil texture nh4_sum_bases sum bases extracted ammonium acetate (pH 7) ex_acid exchangeable acidity [method ?] CEC8.2 cation exchange capacity sum cations method (pH 8.2) CEC7 cation exchange capacity ammonium acetate (pH 7) bs_8.2 base saturation sum cations method (pH 8.2) bs_7 base saturation ammonium acetate (pH 7)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ca630.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soil Data from the Central Sierra Nevada Region of California — ca630","text":"https://ncsslabdatamart.sc.egov.usda.gov/","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ca630.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Data from the Central Sierra Nevada Region of California — ca630","text":"data extracted NSSL database. ca630 list composed site lab data, stored data.frame objects. data modeled 1:many (site:lab) relation, pedon_id acting primary key site table foreign key lab table.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ca630.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Soil Data from the Central Sierra Nevada Region of California — ca630","text":"data date. Pending new data + documentation. Use caution","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/ca630.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Data from the Central Sierra Nevada Region of California — ca630","text":"","code":"if (FALSE) { # \\dontrun{ library(tactile) library(lattice) library(Hmisc) library(sp)  # check the data out: data(ca630) str(ca630)  # note that pedon_key is the link between the two tables  # make a copy of the horizon data ca <- ca630$lab  # promote to a SoilProfileCollection class object depths(ca) <- pedon_key ~ hzn_top + hzn_bot  # add site data, based on pedon_key site(ca) <- ca630$site  # ID data missing coordinates: '|' is a logical OR (missing.coords.idx <- which(is.na(ca$lat) | is.na(ca$lon)))  # remove missing coordinates by safely subsetting if(length(missing.coords.idx) > 0)   ca <- ca[-missing.coords.idx, ]  # register spatial data initSpatial(ca) <- ~ lon + lat  # assign a coordinate reference system prj(ca) <- 'EPSG:4269'  # check the result print(ca)  # aggregate %BS 7 for all profiles into 1 cm slices a <- slab(ca, fm= ~ bs_7)  # plot median & IQR by 1 cm slice xyplot( top ~ p.q50,  data = a,  lower=a$p.q25,  upper=a$p.q75, alpha=0.5, ylim=c(160,-5),  scales = list(alternating = 1, y = list(tick.num = 7)), panel = panel.depth_function,  prepanel = prepanel.depth_function, ylab='Depth (cm)', xlab='Base Saturation at pH 7', par.settings = tactile.theme(superpose.line = list(col = 'black', lwd = 2)) )  # aggregate %BS at pH 8.2 for all profiles by MLRA, along 1 cm slices # note that mlra is stored in @site a <- slab(ca, mlra ~ bs_8.2)  # keep only MLRA 18 and 22 a <- subset(a, subset=mlra %in% c('18', '22'))  # plot median & IQR by 1 cm slice, using different colors for each MLRA xyplot( top ~ p.q50,  groups = factor(mlra),  data = a, lower=a$p.q25,  upper=a$p.q75, alpha=0.25, sync.colors = TRUE, ylim=c(160,-5),  scales = list(alternating = 1, y = list(tick.num = 7)), panel = panel.depth_function,  prepanel = prepanel.depth_function, ylab='Depth (cm)', xlab='Base Saturation at pH 7', par.settings = tactile.theme(superpose.line = list(lwd = 2)), auto.key = list(lines = TRUE, points = FALSE, columns = 2) )    # Extract the 2nd horizon from all profiles as SPDF ca.2 <- ca[, 2]  # subset profiles 1 through 10 ca.1.to.10 <- ca[1:10, ]  # basic plot method: profile plot par(mar = c(0, 0, 3, 1)) plotSPC(ca.1.to.10, name='hzn_desgn', color = 'CEC7') } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/checkHzDepthLogic.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a SoilProfileCollection object for errors in horizon depths. — checkHzDepthLogic","title":"Check a SoilProfileCollection object for errors in horizon depths. — checkHzDepthLogic","text":"function inspects SoilProfileCollection object, looking four common errors horizon depths: bottom depth shallower top depth equal top bottom depth missing top bottom depth (e.g. NA) gap overlap adjacent horizons (byhz = FALSE)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/checkHzDepthLogic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a SoilProfileCollection object for errors in horizon depths. — checkHzDepthLogic","text":"","code":"checkHzDepthLogic(   x,   hzdepths = NULL,   idname = NULL,   fast = FALSE,   byhz = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/checkHzDepthLogic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a SoilProfileCollection object for errors in horizon depths. — checkHzDepthLogic","text":"x SoilProfileCollection data.frame object check hzdepths character vector, describing top bottom depths SoilProfileCollection data.frame. horizonDepths(x) used x SoilProfileCollection. idname character, describing column containing profile IDs SoilProfileCollection data.frame. idname(x) used x SoilProfileCollection. fast logical, TRUE, details specific test results needed, operation can allocate less memory run approximately 5x faster. byhz logical, apply logic tests profiles (FALSE) individual horizons (TRUE)?","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/checkHzDepthLogic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check a SoilProfileCollection object for errors in horizon depths. — checkHzDepthLogic","text":"data.frame containing profile IDs, validity boolean (valid) test results fast = FALSE. data.frame many rows profiles x (length(x)). id : Profile IDs, named according idname(x) valid : boolean, profile passes following tests depthLogic : boolean, errors related depth logic sameDepth : boolean, errors related top/bottom depths missingDepth : boolean, NA top / bottom depths overlapOrGap : boolean, gaps overlap adjacent horizons (NA byhz = TRUE)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/checkHzDepthLogic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check a SoilProfileCollection object for errors in horizon depths. — checkHzDepthLogic","text":"D.E. Beaudette, .G. Brown, S.M. Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/checkHzDepthLogic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check a SoilProfileCollection object for errors in horizon depths. — checkHzDepthLogic","text":"","code":"## sample data  data(sp3) depths(sp3) <- id ~ top + bottom  # these data should be clean res <- checkHzDepthLogic(sp3)  head(res) #>   id valid depthLogic sameDepth missingDepth overlapOrGap #> 1  1  TRUE      FALSE     FALSE        FALSE        FALSE #> 2 10  TRUE      FALSE     FALSE        FALSE        FALSE #> 3  2  TRUE      FALSE     FALSE        FALSE        FALSE #> 4  3  TRUE      FALSE     FALSE        FALSE        FALSE #> 5  4  TRUE      FALSE     FALSE        FALSE        FALSE #> 6  5  TRUE      FALSE     FALSE        FALSE        FALSE  # less memory if only concerned about net validity res <- checkHzDepthLogic(sp3, fast = TRUE)  head(res) #>   id valid #> 1  1  TRUE #> 2 10  TRUE #> 3  2  TRUE #> 4  3  TRUE #> 5  4  TRUE #> 6  5  TRUE"},{"path":"https://ncss-tech.github.io/aqp/reference/checkSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Test for a valid SoilProfileCollection — checkSPC","title":"Test for a valid SoilProfileCollection — checkSPC","text":"Test valid SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/checkSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test for a valid SoilProfileCollection — checkSPC","text":"","code":"checkSPC(x)"},{"path":"https://ncss-tech.github.io/aqp/reference/checkSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test for a valid SoilProfileCollection — checkSPC","text":"x SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/checkSPC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test for a valid SoilProfileCollection — checkSPC","text":"TRUE FALSE. Consider using rebuildSPC() FALSE.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/checkSPC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test for a valid SoilProfileCollection — checkSPC","text":"Test valid SoilProfileCollection checking slots defined class prototype. Likely used major versions aqp internal structure SoilProfileCollection changed. Use checkHzDepthLogic check common errors horizon depths.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/checkSPC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Test for a valid SoilProfileCollection — checkSPC","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/coercion-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce SoilProfileCollection with as() — as","title":"Coerce SoilProfileCollection with as() — as","text":"SoilProfileCollections can coerced R object types using (spc, 'type'). Possible endpoints include: list, data.frame, SpatialPointsDataFrame SpatialPoints.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/coercion-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce SoilProfileCollection with as() — as","text":"","code":"# S4 method for class 'SoilProfileCollection' as.data.frame(x)"},{"path":"https://ncss-tech.github.io/aqp/reference/coercion-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce SoilProfileCollection with as() — as","text":"x SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/coercion-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce SoilProfileCollection with as() — as","text":"list data.frame tbl_df data.table SpatialPointsDataFrame sf SpatialPoints","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/coercion-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce SoilProfileCollection with as() — as","text":"","code":"# load example data stored as SoilProfileCollection data(sp5)  # sp5 str(sp5) #> Formal class 'SoilProfileCollection' [package \"aqp\"] with 8 slots #>   ..@ idcol       : chr \"soil\" #>   ..@ hzidcol     : chr \"hzID\" #>   ..@ depthcols   : chr [1:2] \"top\" \"bottom\" #>   ..@ metadata    :List of 8 #>   .. ..$ aqp_df_class    : chr \"data.frame\" #>   .. ..$ aqp_group_by    : chr \"\" #>   .. ..$ aqp_hzdesgn     : chr \"name\" #>   .. ..$ aqp_hztexcl     : chr \"\" #>   .. ..$ depth_units     : chr \"cm\" #>   .. ..$ stringsAsFactors: logi FALSE #>   .. ..$ citation        : chr \"F. Carre, M.C. Girard. 2002. Quantitative mapping of soil types based on regression kriging of taxonomic distan\"| __truncated__ #>   .. ..$ dateAdded       : Date[1:1], format: \"2024-04-01\" #>   ..@ horizons    :'data.frame':\t1539 obs. of  19 variables: #>   .. ..$ soil      : chr [1:1539] \"soil1\" \"soil1\" \"soil1\" \"soil1\" ... #>   .. ..$ sand      : num [1:1539] 32.3 29 34.9 38.2 32.2 25.2 24.4 24 21.2 18.4 ... #>   .. ..$ silt      : num [1:1539] 10.9 11.2 11.6 10.9 10.8 ... #>   .. ..$ clay      : num [1:1539] 52.8 58.2 51.9 49.7 55.6 ... #>   .. ..$ R25       : num [1:1539] 0.41 0.31 0.31 0.31 0.55 0.43 0.44 0.34 0.35 0.35 ... #>   .. ..$ G25       : num [1:1539] 0.38 0.28 0.28 0.28 0.46 0.37 0.37 0.28 0.27 0.27 ... #>   .. ..$ B25       : num [1:1539] 0.34 0.25 0.25 0.25 0.36 0.3 0.31 0.23 0.19 0.19 ... #>   .. ..$ pH        : num [1:1539] 6.85 8.08 9.2 9.29 9.24 8.26 8.95 9.34 9.24 9.13 ... #>   .. ..$ EC        : num [1:1539] 24 10 23.9 41.6 73.6 14.5 16.1 26.1 43.8 61.5 ... #>   .. ..$ CaCO3     : num [1:1539] 0.05 0.05 0.3 0.4 0.7 0.1 0.5 1 1.05 1.1 ... #>   .. ..$ C         : num [1:1539] 2.29 0.9 0.74 0.35 0.25 1.06 0.66 0.58 0.47 0.36 ... #>   .. ..$ Ca        : num [1:1539] 183 234 231 168 203 ... #>   .. ..$ Mg        : num [1:1539] 146 172 166 152 167 ... #>   .. ..$ Na        : num [1:1539] 19 34.1 70.2 81.7 100 ... #>   .. ..$ top       : int [1:1539] 0 8 25 55 100 0 10 25 40 70 ... #>   .. ..$ bottom    : int [1:1539] 8 25 55 100 267 10 25 40 70 100 ... #>   .. ..$ hzID      : chr [1:1539] \"1\" \"2\" \"3\" \"4\" ... #>   .. ..$ soil_color: chr [1:1539] \"#696157\" \"#4F4740\" \"#4F4740\" \"#4F4740\" ... #>   .. ..$ name      : chr [1:1539] \"H1\" \"H2\" \"H3\" \"H4\" ... #>   ..@ site        :'data.frame':\t296 obs. of  1 variable: #>   .. ..$ soil: chr [1:296] \"soil1\" \"soil10\" \"soil100\" \"soil101\" ... #>   ..@ diagnostic  :'data.frame':\t0 obs. of  0 variables #>   ..@ restrictions:'data.frame':\t0 obs. of  0 variables  # list output str(as(sp5, 'list')) #> List of 8 #>  $ idcol       : chr \"soil\" #>  $ hzidcol     : chr \"hzID\" #>  $ depthcols   : chr [1:2] \"top\" \"bottom\" #>  $ metadata    :List of 8 #>   ..$ aqp_df_class    : chr \"data.frame\" #>   ..$ aqp_group_by    : chr \"\" #>   ..$ aqp_hzdesgn     : chr \"name\" #>   ..$ aqp_hztexcl     : chr \"\" #>   ..$ depth_units     : chr \"cm\" #>   ..$ stringsAsFactors: logi FALSE #>   ..$ citation        : chr \"F. Carre, M.C. Girard. 2002. Quantitative mapping of soil types based on regression kriging of taxonomic distan\"| __truncated__ #>   ..$ dateAdded       : Date[1:1], format: \"2024-04-01\" #>  $ horizons    :'data.frame':\t1539 obs. of  19 variables: #>   ..$ soil      : chr [1:1539] \"soil1\" \"soil1\" \"soil1\" \"soil1\" ... #>   ..$ sand      : num [1:1539] 32.3 29 34.9 38.2 32.2 25.2 24.4 24 21.2 18.4 ... #>   ..$ silt      : num [1:1539] 10.9 11.2 11.6 10.9 10.8 ... #>   ..$ clay      : num [1:1539] 52.8 58.2 51.9 49.7 55.6 ... #>   ..$ R25       : num [1:1539] 0.41 0.31 0.31 0.31 0.55 0.43 0.44 0.34 0.35 0.35 ... #>   ..$ G25       : num [1:1539] 0.38 0.28 0.28 0.28 0.46 0.37 0.37 0.28 0.27 0.27 ... #>   ..$ B25       : num [1:1539] 0.34 0.25 0.25 0.25 0.36 0.3 0.31 0.23 0.19 0.19 ... #>   ..$ pH        : num [1:1539] 6.85 8.08 9.2 9.29 9.24 8.26 8.95 9.34 9.24 9.13 ... #>   ..$ EC        : num [1:1539] 24 10 23.9 41.6 73.6 14.5 16.1 26.1 43.8 61.5 ... #>   ..$ CaCO3     : num [1:1539] 0.05 0.05 0.3 0.4 0.7 0.1 0.5 1 1.05 1.1 ... #>   ..$ C         : num [1:1539] 2.29 0.9 0.74 0.35 0.25 1.06 0.66 0.58 0.47 0.36 ... #>   ..$ Ca        : num [1:1539] 183 234 231 168 203 ... #>   ..$ Mg        : num [1:1539] 146 172 166 152 167 ... #>   ..$ Na        : num [1:1539] 19 34.1 70.2 81.7 100 ... #>   ..$ top       : int [1:1539] 0 8 25 55 100 0 10 25 40 70 ... #>   ..$ bottom    : int [1:1539] 8 25 55 100 267 10 25 40 70 100 ... #>   ..$ hzID      : chr [1:1539] \"1\" \"2\" \"3\" \"4\" ... #>   ..$ soil_color: chr [1:1539] \"#696157\" \"#4F4740\" \"#4F4740\" \"#4F4740\" ... #>   ..$ name      : chr [1:1539] \"H1\" \"H2\" \"H3\" \"H4\" ... #>  $ site        :'data.frame':\t296 obs. of  1 variable: #>   ..$ soil: chr [1:296] \"soil1\" \"soil10\" \"soil100\" \"soil101\" ... #>  $ diagnostic  :'data.frame':\t0 obs. of  0 variables #>  $ restrictions:'data.frame':\t0 obs. of  0 variables  # data.frame output str(as(sp5, 'data.frame')) #> 'data.frame':\t1539 obs. of  19 variables: #>  $ soil      : chr  \"soil1\" \"soil1\" \"soil1\" \"soil1\" ... #>  $ sand      : num  32.3 29 34.9 38.2 32.2 25.2 24.4 24 21.2 18.4 ... #>  $ silt      : num  10.9 11.2 11.6 10.9 10.8 ... #>  $ clay      : num  52.8 58.2 51.9 49.7 55.6 ... #>  $ R25       : num  0.41 0.31 0.31 0.31 0.55 0.43 0.44 0.34 0.35 0.35 ... #>  $ G25       : num  0.38 0.28 0.28 0.28 0.46 0.37 0.37 0.28 0.27 0.27 ... #>  $ B25       : num  0.34 0.25 0.25 0.25 0.36 0.3 0.31 0.23 0.19 0.19 ... #>  $ pH        : num  6.85 8.08 9.2 9.29 9.24 8.26 8.95 9.34 9.24 9.13 ... #>  $ EC        : num  24 10 23.9 41.6 73.6 14.5 16.1 26.1 43.8 61.5 ... #>  $ CaCO3     : num  0.05 0.05 0.3 0.4 0.7 0.1 0.5 1 1.05 1.1 ... #>  $ C         : num  2.29 0.9 0.74 0.35 0.25 1.06 0.66 0.58 0.47 0.36 ... #>  $ Ca        : num  183 234 231 168 203 ... #>  $ Mg        : num  146 172 166 152 167 ... #>  $ Na        : num  19 34.1 70.2 81.7 100 ... #>  $ top       : int  0 8 25 55 100 0 10 25 40 70 ... #>  $ bottom    : int  8 25 55 100 267 10 25 40 70 100 ... #>  $ hzID      : chr  \"1\" \"2\" \"3\" \"4\" ... #>  $ soil_color: chr  \"#696157\" \"#4F4740\" \"#4F4740\" \"#4F4740\" ... #>  $ name      : chr  \"H1\" \"H2\" \"H3\" \"H4\" ...  # Spatial Objects # make some random coordinate data for each profile sp5$x <- sp5$y <- rnorm(length(sp5)) initSpatial(sp5, crs = \"OGC:CRS84\") <- ~ x + y  if (requireNamespace(\"sf\")) {    # sf output   str(as(sp5, 'sf'))    # SpatialPointsDataFrame output   str(as(sp5, 'SpatialPointsDataFrame'))    # SpatialPoints output   str(as(sp5, 'SpatialPoints'))    } #> Loading required namespace: sf #> only site data are extracted #> Classes ‘sf’ and 'data.frame':\t296 obs. of  4 variables: #>  $ soil    : chr  \"soil1\" \"soil10\" \"soil100\" \"soil101\" ... #>  $ y       : num  1.96 -0.828 -0.438 -1.544 -1.246 ... #>  $ x       : num  1.96 -0.828 -0.438 -1.544 -1.246 ... #>  $ geometry:sfc_POINT of length 296; first list element:  'XY' num  1.96 1.96 #>  - attr(*, \"sf_column\")= chr \"geometry\" #>  - attr(*, \"agr\")= Factor w/ 3 levels \"constant\",\"aggregate\",..: NA NA NA #>   ..- attr(*, \"names\")= chr [1:3] \"soil\" \"y\" \"x\" #> only site data are extracted #> Formal class 'SpatialPointsDataFrame' [package \"sp\"] with 5 slots #>   ..@ data       :'data.frame':\t296 obs. of  3 variables: #>   .. ..$ soil: chr [1:296] \"soil1\" \"soil10\" \"soil100\" \"soil101\" ... #>   .. ..$ y   : num [1:296] 1.96 -0.828 -0.438 -1.544 -1.246 ... #>   .. ..$ x   : num [1:296] 1.96 -0.828 -0.438 -1.544 -1.246 ... #>   ..@ coords.nrs : num(0)  #>   ..@ coords     : num [1:296, 1:2] 1.96 -0.828 -0.438 -1.544 -1.246 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\" #>   ..@ bbox       : num [1:2, 1:2] -2.18 -2.18 2.63 2.63 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\" #>   .. .. ..$ : chr [1:2] \"min\" \"max\" #>   ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot #>   .. .. ..@ projargs: chr \"+proj=longlat +datum=WGS84 +no_defs\" #>   .. .. ..$ comment: chr \"GEOGCRS[\\\"WGS 84 (CRS84)\\\",\\n    DATUM[\\\"World Geodetic System 1984\\\",\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,29\"| __truncated__ #> only site data are extracted #> Formal class 'SpatialPoints' [package \"sp\"] with 3 slots #>   ..@ coords     : num [1:296, 1:2] 1.96 -0.828 -0.438 -1.544 -1.246 ... #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : NULL #>   .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\" #>   ..@ bbox       : num [1:2, 1:2] -2.18 -2.18 2.63 2.63 #>   .. ..- attr(*, \"dimnames\")=List of 2 #>   .. .. ..$ : chr [1:2] \"coords.x1\" \"coords.x2\" #>   .. .. ..$ : chr [1:2] \"min\" \"max\" #>   ..@ proj4string:Formal class 'CRS' [package \"sp\"] with 1 slot #>   .. .. ..@ projargs: chr \"+proj=longlat +datum=WGS84 +no_defs\" #>   .. .. ..$ comment: chr \"GEOGCRS[\\\"WGS 84 (CRS84)\\\",\\n    DATUM[\\\"World Geodetic System 1984\\\",\\n        ELLIPSOID[\\\"WGS 84\\\",6378137,29\"| __truncated__"},{"path":"https://ncss-tech.github.io/aqp/reference/col2Munsell.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert colors into Munsell Notation — col2Munsell","title":"Convert colors into Munsell Notation — col2Munsell","text":"Lookup n closest Munsell chips munsell lookup table various color notations. function replaces rgb2munsell().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/col2Munsell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert colors into Munsell Notation — col2Munsell","text":"","code":"col2Munsell(col, space = c(\"sRGB\", \"CIELAB\"), nClosest = 1)"},{"path":"https://ncss-tech.github.io/aqp/reference/col2Munsell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert colors into Munsell Notation — col2Munsell","text":"col character vector colors, data.frame matrix color coordinates sRGB CIELAB color space space character, one sRGB CIELAB, defines input color system nClosest integer, number closest Munsell colors return (valid range 1-20)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/col2Munsell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert colors into Munsell Notation — col2Munsell","text":"(NA-padded) data.frame containing hue, value, chroma, CIE delta-E 2000 color contrast metric source nearest matching color(s).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/col2Munsell.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert colors into Munsell Notation — col2Munsell","text":"function fully vectorized pad output NA-records NA present color.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/col2Munsell.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert colors into Munsell Notation — col2Munsell","text":"http://ncss-tech.github.io/AQP/ http://www.brucelindbloom.com/index.html?ColorCalcHelp.html http://www.munsellcolourscienceforpainters.com/MunsellAndKubelkaMunkToolbox/MunsellAndKubelkaMunkToolbox.html http://www.cis.rit.edu/mcsl/online/munsell.php","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/col2Munsell.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert colors into Munsell Notation — col2Munsell","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/col2Munsell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert colors into Munsell Notation — col2Munsell","text":"","code":"# vector of named R colors col2Munsell(c('red', 'green', 'blue')) #>    hue value chroma        sigma #> 1  10R   5.0     26 5.334215e-14 #> 2 10GY   8.5     22 1.111449e-14 #> 3  5PB   1.0     44 0.000000e+00  # sRGB matrix in the range of 0-255 col2Munsell(cbind(255, 0, 0)) #>   hue value chroma        sigma #> 1 10R     5     26 5.334215e-14  # sRGB matrix in the range of 0-1 col2Munsell(cbind(1, 0, 0)) #>   hue value chroma        sigma #> 1 10R     5     26 5.334215e-14  # 10YR 5/6 in CIELAB col2Munsell(   cbind(51.4337, 9.917916, 38.6889),    space = 'CIELAB' ) #>    hue value chroma        sigma #> 1 10YR     5      6 1.502818e-06  # 2.5YR 6/8 in hex notation col2Munsell(\"#D18158FF\") #>     hue value chroma     sigma #> 1 2.5YR     6      8 0.1117122  # 7.5YR 8/1 in sRGB {0, 1} col2Munsell(   cbind(0.8240707, 0.7856834, 0.7541048) ) #>     hue value chroma     sigma #> 1 7.5YR     8      1 0.7104182  # 7.5YR 8/1 in sRGB {0, 255} col2Munsell(   cbind(0.8240707, 0.7856834, 0.7541048) * 255 ) #>     hue value chroma     sigma #> 1 7.5YR     8      1 0.7104182  # multple colors in CIELAB col2Munsell(   parseMunsell(c('10BG 6/6', '2.5YR 4/6'), returnLAB = TRUE),   space = 'CIELAB' ) #>     hue value chroma sigma #> 1  10BG     6      6     0 #> 2 2.5YR     4      6     0  # data.frame input col2Munsell(   data.frame(r = 1, g = 0, b = 0),   space = 'sRGB' ) #>   hue value chroma        sigma #> 1 10R     5     26 5.334215e-14  # keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # Munsell notation to sRGB triplets {0, 1}  color <- munsell2rgb(   the_hue = c('10YR', '2.5YR', '5YR'),    the_value = c(3, 5, 2.5),    the_chroma = c(5, 6, 2),    return_triplets = TRUE )  # result is a data.frame of sRGB {0, 1} color #>           r         g          b #> 1 0.3754983 0.2555129 0.09093377 #> 2 0.6613729 0.4212891 0.30856225 #> 3 0.2897926 0.2154340 0.18009210  # back-transform sRGB -> closest Munsell color # sigma is the dE00 color contrast metric col2Munsell(color, space = 'sRGB') #>     hue value chroma        sigma #> 1  10YR   3.0      5 4.410418e-14 #> 2 2.5YR   5.0      6 2.796756e-15 #> 3   5YR   2.5      2 3.177668e-14"},{"path":"https://ncss-tech.github.io/aqp/reference/collapseHz.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse Horizons within Profiles Based on Pattern Matching — collapseHz","title":"Collapse Horizons within Profiles Based on Pattern Matching — collapseHz","text":"Combines layers aggregates data grouping adjacent horizons match pattern hzdesgn , alternately, share common value argument. Numeric properties combined using weighted average, properties derived dominant condition based thickness layers values group.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/collapseHz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse Horizons within Profiles Based on Pattern Matching — collapseHz","text":"","code":"collapseHz(   x,   pattern = NULL,   by = NULL,   hzdesgn = hzdesgnname(x, required = TRUE),   FUN = function(x, pattern, hzdesgn, ...) grepl(pattern, x[[hzdesgn]], ignore.case =     FALSE),   ...,   AGGFUN = NULL,   ignore_numerics = NULL,   na.rm = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/collapseHz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse Horizons within Profiles Based on Pattern Matching — collapseHz","text":"x SoilProfileCollection pattern character. regular expression pattern match hzdesgn column. Default: NULL. character. column name specifying horizons combined. Aggregation applied adjacent groups layers within profiles value . Used lieu pattern hzdesgn. Default: NULL. hzdesgn character. character column containing horizon-level identifiers. Default: hzdesgnname(x, required = TRUE). FUN function. function returns logical vector equal length number horizons x. Used pattern specified. See details. ... Additional arguments passed matching function FUN. AGGFUN list. named list containing custom aggregation functions. List element names match column name transform. functions defined take three arguments: x (vector horizon property values), top (vector top depths), bottom (vector bottom depths). Default: NULL applies weighted.mean() numeric columns listed ignore_numerics takes dominant condition (value greatest aggregate thickness sum) columns. See details. ignore_numerics character. Vector column names contain numeric values aggregated using weighted.mean(). example, soil color \"value\" \"chroma\". na.rm logical. TRUE NA values ignored calculating min/max boundaries group weighted averages. FALSE NA values propagated result. Default: FALSE.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/collapseHz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse Horizons within Profiles Based on Pattern Matching — collapseHz","text":"SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/collapseHz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse Horizons within Profiles Based on Pattern Matching — collapseHz","text":"custom matching function (FUN) used, accept arbitrary additional arguments via ellipsis (...). necessary anything arguments, result match number horizons found input SoilProfileCollection x. Custom aggregation functions defined AGGFUN argument either return single vector value group*column combination, return data.frame object named columns. input column name used column name result data.frame, values column name result SoilProfileCollection replaced output aggregation function. See examples.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/collapseHz.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Collapse Horizons within Profiles Based on Pattern Matching — collapseHz","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/collapseHz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse Horizons within Profiles Based on Pattern Matching — collapseHz","text":"","code":"data(jacobs2000)  # calculate a new SPC with genhz column based on patterns new_labels <- c(\"A\", \"E\", \"Bt\", \"Bh\", \"C\") patterns <- c(\"A\", \"E\", \"B.*t\", \"B.*h\", \"C\") jacobs2000_gen <- generalizeHz(jacobs2000, new = new_labels, pattern = patterns)  # use existing generalized horizon labels i <- collapseHz(jacobs2000_gen, by = \"genhz\")  profile_id(i) <- paste0(profile_id(i), \"_collapse\")  plot(   c(i, jacobs2000),   color = \"genhz\",   name = \"name\",   name.style = \"center-center\",   cex.names = 1 )    # custom pattern argument   j <- collapseHz(jacobs2000,                 c(                   `A` = \"^A\",                   `E` = \"E\",                   `Bt` = \"[ABC]+t\",                   `C` = \"^C\",                   `foo` = \"bar\"                 )) profile_id(j) <- paste0(profile_id(j), \"_collapse\") plot(c(j, jacobs2000), color = \"clay\")   # custom aggregation function for matrix_color_munsell k <- collapseHz(jacobs2000,                 pattern = c(                   `A` = \"^A\",                   `E` = \"E\",                   `Bt` = \"[ABC]+t\",                   `C` = \"^C\",                   `foo` = \"bar\"                 ),                 AGGFUN = list(                   matrix_color_munsell = function(x, top, bottom) {                     thk <- bottom - top                     if (length(x) > 1) {                       xord <- order(thk, decreasing = TRUE)                       paste0(paste0(x[xord], \" (t=\", thk[xord], \")\"), collapse = \", \")                     } else                       x                   }                 )               ) profile_id(k) <- paste0(profile_id(k), \"_collapse_custom\")  unique(k$matrix_color_munsell) #>  [1] \"10YR 4/1\"                                                                            #>  [2] \"2.5Y 6/6\"                                                                            #>  [3] \"10YR 6/8 (t=51), 10YR 5/8 (t=36), 10YR 6/8 (t=23)\"                                   #>  [4] NA                                                                                    #>  [5] \"2.5YR 4/8\"                                                                           #>  [6] \"10YR 2/2\"                                                                            #>  [7] \"10YR 6/4\"                                                                            #>  [8] \"10YR 5/8 (t=38), 10YR 6/8 (t=38), 10YR 6/8 (t=23)\"                                   #>  [9] \"10YR 4/2 (t=15), 10YR 5/2 (t=10)\"                                                    #> [10] \"10YR 7/4\"                                                                            #> [11] \"10YR 6/4 (t=53), 10YR 6/4 (t=28), 2.5Y 6/6 (t=20), 10YR 7/2 (t=10)\"                  #> [12] \"10YR 5/1\"                                                                            #> [13] \"10YR 7/4 (t=51), 10YR 8/1 (t=35), 10YR 6/4 (t=33), 10YR 7/4 (t=26), 2.5Y 8/2 (t=20)\" #> [14] \"10YR 7/2\"                                                                            #> [15] \"10YR 5/2\"                                                                            #> [16] \"2.5Y 7/3 (t=48), 2.5Y 7/4 (t=33)\"                                                    #> [17] \"10YR 6/6\"                                                                            #> [18] \"10YR 4/6\"                                                                            #> [19] \"2.5Y 6/3 (t=28), 10YR 5/1 (t=18)\"                                                    #> [20] \"2.5Y 7/3 (t=30), 2.5Y 6/3 (t=28)\"                                                    #> [21] \"10YR 7/1 (t=49), 10YR 7/2 (t=15)\"                                                    #> [22] \"10YR 8/1\"                                                                            #> [23] \"7.5YR 3/2\"                                                                           #> [24] \"10YR 3/2\"                                                                            #> [25] \"10YR 7/2 (t=41), 10YR 6/3 (t=30)\"                                                    #> [26] \"10YR 2/1\"                                                                            #> [27] \"10YR 6/1\"                                                                             # custom aggregation function for matrix_color_munsell (returns data.frame) m <- collapseHz(jacobs2000,                 pattern = c(                   `A` = \"^A\",                   `E` = \"E\",                   `Bt` = \"[ABC]+t\",                   `C` = \"^C\",                   `foo` = \"bar\"                 ),                 AGGFUN = list(                   matrix_color_munsell = function(x, top, bottom) {                     thk <- bottom - top                     if (length(x) > 1) {                       xord <- order(thk, decreasing = TRUE)                       data.frame(matrix_color_munsell = paste0(x, collapse = \";\"),                                  n_matrix_color = length(x))                     } else {                       data.frame(matrix_color_munsell = x,                                   n_matrix_color = length(x))                     }                   }                 )               ) profile_id(m) <- paste0(profile_id(m), \"_collapse_custom\")  m$matrix_color_munsell.n_matrix_color #>  [1] NA   NA   \"4\"  NA   NA   NA   NA   \"10\" NA   \"2\"  NA   \"19\" NA   \"24\" NA   #> [16] NA   \"30\" NA   NA   \"2\"  \"35\" \"38\" NA   NA   NA   NA   \"44\" NA   NA"},{"path":"https://ncss-tech.github.io/aqp/reference/colorChart.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize soil colors in Munsell notation according to within-group frequency. — colorChart","title":"Visualize soil colors in Munsell notation according to within-group frequency. — colorChart","text":"Visualize soil colors Munsell notation according within-group frequency.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorChart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize soil colors in Munsell notation according to within-group frequency. — colorChart","text":"","code":"colorChart(   m,   g = factor(\"All\"),   size = TRUE,   annotate = FALSE,   chip.cex = 3,   chip.cex.min = 0.1,   chip.cex.max = 1.5,   chip.border.col = \"black\",   annotate.cex = chip.cex * 0.25,   annotate.type = c(\"count\", \"percentage\"),   threshold = NULL )"},{"path":"https://ncss-tech.github.io/aqp/reference/colorChart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize soil colors in Munsell notation according to within-group frequency. — colorChart","text":"m character vector color Munsell notation ('10YR 4/6') g factor describing group membership, typically generalization horizon designation, default value generate fake grouping covers colors m size logical, encode group-wise frequency chip size annotate logical, annotate color chip frequency chip.cex scaling factor applied color chip chip.cex.min lower limit color chip frequency depiction chip.cex.max lower limit color chip frequency depiction chip.border.col color chip borders (outline) annotate.cex scaling factor chip frequency annotation annotate.type character, within-group count percentage threshold numeric within 0-1, color chips proportion < threshold removed","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorChart.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize soil colors in Munsell notation according to within-group frequency. — colorChart","text":"trellis object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorChart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize soil colors in Munsell notation according to within-group frequency. — colorChart","text":"","code":"library(lattice)  # two hue pages ric <- expand.grid(   hue = c('5YR', '7.5YR'),   value = 2:8,   chroma = 2:8 )  # combine hue, value, chroma into standard Munsell notation ric <- sprintf(\"%s %s/%s\", ric$hue, ric$value, ric$chroma)  # note that chip frequency-based size is disabled # because all chips have equal frequency colorChart(ric, chip.cex = 4, size = TRUE)   # annotation of frequency colorChart(ric, chip.cex = 4, annotate = TRUE)   # bootstrap to larger size ric.big <- sample(ric, size = 100, replace = TRUE)  # frequency can be encoded in size colorChart(ric.big, chip.cex = 3)  colorChart(ric.big, chip.cex = 5, annotate = TRUE)   # constant size colorChart(ric.big, chip.cex = 3, size = FALSE)  colorChart(ric.big, chip.cex = 3, size = FALSE, chip.border.col = 'NA')   # simulate colors based dE00 thresholding p <- list(   list(m = '10YR 4/4', thresh = 10, hues = c('10YR', '7.5YR')) )  # perform 500 simulations s <- simulateColor(method = 'dE00', n = 500, parameters = p)  # result is a list, use the first element colorChart(s[[1]], chip.cex = 4)   # increase the possible range of color chip sizes colorChart(s[[1]], chip.cex = 4, chip.cex.min = 0.01, chip.cex.max = 2)   # slightly funky support for neutral hues N <- sprintf('N %s/', 2:8) cols <- c(rep(N, times = 5), ric.big)  # note special panel used to show neutral hues colorChart(cols, size = FALSE, annotate = TRUE)   # filter proportions below given threshold colorChart(cols, size = FALSE, annotate = TRUE, threshold = 0.01,            chip.cex = 4, annotate.type = 'percentage')"},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrast.html","id":null,"dir":"Reference","previous_headings":"","what":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","title":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","text":"Pair-wise comparisons Munsell color specifications, based NCSS color contrast classes (Soil Survey Technical Note 2) CIE delta-E 2000 metric.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","text":"","code":"colorContrast(m1, m2)"},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","text":"m1 vector Munsell colors ('10YR 3/3') m2 vector Munsell colors ('10YR 3/6')","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","text":"data.frame following columns: m1: Munsell color 1 m2: Munsell color 2 dH: delta-hue, computed huePosition dV: delta-value, absolute value difference Munsell value (m1 vs. m2) dc: delta-chroma, absolute value difference Munsell chroma (m1 vs. m2) dE00: delta-E00, e.g. CIE delta-E refined 2000 cc: soil color contrast class, specified Soil Survey Technical Note 2.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","text":"function fully vectorized expects input length. Use expand.grid() generate suitable input 1:many many:1 type comparisons. See tutorial expanded discussion examples. Neutral colors mentioned SSTN2: function comparison neutral color (e.g. 'N 3/') assigned delta-hue 1. Since SSTN2 expects hues counted clock wise 5R, possible get large delta-hue values otherwise adjacent colors: '5R' vs. '2.5R'. addressed update standards. meaningful representation color contrast CIE2000 (dE00) metric.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrast.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","text":"delta-E00 computed farver package.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrast.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","text":"https://en.wikipedia.org/wiki/Color_difference","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrast.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metrics of Contrast Suitable for Comparing Soil Colors — colorContrast","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # two sets of colors to compare m1 <- c('10YR 6/3', '7.5YR 3/3', '10YR 2/2', '7.5YR 3/4') m2 <- c('5YR 3/4', '7.5YR 4/4', '2.5YR 2/2', '7.5YR 6/3')  # contrast metrics colorContrast(m1, m2) #>          m1        m2 dH dV dC      dE00        cc #> 1  10YR 6/3   5YR 3/4  2  3  1 31.286374 Prominent #> 2 7.5YR 3/3 7.5YR 4/4  0  1  1  9.657423     Faint #> 3  10YR 2/2 2.5YR 2/2  3  0  0  6.814101     Faint #> 4 7.5YR 3/4 7.5YR 6/3  0  3  1 30.261643  Distinct  # adjacent chips colorContrast('10YR 3/3', '10YR 3/4') #>         m1       m2 dH dV dC     dE00    cc #> 1 10YR 3/3 10YR 3/4  0  0  1 3.151168 Faint colorContrast('10YR 3/3', '7.5YR 3/3') #>         m1        m2 dH dV dC     dE00    cc #> 1 10YR 3/3 7.5YR 3/3  1  0  0 3.313277 Faint  # highly contrasting colors # http://colour.granjow.net/fabercastell-polychromos.html colorContrastPlot('10B 4/13', '10YR 10/15', labels = c('helioblue-reddish', 'light cadmium yellow') )    ## Note: neutral hues aren't defined in TN2 # approximation / extension of the concept colorContrast(m1 = 'N 3/', m2 = 'N 6/') #>     m1   m2 dH dV dC     dE00       cc #> 1 N 3/ N 6/  0  3  0 17.20472 Distinct  # colorContrast(m1 = '10YR 3/3', m2 = 'N 3/') #>         m1   m2 dH dV dC     dE00        cc #> 1 10YR 3/3 N 3/  1  0  3 22.01338 Prominent  m1 <- c('10YR 6/3', '7.5YR 3/3', '10YR 2/2', 'N 3/') m2 <- c('5YR 3/4', '7.5YR 4/4', '2.5YR 2/2', '7.5YR 6/3') colorContrast(m1, m2) #>          m1        m2 dH dV dC      dE00        cc #> 1  10YR 6/3   5YR 3/4  2  3  1 31.286374 Prominent #> 2 7.5YR 3/3 7.5YR 4/4  0  1  1  9.657423     Faint #> 3  10YR 2/2 2.5YR 2/2  3  0  0  6.814101     Faint #> 4      N 3/ 7.5YR 6/3  1  3  3 47.668246 Prominent"},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrastPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Contrast Plot — colorContrastPlot","title":"Color Contrast Plot — colorContrastPlot","text":"simple display two sets colors, NCSS color contrast class CIE delta-E00.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrastPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Contrast Plot — colorContrastPlot","text":"","code":"colorContrastPlot(   m1,   m2,   col.cex = 1,   col.font = 2,   d.cex = 1,   cc.font = 3,   dE00.font = 1,   labels = c(\"m1\", \"m2\"),   label.cex = 1,   label.font = 1,   printMetrics = TRUE,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrastPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Contrast Plot — colorContrastPlot","text":"m1 first set Munsell colors comparison (e.g. '5YR 3/2') m2 second set Munsell colors comparison col.cex scaling factor color labels col.font font color labels d.cex contrast contrast metric labels cc.font font contrast class dE00.font font delta-E00 labels labels compared colors, vector length 2 label.cex scaling factor labels label.font font labels printMetrics logical, print metrics color swatches ... arguments colorspace::swatchplot","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrastPlot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Color Contrast Plot — colorContrastPlot","text":"function requires farver package calculation CIE delta-E00.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrastPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Color Contrast Plot — colorContrastPlot","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorContrastPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Contrast Plot — colorContrastPlot","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # two sets of colors to compare m1 <- c('10YR 6/3', '7.5YR 3/3', '10YR 2/2', '7.5YR 3/4') m2 <- c('5YR 3/4', '7.5YR 4/4', '2.5YR 2/2', '7.5YR 6/3')  # contrast metrics colorContrast(m1, m2) #>          m1        m2 dH dV dC      dE00        cc #> 1  10YR 6/3   5YR 3/4  2  3  1 31.286374 Prominent #> 2 7.5YR 3/3 7.5YR 4/4  0  1  1  9.657423     Faint #> 3  10YR 2/2 2.5YR 2/2  3  0  0  6.814101     Faint #> 4 7.5YR 3/4 7.5YR 6/3  0  3  1 30.261643  Distinct  # graphical display colorContrastPlot(m1, m2)"},{"path":"https://ncss-tech.github.io/aqp/reference/colorQuantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Color Range via Quantiles — colorQuantiles","title":"Soil Color Range via Quantiles — colorQuantiles","text":"Estimate central tendency spread soil color using marginal quantiles L1 median CIELAB coordinates.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorQuantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Color Range via Quantiles — colorQuantiles","text":"","code":"colorQuantiles(soilColors, p = c(0.05, 0.5, 0.95))"},{"path":"https://ncss-tech.github.io/aqp/reference/colorQuantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soil Color Range via Quantiles — colorQuantiles","text":"soilColors vector R colors (sRGB colorspace) p marginal quantiles interest","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorQuantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Soil Color Range via Quantiles — colorQuantiles","text":"List containing following elements: marginal: data.frame containing marginal quantiles CIELAB (D65), closest Munsell chips, dE00 L1: L1 median CIELAB (D65) values, closest Munsell chip, dE00","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorQuantiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Color Range via Quantiles — colorQuantiles","text":"Colors converted sRGB CIELAB (D65 illuminant), marginal quantiles (L,,B) coordinates estimated, L1 median (L,,B) estimates. closest Munsell chips (via Munsell/CIELAB lookup table provided munsell) R colors determined locating chips closest marginal quantiles L1 median. results can conveniently inspected using plotColorQuantiles().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorQuantiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Soil Color Range via Quantiles — colorQuantiles","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/colorQuantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Color Range via Quantiles — colorQuantiles","text":"","code":"if (FALSE) { # \\dontrun{ # example data, see manual page for details data(sp5)  # slice top 25 cm # 24-25cm is the last slice s <- dice(sp5, 0:24 ~ .)  # check some of the data par(mar=c(0,0,0,0)) plotSPC(sample(s, 25), divide.hz = FALSE, name = '', print.id = FALSE, width = 0.5)  # colors previewColors(unique(s$soil_color))  # compute marginal quantiles and L1 median cq <- colorQuantiles(s$soil_color)  # simple graphical display of results plotColorQuantiles(cq) } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/combine-SoilProfileCollection-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine SoilProfileCollection objects — c,SoilProfileCollection-method","title":"Combine SoilProfileCollection objects — c,SoilProfileCollection-method","text":"Combine SoilProfileCollection objects lists SoilProfileCollection objects. method provides ... expansion pbindlist method.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/combine-SoilProfileCollection-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine SoilProfileCollection objects — c,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' c(x, ...)  # S4 method for class 'SoilProfileCollection' combine(...)  # S4 method for class 'list' combine(...)"},{"path":"https://ncss-tech.github.io/aqp/reference/combine-SoilProfileCollection-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine SoilProfileCollection objects — c,SoilProfileCollection-method","text":"x SoilProfileCollection ... SoilProfileCollection objects","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/combine-SoilProfileCollection-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine SoilProfileCollection objects — c,SoilProfileCollection-method","text":"SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/combine-SoilProfileCollection-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine SoilProfileCollection objects — c,SoilProfileCollection-method","text":"","code":"# example data spc1 <- random_profile(1, SPC = TRUE) spc2 <- random_profile(2, SPC = TRUE) spc3 <- random_profile('A', SPC = TRUE)  # combine into a single SPC, ... interface spc <- combine(spc1, spc2, spc3)  # combine into a single SPC, list interface spc <- combine(list(spc1, spc2, spc3))  # input are combined into a single SPC spc <- c(spc1, spc2, spc3)  # result is a list when a mixture of objects are provided spc <- c(spc1, bar=spc2, baz=\"foo\")"},{"path":"https://ncss-tech.github.io/aqp/reference/compareSites.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Site Level Attributes of a SoilProfileCollection — compareSites","title":"Compare Site Level Attributes of a SoilProfileCollection — compareSites","text":"Compare site level attributes SoilProfileCollection object, returning distance matrix conformal output NCSP(). Values within range 0-1.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/compareSites.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Site Level Attributes of a SoilProfileCollection — compareSites","text":"","code":"compareSites(x, vars, weights = rep(1, times = length(vars)), ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/compareSites.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Site Level Attributes of a SoilProfileCollection — compareSites","text":"x SoilProfileCollection object vars character vector listing one site level attributes x weights numeric vector, length vars, variable weighting ... additional arguments cluster::daisy()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/compareSites.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Site Level Attributes of a SoilProfileCollection — compareSites","text":"dissimilarity / dist class object containing pair-wise distances, row/column names derived profile_id(x)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/compareSites.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Site Level Attributes of a SoilProfileCollection — compareSites","text":"function typically used conjunction output NCSP().","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/compositeSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list representation of site and horizon level data — compositeSPC","title":"Return a list representation of site and horizon level data — compositeSPC","text":"compositeSPC() convenience function returns named list representation columns @site @horizons slots.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/compositeSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list representation of site and horizon level data — compositeSPC","text":"","code":"compositeSPC(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/compositeSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a list representation of site and horizon level data — compositeSPC","text":"object SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/compositeSPC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list representation of site and horizon level data — compositeSPC","text":"list.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/compositeSPC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return a list representation of site and horizon level data — compositeSPC","text":"Andrew G. Brown.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/confusionIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Confusion Index — confusionIndex","title":"Confusion Index — confusionIndex","text":"Calculate confusion index Burrough et al., 1997.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/confusionIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confusion Index — confusionIndex","text":"","code":"confusionIndex(x)"},{"path":"https://ncss-tech.github.io/aqp/reference/confusionIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confusion Index — confusionIndex","text":"x vector probabilities (0,1), contain NA","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/confusionIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confusion Index — confusionIndex","text":"single numeric value.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/confusionIndex.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confusion Index — confusionIndex","text":"Burrough, P.., P.F.M. van Gaans, R. Hootsmans. 1997. \"Continuous Classification Soil Survey: Spatial Correlation, Confusion Boundaries.\" Geoderma 77: 115-35. doi:10.1016/S0016-7061(97)00018-9.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/confusionIndex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confusion Index — confusionIndex","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/confusionIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confusion Index — confusionIndex","text":"","code":"# a very simple example p <- c(0.25, 0.25, 0.4, 0.05, 0.05) confusionIndex(p) #> [1] 0.85  # for comparison shannonEntropy(p) #> [1] 1.960964"},{"path":"https://ncss-tech.github.io/aqp/reference/contrastChart.html","id":null,"dir":"Reference","previous_headings":"","what":"Color Contrast Chart — contrastChart","title":"Color Contrast Chart — contrastChart","text":"Compare one pages simulated Munsell book soil colors reference color.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/contrastChart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color Contrast Chart — contrastChart","text":"","code":"contrastChart(   m,   hues,   ccAbbreviate = 1,   style = \"hue\",   gridLines = FALSE,   de00.cex = 0.6,   cc.cex = 0.6,   thresh = NULL,   returnData = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/contrastChart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Color Contrast Chart — contrastChart","text":"m Munsell representation single color comparison e.g. '10YR 4/3' hues vector one Munsell hue pages display ccAbbreviate length abbreviated contrast classes, use 0 suppress labels style 'hue' 'CC', see details gridLines logical, add grid lines color contrast chart de00.cex character scaling applied dE00 annotation cc.cex character scaling applied contrast class annotation thresh threshold (<) applied pair-wise comparisons resulting color chips returnData logical, return lattice figure + data used generate figure","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/contrastChart.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Color Contrast Chart — contrastChart","text":"simulated Munsell color book page pages used demonstrate color contrast chips reference color m (highlighted red). NCSS color contrast class CIE delta-E00 values printed color chips. Munsell color chips chroma 5 7 omitted, axis labels retained reminder fact. Setting style='hue' emphasizes contrast classes CIE delta-E00 chips adjacent m. Setting style='CC' emphasizes adjacent chips according respective contrast class via lattice panels. Two-way panels used multiple hues provided style='CC'. default output can greatly enhanced via: latticeExtra::useOuterStrips(...,                                strip = strip.custom(bg=grey(0.85)),                                strip.left = strip.custom(bg=grey(0.85))                               )","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/contrastChart.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Color Contrast Chart — contrastChart","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/contrastChart.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color Contrast Chart — contrastChart","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # single hue page contrastChart(m = '10YR 3/3', hues = '10YR')   # multiple hue pages contrastChart(m = '10YR 3/3', hues = c('10YR', '2.5Y'))   # contrast class, single hue contrastChart(m = '10YR 3/3', hues = '10YR', style='CC')   # contrast class, multiple hues # consider latticeExtra::useOuterStrips() contrastChart(m = '10YR 5/6', hues = c('10YR', '2.5Y'), style='CC')"},{"path":"https://ncss-tech.github.io/aqp/reference/contrastClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Color Contrast — contrastClass","title":"Soil Color Contrast — contrastClass","text":"Determine soil color contrast class according methods outlined Soil Survey Manual. function typically called colorContrast() simpler use provides information.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/contrastClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Color Contrast — contrastClass","text":"","code":"contrastClass(v1, c1, v2, c2, dH, dV, dC, verbose = FALSE)"},{"path":"https://ncss-tech.github.io/aqp/reference/contrastClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soil Color Contrast — contrastClass","text":"v1 Munsell value first color c1 Munsell chroma first color v2 Munsell value second color c2 Munsell chroma second color dH delta Hue dV delta Value dC delta Chroma verbose return list testing rules/cases","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/contrastClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Soil Color Contrast — contrastClass","text":"vector color contrast classes (ordered factor). list verbose TRUE.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/contrastClass.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Color Contrast — contrastClass","text":"function fully vectorized expects inputs length.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/contrastClass.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soil Color Contrast — contrastClass","text":"Soil Survey Technical Note 2 wayback machine URL","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/contrastClass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Soil Color Contrast — contrastClass","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/contrastClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Color Contrast — contrastClass","text":"","code":"## standard use, result is an ordered factor # 10YR 6/3 vs 5YR 3/4 contrastClass(v1=6, c1=3, v2=3, c2=4, dH=2, dV=3, dC=1) #> [1] Prominent #> Levels: Faint < Distinct < Prominent  ## verbose output, useful for testing rules/cases # 10YR 6/3 vs 5YR 3/4 contrastClass(v1=6, c1=3, v2=3, c2=4, dH=2, dV=3, dC=1, verbose = TRUE) #> $faint #>   v1 c1 v2 c2 dH dV dC f.case1 f.case2 f.case3 low.value.chroma       res #> 1  6  3  3  4  2  3  1   FALSE   FALSE   FALSE            FALSE Prominent #>  #> $distinct #>   v1 c1 v2 c2 dH dV dC d.case1 d.case2 d.case3       res #> 1  6  3  3  4  2  3  1   FALSE   FALSE   FALSE Prominent #>"},{"path":"https://ncss-tech.github.io/aqp/reference/correctAWC.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply rock fragment or salt correction to available water content — correctAWC","title":"Apply rock fragment or salt correction to available water content — correctAWC","text":"Apply rock fragment salt correction available water content","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/correctAWC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply rock fragment or salt correction to available water content — correctAWC","text":"","code":"correctAWC(   awc,   total_rf = numeric(length(awc)),   gravel = NULL,   ec = NULL,   nullFragsAreZero = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/reference/correctAWC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply rock fragment or salt correction to available water content — correctAWC","text":"awc Numeric vector available water capacities (e.g. estimateAWC) total_rf Numeric vector  rock fragment volume percentage, 0 - 100 gravel Numeric vector gravel volume percentage, 0 - 100 ec Numeric vector electrical conductivity, mmhos/cm nullFragsAreZero Interpret NA total_rf, gravel ec 0? Default: TRUE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/correctAWC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply rock fragment or salt correction to available water content — correctAWC","text":"numeric vector (double) containing estimated available water capacities corrected rock fragments salts","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/correctAWC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply rock fragment or salt correction to available water content — correctAWC","text":"","code":"# medium organic matter, loam texture  base.awc <- 0.18 # estimateAWC(texcl = \"l\", omcl = 2, na.rm = TRUE)  # medium organic matter, loam texture w/ 23% rock fragments by volume  corrected.awc <- correctAWC(base.awc, total_rf = 23) corrected.awc #> [1] 0.15  # medium organic matter, loam texture w/ 0% frags by volume and 8 mmhos/cm salts salty.awc <- correctAWC(base.awc, total_rf = 0, ec = 8) salty.awc #> [1] 0.14"},{"path":"https://ncss-tech.github.io/aqp/reference/crit.clay.argillic.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","title":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","text":"Given vector matrix \"eluvial\" horizon clay contents (\\ crit.clay.argillic() returns vector matrix minimum clay contents (thresholds) must met argillic horizon clay increase.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/crit.clay.argillic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","text":"","code":"crit.clay.argillic(eluvial_clay_content)"},{"path":"https://ncss-tech.github.io/aqp/reference/crit.clay.argillic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","text":"eluvial_clay_content numeric vector matrix containing clay contents potential \"eluvial\" horizons. May contain NA.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/crit.clay.argillic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","text":"vector matrix (input-dependent) containing minimum \"illuvial\" horizon clay contents (thresholds) met argillic horizon clay increase.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/crit.clay.argillic.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","text":"Uses standard equations clay contents less 15 \\ 40 \\ definition argillic horizon 12th Edition Keys Soil Taxonomy (Soil Survey Staff, 2014).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/crit.clay.argillic.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","text":"function intended identifying clay content threshold required argillic horizon. thresholds may apply depending specifics soil. E.g. upper part argillic plowed (Ap immediately upper boundary) clay increase requirement can waived (Soil Survey Staff, 2014).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/crit.clay.argillic.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","text":"Soil Survey Staff. 2014. Keys Soil Taxonomy, 12th ed. USDA-Natural Resources Conservation Service, Washington, DC.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/crit.clay.argillic.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","text":"Andrew Gene Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/crit.clay.argillic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines threshold (minimum) clay content for argillic upper bound — crit.clay.argillic","text":"","code":"# crit.clay.argillic uses different equations for clay content # less than 15 %, between 15 and 40 %, and >40 %  crit.clay.argillic(eluvial_clay_content=c(5, 20, 45)) #> [1]  8 24 53"},{"path":"https://ncss-tech.github.io/aqp/reference/denormalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a (redundant) horizon-level attribute from a site-level attribute — denormalize","title":"Create a (redundant) horizon-level attribute from a site-level attribute — denormalize","text":"Create (redundant) horizon-level attribute site-level attribute. Specify SoilProfileCollection site-level attribute SPC (name) receive vector length equal number horizons containing site-level values. vector directly usable SoilProfileCollection horizon setter. denormalize inverse operation formula interface \"normalizes\" horizon level variable site level: site(object) <- ~ horizonvar","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/denormalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a (redundant) horizon-level attribute from a site-level attribute — denormalize","text":"","code":"denormalize(object, attr)"},{"path":"https://ncss-tech.github.io/aqp/reference/denormalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a (redundant) horizon-level attribute from a site-level attribute — denormalize","text":"object SoilProfileCollection attr Site-level attribute name (character string) denormalize horizon.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/denormalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a (redundant) horizon-level attribute from a site-level attribute — denormalize","text":"vector values equal length number rows horizon table input SPC.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/denormalize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a (redundant) horizon-level attribute from a site-level attribute — denormalize","text":"\"Denormalization\" process trying improve read performance database, expense losing write performance, adding redundant copies data grouping data. Sometimes beneficial site-level attributes denormalized grouping horizon-level data analyses. denormalize achieves result SoilProfileCollections.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/denormalize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a (redundant) horizon-level attribute from a site-level attribute — denormalize","text":"Andrew G. Brown, Dylan Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/denormalize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a (redundant) horizon-level attribute from a site-level attribute — denormalize","text":"","code":"data(sp1)  # create a SoilProfileCollection from horizon data depths(sp1) <- id ~ top + bottom  # create random site-level attribute `sitevar` with a binary (0/1) outcome sp1$sitevar <- round(runif(length(sp1)))  # use denormalize() to create a mirror of sitevar in the horizon table # name the attribute something different (e.g. `hz.sitevar`) to  # prevent collision with the site attribute # the attributes can have the same name but you will then need  # site() or horizons() to access explicitly sp1$hz.sitevar <- denormalize(sp1, 'sitevar')  # compare number of profiles to number of sitevar assignments length(sp1) #> [1] 9 table(sp1$sitevar) #>  #> 0 1  #> 6 3   # compare number of horizons to number of horizon-level copies of sitevar `hz.'sitevar` nrow(sp1) #> [1] 60 table(sp1$hz.sitevar) #>  #>  0  1  #> 39 21"},{"path":"https://ncss-tech.github.io/aqp/reference/depthOf.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top or bottom depths of horizons matching a regular expression pattern — depthOf","title":"Get top or bottom depths of horizons matching a regular expression pattern — depthOf","text":"depthOf family functions calculate depth occurrence horizon designation pattern, value can coerced character matched regular expression. need depths occurrence particular pattern, depthOf looking . minDepthOf maxDepthOf wrappers around depthOf return minimum maximum depth. set handle missing values missing \"contacts\" target pattern.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depthOf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top or bottom depths of horizons matching a regular expression pattern — depthOf","text":"","code":"depthOf(   p,   pattern,   FUN = NULL,   top = TRUE,   hzdesgn = hzdesgnname(p, required = TRUE),   no.contact.depth = NULL,   no.contact.assigned = NA_real_,   na.rm = TRUE,   simplify = TRUE )  maxDepthOf(   p,   pattern,   top = TRUE,   hzdesgn = hzdesgnname(p, required = TRUE),   no.contact.depth = NULL,   no.contact.assigned = NA,   na.rm = TRUE,   simplify = TRUE )  minDepthOf(   p,   pattern,   top = TRUE,   hzdesgn = hzdesgnname(p, required = TRUE),   no.contact.depth = NULL,   no.contact.assigned = NA,   na.rm = TRUE,   simplify = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/reference/depthOf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get top or bottom depths of horizons matching a regular expression pattern — depthOf","text":"p SoilProfileCollection pattern regular expression match horizon designation column. See:hzdesgn FUN function returns single value, takes argument na.rm top top (TRUE) bottom (FALSE) depth returned matching horizons? Default: TRUE. hzdesgn column name containing horizon designations. Default: guessHzDesgnName(p) .contact.depth depth assume contact occur. .contact.assigned depth assign contact occur. na.rm logical. Remove NA? (default: TRUE) simplify logical. Return single profile results vector (default: TRUE) data.frame (FALSE)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depthOf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get top or bottom depths of horizons matching a regular expression pattern — depthOf","text":"numeric vector containing specified depth(s) horizons matching pattern. length(p) > 1 data.frame containing profile ID, horizon ID, top bottom depths, horizon designation pattern.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depthOf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get top or bottom depths of horizons matching a regular expression pattern — depthOf","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depthOf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get top or bottom depths of horizons matching a regular expression pattern — depthOf","text":"","code":"# construct a fake profile spc <- data.frame(id=1, taxsubgrp = \"Lithic Haploxerepts\",                   hzname   = c(\"A\",\"AB\",\"Bw\",\"BC\",\"R\"),                   hzdept   = c(0,  20, 32, 42,  49),                   hzdepb   = c(20, 32, 42, 49, 200),                   clay     = c(19, 22, 22, 21,  NA),                   texcl    = c(\"l\",\"l\",\"l\", \"l\",\"br\"),                   d_value  = c(5,   5,  5,  6,  NA),                   m_value  = c(2.5, 3,  3,  4,  NA),                   m_chroma = c(2,   3,  4,  4,  NA))  # promote to SoilProfileCollection depths(spc) <- id ~ hzdept + hzdepb hzdesgnname(spc) <- 'hzname' hztexclname(spc) <- 'texcl'  # multiple horizons contain B depthOf(spc, \"B\") #> [1] 20 32 42  # deepest top depth of horizon containing B maxDepthOf(spc, \"B\") #> [1] 42  # shallowest top depth minDepthOf(spc, \"B\") #> [1] 20  # deepest bottom depth maxDepthOf(spc, \"B\", top = FALSE) #> [1] 49  # deepest bottom depth above 35cm maxDepthOf(spc, \"B\", top = FALSE, no.contact.depth = 35) #> [1] 32  # assign infinity (Inf) if B horizon does not start within 10cm minDepthOf(spc, \"B\", no.contact.depth = 10, no.contact.assigned = Inf) #> [1] Inf"},{"path":"https://ncss-tech.github.io/aqp/reference/depthWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a vector of contributing fractions over a depth interval — depthWeights","title":"Return a vector of contributing fractions over a depth interval — depthWeights","text":"depthWeights() calculates contributing fraction pair horizon top bottom depths, given upper lower boundary.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depthWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a vector of contributing fractions over a depth interval — depthWeights","text":"","code":"depthWeights(top, bottom, upper, lower)"},{"path":"https://ncss-tech.github.io/aqp/reference/depthWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a vector of contributing fractions over a depth interval — depthWeights","text":"top numeric vector horizon top depths. bottom numeric vector horizon bottom depths. upper unit length numeric vector upper boundary. lower unit length numeric vector lower boundary.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depthWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a vector of contributing fractions over a depth interval — depthWeights","text":"named list.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depthWeights.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return a vector of contributing fractions over a depth interval — depthWeights","text":"Andrew G. Brown.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depth_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Get depth units from metadata — depth_units,SoilProfileCollection-method","title":"Get depth units from metadata — depth_units,SoilProfileCollection-method","text":"Get units depth measurement metadata. Default value centimeters.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depth_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get depth units from metadata — depth_units,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' depth_units(object)  # S4 method for class 'SoilProfileCollection' depth_units(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/depth_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get depth units from metadata — depth_units,SoilProfileCollection-method","text":"object SoilProfileCollection value character, value representing units. Default 'cm'.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depth_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get depth units from metadata — depth_units,SoilProfileCollection-method","text":"","code":"data(sp5)  ## get depth units du <- depth_units(sp5)  # set alternate units; e.g. inches depth_units(sp5) <- 'in'  # replace original value (cm) depth_units(sp5) <- du"},{"path":"https://ncss-tech.github.io/aqp/reference/depths.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a SoilProfileCollection from data.frame — depths","title":"Initialize a SoilProfileCollection from data.frame — depths","text":"depths(<data.frame>) <- <formula>: Initialize SoilProfileCollection depths(<SoilProfileCollection>): Extract profile ID horizon depths SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a SoilProfileCollection from data.frame — depths","text":"","code":"# S4 method for class 'SoilProfileCollection' depths(x, hzID = FALSE, ...)  # S4 method for class 'SoilProfileCollection' depths(object) <- value  # S4 method for class 'data.frame' depths(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/depths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a SoilProfileCollection from data.frame — depths","text":"x SoilProfileCollection hzID Include horizon ID? Usually calculated (sorted) row index unless hzidname()<- called. Default: FALSE ... used object object promote SoilProfileCollection (inherits data.frame) value formula specifying unique profile ID, top bottom depth column names","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a SoilProfileCollection from data.frame — depths","text":"data.frame containing profile ID, top depth, bottom depth","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/depths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a SoilProfileCollection from data.frame — depths","text":"input horizon data, resulting profile order, sorted based unique profile ID top depth. ID columns converted character, depth columns converted integer. NA values exist top depths, prototype 1 horizon per profile ID returned, NA non-essential columns. input object 0 rows, prototype 0 horizons 0 rows, column names object, returned.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/depths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a SoilProfileCollection from data.frame — depths","text":"","code":"# load a SoilProfileCollection data(jacobs2000, package = \"aqp\")  depths(jacobs2000) #>      id top bottom #> 1  92-1   0     18 #> 2  92-1  18     43 #> 3  92-1  43     79 #> 4  92-1  79    130 #> 5  92-1 130    153 #> 6  92-1 153    156 #> 7  92-1 156    213 #> 8  92-2   0     18 #> 9  92-2  18     46 #> 10 92-2  46     84 #> 11 92-2  84    122 #> 12 92-2 122    145 #> 13 92-2 145    213 #> 14 92-3   0     15 #> 15 92-3  15     25 #> 16 92-3  25     64 #> 17 92-3  64     84 #> 18 92-3  84    112 #> 19 92-3 112    165 #> 20 92-3 165    175 #> 21 92-4   0     20 #> 22 92-4  20     53 #> 23 92-4  53     79 #> 24 92-4  79    130 #> 25 92-4 130    165 #> 26 92-4 165    185 #> 27 92-4 185    203 #> 28 92-5   0     28 #> 29 92-5  28     61 #> 30 92-5  61    109 #> 31 92-5 109    135 #> 32 92-5 135    183 #> 33 92-6   0     18 #> 34 92-6  18     46 #> 35 92-6  46     76 #> 36 92-6  76    104 #> 37 92-6 104    119 #> 38 92-6 119    168 #> 39 92-7   0     15 #> 40 92-7  15     41 #> 41 92-7  41     48 #> 42 92-7  48     61 #> 43 92-7  61     91 #> 44 92-7  91    132 #> 45 92-7 132    140 #> 46 92-7 140    152 ## init SoilProfileCollection objects from data.frame of horizon data  # load demo data data(sp1)  # promote to SPC depths(sp1) <- id ~ top + bottom  # plot plot(sp1)   # number of profiles length(sp1) #> [1] 9  # number of horizons nrow(sp1) #> [1] 60"},{"path":"https://ncss-tech.github.io/aqp/reference/diagnostic_hz.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set Diagnostic Horizon data in a SoilProfileCollection — diagnostic_hz,SoilProfileCollection-method","title":"Get or Set Diagnostic Horizon data in a SoilProfileCollection — diagnostic_hz,SoilProfileCollection-method","text":"Diagnostic horizons describe features soil relevant taxonomic classification. single profile may multiple diagnostic features horizons, may comprised multiple horizons. diagnostic_hz() (get method): Get diagnostic feature data SoilProfileCollection. diagnostic_hz<- (set method): Set diagnostic feature data SoilProfileCollection. profile ID column object (idname(object)) must present replacement value object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/diagnostic_hz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set Diagnostic Horizon data in a SoilProfileCollection — diagnostic_hz,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' diagnostic_hz(object)  # S4 method for class 'SoilProfileCollection' diagnostic_hz(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/diagnostic_hz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set Diagnostic Horizon data in a SoilProfileCollection — diagnostic_hz,SoilProfileCollection-method","text":"object SoilProfileCollection value object inheriting data.frame","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/diagnostic_hz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or Set Diagnostic Horizon data in a SoilProfileCollection — diagnostic_hz,SoilProfileCollection-method","text":"","code":"# load test data data(sp2)  # promote to SPC depths(sp2) <- id ~ top + bottom  # assign two profiles a zone related to the mollic epipedon newdata <- data.frame(id = c(\"hon-1\",\"hon-17\"),                       featkind = \"fixed-depth surface sample\",                       featdept = 0,                       featdepb = 18)  # do left join diagnostic_hz(sp2) <- newdata  # inspect site table: newvalue TRUE only for horizons #  with top depth equal to zero diagnostic_hz(sp2) #>       id                   featkind featdept featdepb #> 1  hon-1 fixed-depth surface sample        0       18 #> 2 hon-17 fixed-depth surface sample        0       18"},{"path":"https://ncss-tech.github.io/aqp/reference/dice-SoilProfileCollection-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Efficient Slicing of SoilProfileCollection Objects — dice,SoilProfileCollection-method","title":"Efficient Slicing of SoilProfileCollection Objects — dice,SoilProfileCollection-method","text":"Cut (\"dice\") soil horizons 1-unit thick slices. function replaces aqp::slice(), deprecated aqp 2.0.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/dice-SoilProfileCollection-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Efficient Slicing of SoilProfileCollection Objects — dice,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' dice(   x,   fm = NULL,   SPC = TRUE,   pctMissing = FALSE,   fill = FALSE,   strict = TRUE,   byhz = TRUE,   verbose = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/dice-SoilProfileCollection-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Efficient Slicing of SoilProfileCollection Objects — dice,SoilProfileCollection-method","text":"x SoilProfileCollection object fm optional formula describing top depths horizon level attributes include: integer.vector ~ var1 + var2 + var3 integer.vector ~ . include horizon level attributes. Specification integer.vector forces fill = TRUE. NULL profiles \"diced\" depth results include horizon level attributes. Note interpretation integer.vector (slice tops) SPC return diced SoilPrfolileCollection, FALSE data.frame horizon-level attributes pctMissing compute \"percent missing data\" slice (TRUE expect 6-8x longer run time) fill logical, fill empty placeholder horizons gaps within profiles, /, /interval specified fm. Automatically set TRUE LHS fm specified. Backwards compatibility slice maintained setting fill = TRUE without fm. strict perform horizon depth logic checking / flagging / removal byhz Evaluate horizon depth logic horizon level (TRUE) profile level (FALSE). Invalid depth logic invokes HzDepthLogicSubset removes offending profiles horizon records. verbose Print information object size/memory usage. Default: FALSE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/dice-SoilProfileCollection-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Efficient Slicing of SoilProfileCollection Objects — dice,SoilProfileCollection-method","text":"SoilProfileCollection object, data.frame SPC = FALSE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/dice-SoilProfileCollection-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Efficient Slicing of SoilProfileCollection Objects — dice,SoilProfileCollection-method","text":"large potentially messy collections may include missing horizon depth logic errors, consider using repairMissingHzDepths() dice(). Consider using accumulateDepths() invoking dice() collections may contain old-style O horizon notation (e.g. 5-0cm).","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/dice-SoilProfileCollection-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Efficient Slicing of SoilProfileCollection Objects — dice,SoilProfileCollection-method","text":"D.E. Beaudette .G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/dollarsign-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set data in column of horizon or site data in a SoilProfileCollection — $<-","title":"Set data in column of horizon or site data in a SoilProfileCollection — $<-","text":"Set data column accessed name spc$name. Column names profile ID shared site horizons. using $<-, length input output matching either number sites number horizons used determine slot new columns assigned . Use site(x)$name <- value  horizons(x)$name <- value explicit slot accessed.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/dollarsign-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set data in column of horizon or site data in a SoilProfileCollection — $<-","text":"","code":"# S4 method for class 'SoilProfileCollection' x$name <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/dollarsign-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set data in column of horizon or site data in a SoilProfileCollection — $<-","text":"x SoilProfileCollection name single column name site horizon table value Replacement values: unit length equal number horizons sites.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/dollarsign.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from column of horizon or site data in a SoilProfileCollection — $","title":"Get data from column of horizon or site data in a SoilProfileCollection — $","text":"Get data column accessed name x$name. Column names profile ID shared site horizons.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/dollarsign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from column of horizon or site data in a SoilProfileCollection — $","text":"","code":"# S4 method for class 'SoilProfileCollection' x$name"},{"path":"https://ncss-tech.github.io/aqp/reference/dollarsign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from column of horizon or site data in a SoilProfileCollection — $","text":"x SoilProfileCollection name single column name site horizon table","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/dollarsign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get data from column of horizon or site data in a SoilProfileCollection — $","text":"","code":"data(sp1)  depths(sp1) <- id ~ top + bottom  # get data from a column by name (prop) sp1$prop #>  [1] 13  7  9 14 21 NA  1  3  2  4 14 18 22 30 50  5  6  6 25 57  8 14 23 57  0 #> [26]  2  5  7  5  5  6 10 15 12  3  3  3  3  5  0  0  0  0  0  1  2  2  4  7  6 #> [51]  1  0  5  3  3  3  2 27  3  5"},{"path":"https://ncss-tech.github.io/aqp/reference/doublebracket-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Add or change column of horizon or site data in a SoilProfileCollection — [[<-","title":"Add or change column of horizon or site data in a SoilProfileCollection — [[<-","text":"Add change data column accessed name. Column names profile ID shared site horizons. benefit using double bracket setter $ name can calculated, whereas $, must known priori hard coded. using double bracket setter length input output matching either number sites number horizons used determine slot new columns assigned .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/doublebracket-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add or change column of horizon or site data in a SoilProfileCollection — [[<-","text":"","code":"# S4 method for class 'SoilProfileCollection' x[[i]] <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/doublebracket-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add or change column of horizon or site data in a SoilProfileCollection — [[<-","text":"x SoilProfileCollection expression resolving single column name site horizon table- value New value replace – unit length equal length number sites horizons collection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/doublebracket.html","id":null,"dir":"Reference","previous_headings":"","what":"Get column of horizon or site data in a SoilProfileCollection — [[","title":"Get column of horizon or site data in a SoilProfileCollection — [[","text":"Get data column accessed name. Column names profile ID shared site horizons. Bonus: [[ gives access site horizon level variables tab complete RStudio using magrittr pipe operator!","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/doublebracket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get column of horizon or site data in a SoilProfileCollection — [[","text":"","code":"# S4 method for class 'SoilProfileCollection' x[[i, j]]"},{"path":"https://ncss-tech.github.io/aqp/reference/doublebracket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get column of horizon or site data in a SoilProfileCollection — [[","text":"x SoilProfileCollection expression resolving single column name site horizon table j (used)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/doublebracket.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get column of horizon or site data in a SoilProfileCollection — [[","text":"","code":"data(sp2) depths(sp2) <- id ~ top + bottom site(sp2) <- ~ surface  # get with [[ sp2[['surface']] #>  [1] holocene        lower modesto   lower modesto   upper modesto   #>  [5] upper modesto   lower riverbank lower riverbank lower riverbank #>  [9] holocene        lower riverbank lower laguna    lower laguna    #> [13] holocene        holocene        upper modesto   upper modesto   #> [17] upper modesto   upper modesto   #> 6 Levels: holocene lower modesto upper modesto ... lower laguna  # get using \"unknown\" expression: #  \"2nd + 3rd horizon column names\" for(i in horizonNames(sp2)[2:3])  print(sp2[[i]]) #>   [1]   0  12  16  25  49  85  95 122 140   0  22  40  86 132 150 205   0  18 #>  [19]  45  94 125 145 179   0  24  33  50  62  86 102 123 157 208 245 266   0 #>  [37]  28  39  59  76 111 126 150 200 260   0  18  24  76 100 160 201 208   0 #>  [55]  19  30  90 113 170 190 240   0   7  24  63  91 126 176 218 246 268 300 #>  [73] 320   0   4  32  61  92 103   0  11  30  60 114 191 223 260   0  11  33 #>  [91]  46  71  93 119 148 197 274 315 473   0  23  43  59  89 120 154 207 270 #> [109] 342 455 505   0   4  16  31  54   0  17  32  49  86 113   0  13  23  54 #> [127]  88 102 141   0  10  22  43  91 118 157   0   8  30  54  88 118 180 230 #> [145] 290 340   0   7  34  57  90 126 191 240 #>   [1]   12   16   25   49   85   95  122  140  170   22   40   86  132  150  205 #>  [16]  225   18   45   94  125  145  179  220   24   33   50   62   86  102  123 #>  [31]  157  208  245  266  301   28   39   59   76  111  126  150  200  260  320 #>  [46]   18   24   76  100  160  201  208  295   19   30   90  113  170  190  240 #>  [61]  300    7   24   63   91  126  176  218  246  268  300  320  410    4   32 #>  [76]   61   92  103  130   11   30   60  114  191  223  260  283   11   33   46 #>  [91]   71   93  119  148  197  274  315  473 1300   23   43   59   89  120  154 #> [106]  207  270  342  455  505 1300    4   16   31   54   78   17   32   49   86 #> [121]  113  147   13   23   54   88  102  141  180   10   22   43   91  118  157 #> [136]  184    8   30   54   88  118  180  230  290  340  370    7   34   57   90 #> [151]  126  191  240  390  data(sp5)  # some column names to work with rgb.columns <- c(\"R25\",\"G25\",\"B25\")  res <- lapply(rgb.columns, function(x) {    # [[ allows you to access column names in a loop   round(sp5[[x]] * 255)  })  # rename scaled results names(res) <- paste0(rgb.columns,\"_scl\")  # add horizon ID to results result <- data.frame(hzID = hzID(sp5), do.call('cbind', res)) head(result) #>   hzID R25_scl G25_scl B25_scl #> 1    1     105      97      87 #> 2    2      79      71      64 #> 3    3      79      71      64 #> 4    4      79      71      64 #> 5    5     140     117      92 #> 6    6     110      94      76  # join result back into horizons horizons(sp5) <- result"},{"path":"https://ncss-tech.github.io/aqp/reference/duplicate.html","id":null,"dir":"Reference","previous_headings":"","what":"Duplicate Profiles of a SoilProfileCollection — duplicate","title":"Duplicate Profiles of a SoilProfileCollection — duplicate","text":"simple function duplicate contents SoilProfileCollection object. Old profile IDs saved site-level attribute (oldID) new IDs generated using numeric serial number.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/duplicate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Duplicate Profiles of a SoilProfileCollection — duplicate","text":"","code":"duplicate(x, times = 3, oldID = \".oldID\")"},{"path":"https://ncss-tech.github.io/aqp/reference/duplicate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Duplicate Profiles of a SoilProfileCollection — duplicate","text":"x SoilProfileCollection object 1 profiles times requested number copies oldID site-level attribute used store original profile IDs","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/duplicate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Duplicate Profiles of a SoilProfileCollection — duplicate","text":"SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/duplicate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Duplicate Profiles of a SoilProfileCollection — duplicate","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/duplicate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Duplicate Profiles of a SoilProfileCollection — duplicate","text":"","code":"# sample data data('sp4')  # promote to SPC depths(sp4) <- id ~ top + bottom  # duplicate each profile 2 times d <- duplicate(sp4, times = 2)  # graphical check par(mar = c(0, 0, 3, 1)) plotSPC(d, color = 'Ca', width = 0.25)"},{"path":"https://ncss-tech.github.io/aqp/reference/electroStatics_1D.html","id":null,"dir":"Reference","previous_headings":"","what":"Label placement based on a simulation of electrostatic forces — electroStatics_1D","title":"Label placement based on a simulation of electrostatic forces — electroStatics_1D","text":"function attempts move labels along 1D coordinate system overlap (specified threshold) minimized. electrostatic simulation applies forces repulsion labels within thresh (e.g. overlapping) forces attraction uniformly spaced sequence iteratively perturb affected labels either overlap reported, maximum number iterations (maxIter) reached.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/electroStatics_1D.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label placement based on a simulation of electrostatic forces — electroStatics_1D","text":"","code":"electroStatics_1D(   x,   thresh,   q = 1,   chargeDecayRate = 0.01,   QkA_GrowthRate = 0.05,   maxIter = 100,   tiny = 1e-04,   const = 0.001,   trace = FALSE,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/electroStatics_1D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label placement based on a simulation of electrostatic forces — electroStatics_1D","text":"x numeric vector, pre-sorted sorted, without duplication, describing 1D label (particle) configuration thresh numeric, overlap threshold, fixOverlap() q numeric, electrical charge (typically 0.1 2) chargeDecayRate numeric, exponential decay rate constant q function iteration QkA_GrowthRate numeric, growth rate constant Qk applied attraction uniform spacing labels, invoked rank order violated simulation maxIter integer, maximum number iterations giving tiny numeric, 0-values replaced number avoid division 0 infinite forces const numeric, empirical constant added 1D electrostatic force equation dampen oscillation: (Qk * Q1 * Q2) / (d^ex + const) trace logical, include diagnostic output ... used, absorbs additional arguments fixOverlap()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/electroStatics_1D.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label placement based on a simulation of electrostatic forces — electroStatics_1D","text":"trace = TRUE list, otherwise numeric vector converged attribute.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/electroStatics_1D.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Label placement based on a simulation of electrostatic forces — electroStatics_1D","text":"Difficult overlap problems can addressed reducing thresh increasing q. Large values q can lead chaotic results. function generate unpredictable output x contains duplicate values. function requires input pre-sorted, although interesting \"artistic\" simulations often result unsorted x.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/electroStatics_1D.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Label placement based on a simulation of electrostatic forces — electroStatics_1D","text":"D.E. Beaudette K.C. Thompson","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/electroStatics_1D.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label placement based on a simulation of electrostatic forces — electroStatics_1D","text":"","code":"# vector of object locations, with potential overlap x <- c(1, 2, 3, 3.3, 3.8, 5, 6, 7, 8, 9, 10)  # full diagnostic output z <- electroStatics_1D(x, thresh = 0.65, trace = TRUE, q = 1) #> 4 iterations txt <- sprintf(\"Converged %s (%s iterations)\", z$converged, length(z$cost))  plot( seq_along(z$cost), z$cost,  las = 1,  xlab = 'Iteration',  ylab = 'Overlap Cost',  type = 'b',  main = txt )  abline(h = 0, lty = 2, col = 2)   # final configuration only xnew <- electroStatics_1D(x, thresh = 0.65, q = 1) #> 4 iterations  # check for convergence attr(xnew, 'converged') #> [1] TRUE  # compare original vs. modified data.frame(orig = x, new = round(xnew, 2)) #>    orig   new #> 1   1.0  1.00 #> 2   2.0  2.00 #> 3   3.0  2.66 #> 4   3.3  3.35 #> 5   3.8  4.01 #> 6   5.0  5.00 #> 7   6.0  6.00 #> 8   7.0  7.00 #> 9   8.0  8.00 #> 10  9.0  9.00 #> 11 10.0 10.00"},{"path":"https://ncss-tech.github.io/aqp/reference/equivalentMunsellChips.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify ","title":"Identify ","text":"Uses pre-calculated lookup list (equivalent_munsell) based pair-wise CIE2000 contrast (dE00) LAB color D65 illuminant whole value/chroma \"chips\" aqp::munsell data set. intention identify Munsell chips may \"functionally equivalent\" given whole value/chroma chip elsewhere Munsell color space – discretized aqp::munsell data table. basic assumption needs validated end goal: probably visual inspection resulting sets. See colorContrast colorContrastPlot. \"Equivalent\" chips table based (fairly arbitrarily) 0.001 probability level dE00 (default Type 7 quantile) within upper triangle 8467x8467 contrast matrix. corresponds dE00 contrast threshold approximately 2.16.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/equivalentMunsellChips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify ","text":"","code":"equivalentMunsellChips(hue = NULL, value = NULL, chroma = NULL)"},{"path":"https://ncss-tech.github.io/aqp/reference/equivalentMunsellChips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify ","text":"hue character vector containing Munsell hues value numeric vector containing Munsell values (integer ) chroma numeric vector containing Munsell chromas (integer )","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/equivalentMunsellChips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify ","text":"named list; list element contains data.frame one rows \"equivalent\" Munsell, RGB LAB color coordinates munsell data set.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/equivalentMunsellChips.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Identify ","text":"Gaurav Sharma, Wencheng Wu, Edul N. Dalal. (2005). CIEDE2000 Color-Difference Formula: Implementation Notes, Supplementary Test Data, Mathematical Observations. COLOR research application. 30(1):21-30. http://www2.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf Thomas Lin Pedersen, Berendea Nicolae Romain François (2020). farver: High Performance Colour Space Manipulation. R package version 2.0.3. https://CRAN.R-project.org/package=farver Dong, C.E., Webb, J.B., Bottrell, M.C., Saginor, ., Lee, B.D. Stern, L.. (2020). Strengths, Limitations, Recommendations Instrumental Color Measurement Forensic Soil Characterization. J Forensic Sci, 65: 438-449. https://doi.org/10.1111/1556-4029.14193","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/equivalentMunsellChips.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify ","text":"","code":"# 7.5YR 4/4 (the one and only)  equivalentMunsellChips(\"7.5YR\", 4, 4) #> $`7.5YR 4/4` #>         hue value chroma         r         g         b        L        A #> 10272 7.5YR     4      4 0.4883971 0.3493621 0.2292437 40.92954 10.80541 #>             B #> 10272 23.4536 #>  #> #> $`7.5YR 4/4` #>        hue value chroma         r        g         b        L       A       B #> 8330 7.5YR     4      4 0.4923909 0.352334 0.2313328 41.26403 10.8689 23.5914  # 7.5YR 1/1 (two chips are equivalent; 3 row result)  equivalentMunsellChips(\"7.5YR\", 1, 1) #> $`7.5YR 1/1` #>         hue value chroma         r          g          b        L        A #> 2429   10YR     1      1 0.1182754 0.09463558 0.06480605 8.799815 1.508883 #> 7629    5YR     1      1 0.1243547 0.09150895 0.07401048 8.794574 3.351437 #> 10237 7.5YR     1      1 0.1204975 0.09325031 0.07142669 8.796391 2.375687 #>              B #> 2429  5.893931 #> 7629  4.503886 #> 10237 4.899861 #>  #> #> $`7.5YR 1/1` #>        hue value chroma         r         g          b        L        A        B #> 1983  10YR     1      1 0.1345633 0.1087014 0.07606787 10.64787 1.621323 6.847629 #> 6189   5YR     1      1 0.1330994 0.1076359 0.09450179 10.63901 2.489012 3.515146 #> 8303 7.5YR     1      1 0.1329483 0.1082380 0.08862581 10.64210 2.065514 4.623922  # 10YR 6/8 (two chips are equivalent; 3 row result)  equivalentMunsellChips(\"10YR\", 6, 8) #> $`10YR 6/8` #>       hue value chroma         r         g         b        L        A        B #> 2493 10YR     6      7 0.7364297 0.5498795 0.2672417 61.62420 10.49531 44.70802 #> 2494 10YR     6      8 0.7501230 0.5458205 0.2150955 61.63119 11.81028 51.06040 #> 2495 10YR     6      9 0.7623813 0.5419402 0.1554428 61.63707 13.07052 57.38919 #>  #> #> $`10YR 6/8` #>       hue value chroma         r         g         b        L        A        B #> 2039 10YR     6      7 0.7382230 0.5512957 0.2680260 61.76795 10.50886 44.78574 #> 2040 10YR     6      8 0.7519872 0.5472116 0.2157209 61.77496 11.83215 51.15496 #> 2041 10YR     6      9 0.7642826 0.5433189 0.1559069 61.78085 13.09599 57.49773  # compare visually a very red color  veryred <- equivalentMunsellChips(\"10R\", 6, 28)[[1]]  par(mar=c(0,0,1,1))  pie(rep(1, nrow(veryred)), col = with(veryred, munsell2rgb(hue, value, chroma)),     label = with(veryred, sprintf(\"%s %s/%s\", hue, value, chroma)))   table(veryred$hue) # 2 hues #>  #>  10R 7.5R  #>    7   17  #>  #>  10R 7.5R  #>    8   17  table(veryred$value) # 2 values #>  #>  5  6  #> 10 14  #>  #>  5  6  #> 11 14  table(veryred$chroma) # 10 chromas #>  #> 21 22 23 24 25 26 27 28 29 30  #>  1  2  2  2  3  4  3  3  2  2  #>  #> 21 22 23 24 25 26 27 28 29 30  #>  1  2  2  3  3  4  3  3  2  2"},{"path":"https://ncss-tech.github.io/aqp/reference/equivalent_munsell.html","id":null,"dir":"Reference","previous_headings":"","what":"Indices of ","title":"Indices of ","text":"pre-calculated lookup list (made farver::compare_colour) based pair-wise color contrast (CIE2000 dE00) evaluated \"chips\" aqp::munsell data set. intention identify Munsell chips may \"functionally equivalent\" given whole chip elsewhere Munsell color space – discretized aqp::munsell lookup table. \"Equivalent\" chips based (fairly arbitrarily) 0.001 probability level dE00 (default Type 7 quantile) within upper triangle 8467x8467 contrast matrix. corresponds dE00 threshold approximately 2.15. naive (subtleties human color perception, overall magnitude contrast \"chips\") computationally consistent approach. Using lookup list, opposed manual contrast via e.g. farver::compare_colour may benefits efficiency certain applications exact contrast value important concept threshold non-zero, small.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/equivalent_munsell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indices of ","text":"","code":"data(equivalent_munsell)"},{"path":"https://ncss-tech.github.io/aqp/reference/equivalent_munsell.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Indices of ","text":"named list 8467 elements, containing numeric vector indices corresponding munsell data set, 8467 rows (unique, whole-number chips). Names format HUE VALUE/CHROMA, e.g. \"7.5YR 4/4\"","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/equivalent_munsell.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Indices of ","text":"Gaurav Sharma, Wencheng Wu, Edul N. Dalal. (2005). CIEDE2000 Color-Difference Formula: Implementation Notes, Supplementary Test Data, Mathematical Observations. COLOR research application. 30(1):21-30. http://www2.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf Thomas Lin Pedersen, Berendea Nicolae Romain Francois (2020). farver: High Performance Colour Space Manipulation. R package version 2.0.3. https://CRAN.R-project.org/package=farver Dong, C.E., Webb, J.B., Bottrell, M.C., Saginor, ., Lee, B.D. Stern, L.. (2020). Strengths, Limitations, Recommendations Instrumental Color Measurement Forensic Soil Characterization. J Forensic Sci, 65: 438-449. https://doi.org/10.1111/1556-4029.14193","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/equivalent_munsell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indices of ","text":"","code":"data(equivalent_munsell)"},{"path":"https://ncss-tech.github.io/aqp/reference/estimateAWC.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate available water capacity for fine-earth fraction — estimateAWC","title":"Estimate available water capacity for fine-earth fraction — estimateAWC","text":"Estimate available water capacity fine-earth fraction","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateAWC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate available water capacity for fine-earth fraction — estimateAWC","text":"","code":"estimateAWC(texcl, omcl, precision = 2, FUN = mean, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/estimateAWC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate available water capacity for fine-earth fraction — estimateAWC","text":"texcl character, USDA textural class fine earth fraction omcl integer, Organic matter class. 1: less 1.5 percent, 2: less 5, 3: greate 5 precision integer, Number decimal places result default: 2 FUN Function interpolating table values default: mean ... Additional arguments FUN","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateAWC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate available water capacity for fine-earth fraction — estimateAWC","text":"numeric vector double containing estimated available water capacities fine-earth fraction.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateAWC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate available water capacity for fine-earth fraction — estimateAWC","text":"","code":"# organic matter, loam texture, low medium and high OM base.awc <- estimateAWC(c(\"l\",\"l\",\"l\"), c(1, 2, 3), na.rm = TRUE) base.awc #> [1] 0.17 0.18 0.21"},{"path":"https://ncss-tech.github.io/aqp/reference/estimatePSCS.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate boundaries of the U.S Soil Taxonomy Particle Size Control Section — estimatePSCS","title":"Estimate boundaries of the U.S Soil Taxonomy Particle Size Control Section — estimatePSCS","text":"Estimates upper lower boundary particle size control section Mineral Organic soilsby applying programmatic version particle size control section key Keys Soil Taxonomy (13th edition). See details assumptions required data elements.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimatePSCS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate boundaries of the U.S Soil Taxonomy Particle Size Control Section — estimatePSCS","text":"","code":"estimatePSCS(   p,   hzdesgn = hzdesgnname(p, required = TRUE),   clay.attr = hzmetaname(p, \"clay\", required = TRUE),   texcl.attr = hztexclname(p, required = TRUE),   lieutex = hzmetaname(p, \"lieutex\"),   tax_order_field = \"tax_order\",   bottom.pattern = \"Cr|R|Cd|m\",   simplify = TRUE,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/estimatePSCS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate boundaries of the U.S Soil Taxonomy Particle Size Control Section — estimatePSCS","text":"p SoilProfileCollection hzdesgn Name horizon attribute containing horizon designation. Default hzdesgnname(p, required = TRUE) clay.attr Name horizon attribute containing clay contents. Default hzmetaname(p, \"clay\", required = TRUE) texcl.attr Name horizon attribute containing textural class (used finding sandy textures). Default hztexclname(p, required = TRUE) lieutex Optional data element used addition horizon designation identify kinds organic soil material soils organic surfaces. Default: hzmetaname(p, \"lieutex\") tax_order_field Name site attribute containing taxonomic order; handling PSCS rules Andisols lieu lab data. May NA column missing altogether, case Andisol PSC possibility ignored. bottom.pattern Regular expression pattern match root-restrictive contact. Default matches Cr, R, Cd m. argument passed minDepthOf() getArgillicBounds(). simplify Return length 2 vector upper lower boundary p length 1? Default TRUE. ... additional arguments passed getArgillicBounds()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimatePSCS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate boundaries of the U.S Soil Taxonomy Particle Size Control Section — estimatePSCS","text":"numeric vector (simplify=TRUE) containing top bottom depth particle size control section. First value top, second value bottom. p contains one profile, result data.frame profile ID plus PSCS top bottom depths.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimatePSCS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate boundaries of the U.S Soil Taxonomy Particle Size Control Section — estimatePSCS","text":"Requires information identify argillic horizons (clay contents, horizon designations) getArgillicBounds() well presence plow layers surface organic soil material. getArgillicBounds() arguments may passed estimatePSCS. Also, requires information taxonomic order handle Andisols. aqp 2.1, particle size control sections organic soils Histosols Histels supported. requires setting \"lieutex\" horizon metadata column using hzmetaname<-() Horizon designations containing \"f\" \"W\"  recognized permafrost water layers, respectively, application organic soils key control sections. lieu textures \"SPM\" \"PEAT\" used identify low density organic materials used surface tier thickness. avoid using 160 cm surface tier, set \"lieutex\" column column contain \"SPM\" \"PEAT\" values. WARNING: Soils arenic grossarenic subgroups, fragipans, strongly contrasting PSCs may classified correctly. author welcome dataset develop functionality .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimatePSCS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Estimate boundaries of the U.S Soil Taxonomy Particle Size Control Section — estimatePSCS","text":"Soil Survey Staff. 2014. Keys Soil Taxonomy, 12th ed. USDA-Natural Resources Conservation Service, Washington, DC.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/estimatePSCS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate boundaries of the U.S Soil Taxonomy Particle Size Control Section — estimatePSCS","text":"Andrew Gene Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimatePSCS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate boundaries of the U.S Soil Taxonomy Particle Size Control Section — estimatePSCS","text":"","code":"data(sp1, package = 'aqp') depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  # set required metadata hzdesgnname(sp1) <- 'name' hztexclname(sp1) <- 'texture' hzmetaname(sp1, 'clay') <- 'prop'  x <- estimatePSCS(sp1) x #>     id pscs_top pscs_bottom #> 1 P001       49          89 #> 2 P002       30          59 #> 3 P003        2          52 #> 4 P004       32          62 #> 5 P005        5          55 #> 6 P006       31         106 #> 7 P007       25         100 #> 8 P008       27         102 #> 9 P009       28         103  # change horizon texture and set inlieu texture column to turn # first profile into an organic soil sp1$name[1:6] <- c(\"Oi1\", \"Oi2\", \"Oi3\", \"Oaf\", \"Cf1\", \"Cf2\") sp1$texture <- as.character(sp1$texture) sp1$texture[1:6] <- c(\"PEAT\", \"PEAT\", \"PEAT\", \"MUCK\", \"GRVLS\", \"GRVLS\") sp1$bottom[6] <- 200 hzmetaname(sp1, 'lieutex') <- 'texture'  y <- estimatePSCS(sp1[1, ], simplify = FALSE)  # 74cm lower boundary is 25cm past the upper boundary of permafrost (49cm) # but minimum depth is 100cm unless there is a root-limiting layer y #>     id pscs_top pscs_bottom #> 1 P001        0         100"},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilColor.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate dry soil colors from moist soil colors and vice versa. — estimateSoilColor","title":"Estimate dry soil colors from moist soil colors and vice versa. — estimateSoilColor","text":"Soil color typically described dry moist conditions. function attempts estimate soil color dry moist condition one missing. Estimation proceeds : convert Munsell notation CIELAB color coordinates via munsell2rgb() apply scaling, rotation, translation parameters CIELAB color space locate closest Munsell chip CIELAB coordinates via col2munsell() Estimation dry moist soil color state guaranteed symmetric estimation moist dry.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilColor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate dry soil colors from moist soil colors and vice versa. — estimateSoilColor","text":"","code":"estimateSoilColor(hue, value, chroma, sourceMoistureState = c(\"dry\", \"moist\"))"},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilColor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate dry soil colors from moist soil colors and vice versa. — estimateSoilColor","text":"hue vector Munsell hue ('10YR', '2.5Y', etc.) value vector Munsell value (2,2.5 2.5, 3, 5, 6, etc.) chroma vector Munsell chroma (2, 3, 4, etc.) sourceMoistureState character, source colors either 'dry' 'moist'","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilColor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate dry soil colors from moist soil colors and vice versa. — estimateSoilColor","text":"data.frame estimated colors Munsell notation. sigma column contains CIE2000 color contrast metric values describing perceptual distance estimated color CIELAB coordinates closest Munsell chip.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilColor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate dry soil colors from moist soil colors and vice versa. — estimateSoilColor","text":"Scaling, rotation, translation parameters shifting dry <–> moist CIELAB coordinates determined using vegan::procrustes(), official series descriptions (OSD) moist dry soil colors available. Estimates colors (dry moist) Munsell value 10 likely correct. still work progress.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilColor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate dry soil colors from moist soil colors and vice versa. — estimateSoilColor","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilColor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate dry soil colors from moist soil colors and vice versa. — estimateSoilColor","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  estimateSoilColor(hue = '10YR', value = 3, chroma = 3, sourceMoistureState = 'moist') #>    hue value chroma    sigma #> 1 10YR     5      3 3.883131  # note that estimation is not symmetric estimateSoilColor(hue = '10YR', value = 5, chroma = 3, sourceMoistureState = 'dry') #>    hue value chroma    sigma #> 1 10YR     4      3 4.144553"},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilDepth.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Soil Depth — estimateSoilDepth","title":"Estimate Soil Depth — estimateSoilDepth","text":"Estimate soil depth single profile within SoilProfileCollection object. function typically called profileApply().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilDepth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Soil Depth — estimateSoilDepth","text":"","code":"estimateSoilDepth(   f,   name = hzdesgnname(f),   p = \"Cr|R|Cd\",   selection = min,   no.contact.depth = NULL,   no.contact.assigned = NULL )"},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilDepth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Soil Depth — estimateSoilDepth","text":"f SoilProfileCollection object length 1, e.g. single profile name name column contains horizon designations p REGEX pattern determining \"contact\", depth morphologic feature (e.g. Bt) selection R function applied presence multiple matching horizons: min (default), max, mean, etc. .contact.depth absence contact matching p, depth can assume standard depth--contact .contact.assigned value assigned contact encountered .contact.depth","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilDepth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Soil Depth — estimateSoilDepth","text":"single value representing depth contact .contact.assigned","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilDepth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Soil Depth — estimateSoilDepth","text":"choice selection function usually follows: min: top first matching horizon, max: top bot last matching horizon, possibly mean: somewhere -.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilDepth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Soil Depth — estimateSoilDepth","text":"D.E. Beaudette J.M. Skovlin","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/estimateSoilDepth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Soil Depth — estimateSoilDepth","text":"","code":"## consider a situation where there were multiple candidate ## \"contacts\": 2 Cd horizons over an R  # init hypothetical profile d <- data.frame(   id = '1',   top = c(0, 10, 20, 30, 40, 50, 60),   bottom = c(10, 20, 30, 40, 50, 60, 80),   name = c('A', 'Bt1', 'Bt2', 'BC', 'Cd1', 'Cd2', 'R'),   stringsAsFactors = FALSE )  # upgrade to SPC depths(d) <- id ~ top + bottom  # init horizon designation hzdesgnname(d) <- 'name'  # visual check par(mar = c(0, 0, 0, 2)) plotSPC(d, hz.depths = TRUE, name.style = 'center-center', cex.names = 1, width = 0.1)   # top of the first Cd estimateSoilDepth(d, name = 'name') #> [1] 40  # top of the first Cd estimateSoilDepth(d, name = 'name', selection = min) #> [1] 40  # top of the R estimateSoilDepth(d, name = 'name', selection = max) #> [1] 60  # top of the second Cd estimateSoilDepth(d, name = 'name', selection = max, p = 'Cd') #> [1] 50   ## another example  data(sp1) depths(sp1) <- id ~ top + bottom  # init horizon designation hzdesgnname(d) <- 'name'  # apply to each profile in a collection, and save as site-level attribute sp1$depth <- profileApply(sp1, estimateSoilDepth, name='name')  # this function can be used to \"find\" depth to any feature  # that can be defined via REGEX pattern matching on the horizon name # for example, locate the depth to the top \"Bt\" horizon # returning NA when there is no match sp1$top_Bt <- profileApply(   sp1, estimateSoilDepth,    name='name',    p='Bt',    no.contact.depth=0,    no.contact.assigned=NA )  # reduced margins par(mar=c(1,1,1,2)) # adjust default y-offset and depth scaling for following examples plotSPC(sp1, y.offset=10, scaling.factor=0.5)  # get plotting parameters for profile widths and depth scaling factors lsp <- get(\"last_spc_plot\", envir = aqp.env)  # positions on x-axis, same for both depth and top \"Bt\" horizon x.positions <- (1:length(sp1)) - lsp$width  # annotate contact with unicode right-arrow # y-position is adjusted based on plot y-offset and scaling factor y.positions <- lsp$y.offset + (sp1$depth * lsp$scaling.factor) text(x.positions, y.positions, '\\u2192', col='red', adj=1, cex=1.25, lwd=2)  # annotate top \"Bt\" depth with unicode right-arrow # y-position is adjusted based on plot y-offset and scaling factor y.positions <- lsp$y.offset + (sp1$top_Bt * lsp$scaling.factor) text(x.positions, y.positions, '\\u2192', col='blue', adj=1, cex=1.25, lwd=2)    if (FALSE) { # \\dontrun{   # sample data   data(gopheridge, package='soilDB')      # run on a single profile   estimateSoilDepth(gopheridge[1, ], name = 'hzname')      # apply to an entire collection   profileApply(gopheridge, estimateSoilDepth, name = 'hzname') } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/evalGenHZ.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Generalized Horizon Labels — evalGenHZ","title":"Evaluate Generalized Horizon Labels — evalGenHZ","text":"Data-driven evaluation generalized horizon labels using nMDS silhouette width.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/evalGenHZ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Generalized Horizon Labels — evalGenHZ","text":"","code":"evalGenHZ(   obj,   genhz = GHL(obj, required = TRUE),   vars,   non.matching.code = \"not-used\",   stand = TRUE,   metric = \"euclidean\" )"},{"path":"https://ncss-tech.github.io/aqp/reference/evalGenHZ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Generalized Horizon Labels — evalGenHZ","text":"obj SoilProfileCollection object genhz name horizon-level attribute containing generalized horizon labels vars character vector horizon-level attributes include evaluation non.matching.code code used represent horizons assigned generalized horizon label stand standardize variables computing distance matrix, passed cluster::daisy() metric distance metric, passed cluster::daisy()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/evalGenHZ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Generalized Horizon Labels — evalGenHZ","text":"list returned containing: horizons: c('mds.1', mds.2', 'sil.width', 'neighbor') stats: mean standard deviation vars, computed generalized horizon label dist: distance matrix passed stats::cmdscale()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/evalGenHZ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Generalized Horizon Labels — evalGenHZ","text":"Classic multidimensional scaling performed via stats::cmdscale(). input distance matrix generated cluster::daisy() using (complete cases ) horizon-level attributes obj named vars. Silhouette widths computed via cluster::silhouette(). input distance matrix generated cluster::daisy() using (complete cases ) horizon-level attributes obj named vars. Note observations genhz labels specified non.matching.code removed filtered calculation distance matrix.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/evalGenHZ.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluate Generalized Horizon Labels — evalGenHZ","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/evalMissingData.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Missing Data within a SoilProfileCollection — evalMissingData","title":"Evaluate Missing Data within a SoilProfileCollection — evalMissingData","text":"Evaluate missing data within SoilProfileCollection object Data completeness evaluated profile horizon. Profile-level evaluation based thickness horizons (method = absolute) complete horizon-level attributes (vars), optionally divided total thickness (method = relative). REGEX pattern (p) used filter non-soil horizons calculation.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/evalMissingData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Missing Data within a SoilProfileCollection — evalMissingData","text":"","code":"evalMissingData(   x,   vars,   name = hzdesgnname(x),   p = \"Cr|R|Cd\",   method = c(\"relative\", \"absolute\", \"horizon\") )"},{"path":"https://ncss-tech.github.io/aqp/reference/evalMissingData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Missing Data within a SoilProfileCollection — evalMissingData","text":"x SoilProfileCollection object vars character vector, naming horizon-level attributes x name character, name horizon-level attribute horizon designations stored, defaults hzdesgnname(x) p character, REGEX pattern used match non-soil horizons method character, one : 'relative' (proportion total) depth, 'absolute' depth, 'horizon' (fraction -missing horizon)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/evalMissingData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Missing Data within a SoilProfileCollection — evalMissingData","text":"vector values ranging 0 1 (method = 'relative') 0 maximum depth specified depth units (method = 'absolute') representing quantity non-missing data (specified vars) profile. method = 'horizon' non-missing data fraction returned horizon.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/evalMissingData.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluate Missing Data within a SoilProfileCollection — evalMissingData","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/evalMissingData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Missing Data within a SoilProfileCollection — evalMissingData","text":"","code":"# example data data(\"jacobs2000\")  # fully populated plotSPC(jacobs2000, name.style = 'center-center',          cex.names = 0.8, color = 'time_saturated')   # missing some data plotSPC(jacobs2000, name.style = 'center-center',          cex.names = 0.8, color = 'concentration_color')   # very nearly complete plotSPC(jacobs2000, name.style = 'center-center',          cex.names = 0.8, color = 'matrix_color')    # variables to consider v <- c('time_saturated', 'concentration_color', 'matrix_color')  # compute data completeness by profile # ignore 2C horizons jacobs2000$data.complete <- evalMissingData(   jacobs2000,    vars = v,    method = 'relative',   p = '2C' )  jacobs2000$data.complete.abs <- evalMissingData(   jacobs2000,    vars = v,    method = 'absolute',   p = '2C' )  # compute data completeness by horizon # ignore 2C horizons jacobs2000$hz.data.complete <- evalMissingData(   jacobs2000,    vars = v,    method = 'horizon',   p = '2C' )   # \"fraction complete\" by horizon plotSPC(   jacobs2000, name.style = 'center-center',    cex.names = 0.8, color = 'hz.data.complete' )    # rank on profile completeness new.order <- order(jacobs2000$data.complete)  # plot along data completeness ranking plotSPC(   jacobs2000, name.style = 'center-center',    cex.names = 0.8, color = 'concentration_color',    plot.order = new.order )  # add relative completeness axis # note re-ordering of axis labels axis(   side = 1, at = 1:length(jacobs2000),    labels = round(jacobs2000$data.complete[new.order], 2),   line = 0, cex.axis = 0.75 )  # add absolute completeness (cm) axis(   side = 1, at = 1:length(jacobs2000),    labels = jacobs2000$data.complete.abs[new.order],   line = 2.5, cex.axis=0.75 )"},{"path":"https://ncss-tech.github.io/aqp/reference/explainPlotSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual Explanation for plotSPC — explainPlotSPC","title":"Visual Explanation for plotSPC — explainPlotSPC","text":"Create visual explanation many arguments plotSPC. Call function instead plotSPC, objects x passed plotSPC. Nearly figures Introduction SoilProfileCollection Objects tutorial created function.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/explainPlotSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual Explanation for plotSPC — explainPlotSPC","text":"","code":"explainPlotSPC(x, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/explainPlotSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual Explanation for plotSPC — explainPlotSPC","text":"x SoilProfileCollection object ... arguments passed plotSPC","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/explainPlotSPC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual Explanation for plotSPC — explainPlotSPC","text":"list internally-used ordering vectors graphical offsets / scaling factors","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/explainPlotSPC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visual Explanation for plotSPC — explainPlotSPC","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/explainPlotSPC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visual Explanation for plotSPC — explainPlotSPC","text":"","code":"# sample data data(sp4) depths(sp4) <- id ~ top + bottom  # proposed vector of relative positions, overlap likely pos <- c(1, 1.1, 3, 4, 5, 5.2, 7, 8, 9, 10)  # try it explainPlotSPC(sp4, name = 'name', relative.pos=pos)   # attempt to fix using an integer sequence, short-circut will prevent adjustments explainPlotSPC(sp4, name = 'name', relative.pos = fixOverlap(1:10))   # attempt to adjust using defaults explainPlotSPC(sp4, name = 'name', relative.pos = fixOverlap(pos)) #> 28 iterations   # attempt to adjust and tinker with defaults explainPlotSPC(sp4, name = 'name', relative.pos = fixOverlap(pos, adj = 0.2)) #> 51 iterations   # enforce larger space between explainPlotSPC(sp4, name = 'name', relative.pos = fixOverlap(pos, thresh = 0.7)) #> 28 iterations   # more complex adjustments required pos <- c(1, 2, 3, 3.3, 5, 5.1, 5.5, 8, 9, 10)  # tinker explainPlotSPC(sp4, name = 'name', relative.pos = pos)  explainPlotSPC(sp4, name = 'name', relative.pos = fixOverlap(pos)) #> 17 iterations   explainPlotSPC(sp4, name = 'name', relative.pos = fixOverlap(pos,  thresh = 0.7)) #> 103 iterations   explainPlotSPC(sp4, name = 'name', relative.pos = fixOverlap(pos,  thresh = 0.7, adj = 0.2)) #> 333 iterations   # SANN: solution requires many iterations, and will not always converge explainPlotSPC(sp4, name = 'name',  relative.pos = fixOverlap(pos, thresh = 0.85, adj = 0.2) ) #> 65 iterations   # electrostatics: solution requires larger charge (q) explainPlotSPC(sp4, name = 'name',  relative.pos = fixOverlap(pos, thresh = 0.85, method = 'E', q = 2) ) #> 5 iterations"},{"path":"https://ncss-tech.github.io/aqp/reference/fillHzGaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and Fill Horizon Gaps — fillHzGaps","title":"Find and Fill Horizon Gaps — fillHzGaps","text":"function attempts find \"gaps\" horizon records SoilProfileCollection object fill placeholder horizons (profile ID, horizon ID, /bottom depths, else NA). Missing horizon records top profile to_top, bottom profile to_bottom treated gaps arguments NULL. can use function prepare potentially messy SoilProfileCollection subsequent analyses sensitive horizon sequence inconsistencies require conformal \"rectangle\" data spanning known depths. Gaps defined : within profile, horizons n_hz: bottom_i != top_i+1 (= 1:(n_hz - 1)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fillHzGaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and Fill Horizon Gaps — fillHzGaps","text":"","code":"fillHzGaps(x, flag = TRUE, to_top = 0, to_bottom = max(x))"},{"path":"https://ncss-tech.github.io/aqp/reference/fillHzGaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and Fill Horizon Gaps — fillHzGaps","text":"x SoilProfileCollection object flag logical, flag empty horizons added. default: TRUE to_top numeric, fill shallowest top depth profile specified depth? default: 0 to_bottom numeric, fill deepest bottom depth profile specified depth? default: aqp::max(x)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fillHzGaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find and Fill Horizon Gaps — fillHzGaps","text":"possibly modified SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fillHzGaps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find and Fill Horizon Gaps — fillHzGaps","text":".G. Brown D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fillHzGaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and Fill Horizon Gaps — fillHzGaps","text":"","code":"data(sp4) depths(sp4) <- id ~ top + bottom  # introduce depth logic errors idx <- c(2, 6:7, 8, 12) sp4$top[idx] <- NA  # check horizons(sp4)[idx, ] #>          id name top bottom   K   Mg  Ca CEC_7 ex_Ca_to_Mg sand silt clay   CF #> 2    colusa  ABt  NA      8 0.2 23.7 5.6  21.4        0.23   42   31   27 0.27 #> 6     glenn   Bt  NA     34 0.3 18.9 4.5  27.5        0.20   49   18   34 0.84 #> 7     kings    A  NA      4 0.2 12.1 1.4  23.7        0.58   43   55    3 0.50 #> 8     kings  Bt1  NA     13 0.6 12.1 7.0  18.0        0.51   36   49   15 0.75 #> 12 mariposa  Bt2  NA     34 0.3 44.3 6.2  34.1        0.14   36   33   31 0.71 #>    hzID #> 2     2 #> 6     6 #> 7     7 #> 8     8 #> 12   12  # create gaps by removing logic errors x <- HzDepthLogicSubset(sp4, byhz = TRUE) #> dropping horizons with invalid depth logic, see `metadata(x)$removed.horizons`  # check on removed horizons (hzID values) metadata(x)$removed.horizons #> [1] \"2\"  \"6\"  \"7\"  \"8\"  \"12\"  # inspect par(mar = c(0, 0, 0, 2)) plotSPC(x, width = 0.3, default.color = 'royalblue',  name = 'hzID', name.style = 'center-center', cex.names = 0.8, cex.id = 0.66)   # fill gaps left by HzDepthLogicSubset() z <- fillHzGaps(x, flag = TRUE)  # graphical check plotSPC(z, width = 0.3, color = '.filledGap', name = 'hzID',  show.legend = FALSE, name.style = 'center-center', cex.names = 0.8, cex.id = 0.66)   # fill top to 0 cm z2 <- fillHzGaps(x, flag = TRUE, to_top = 0) plotSPC(z2, width = 0.3, color = '.filledGap', name = 'hzID', show.legend = FALSE)   # fill bottom to max(SPC) z3 <- fillHzGaps(x, flag = TRUE, to_top = 0, to_bottom = max(x)) plotSPC(z3, width = 0.3, color = '.filledGap', name = 'hzID', show.legend = FALSE)  ## another example data(sp4) depths(sp4) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing.  # remove 1st horizons from profiles 1:4 idx <- sp4[,, .FIRST, .HZID] replaceHorizons(sp4) <- horizons(sp4)[-idx[1:4], ]  # prepare for dice() z <- fillHzGaps(sp4, to_top = 0, to_bottom = 50, flag = TRUE)   # empty-horizon padding is in place for formula interface to dice() d <- dice(z, fm = 0:50 ~ .) #> dropping horizons with invalid depth logic, see `metadata(x)$removed.horizons` #> filling gaps left by HzDepthLogicSubset plotSPC(d, color = 'Ca', show.legend = FALSE)  plotSPC(d, color = '.filledGap', show.legend = FALSE)"},{"path":"https://ncss-tech.github.io/aqp/reference/fixOverlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Fix Overlap within a Sequence — fixOverlap","title":"Fix Overlap within a Sequence — fixOverlap","text":"Fix Overlap within Sequence","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fixOverlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fix Overlap within a Sequence — fixOverlap","text":"","code":"fixOverlap(x, thresh = 0.6, method = c(\"S\", \"E\"), trace = FALSE, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/fixOverlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fix Overlap within a Sequence — fixOverlap","text":"x vector initial positions, pre-sorted thresh numeric, overlap threshold defined scale x method character vector, 'S' simulated annealing via SANN_1D() 'E' electrostatic simulation via electroStatics_1D() trace logical, return full output ... additional arguments SANN_1D() electroStatics_1D()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fixOverlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fix Overlap within a Sequence — fixOverlap","text":"trace = FALSE, vector length x, preserving rank-ordering boundary conditions. trace = TRUE list containing new sequence along information objective functions decisions made adjustment x.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/fixOverlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fix Overlap within a Sequence — fixOverlap","text":"","code":"s <- c(1, 2, 2.3, 4, 5, 5, 7)  # simulated annealing, solution is non-deterministic fixOverlap(s, thresh = 0.6, method = 'S') #> 16 iterations #> [1] 0.9688161 1.7983126 2.7698841 3.7717062 5.3512060 4.4466996 6.9937425 #> attr(,\"converged\") #> [1] TRUE  # electrostatics-inspired simulation of particles # solution is deterministic fixOverlap(s, thresh = 0.6, method = 'E') #> 100 iterations #> [1] 1.000000 1.800766 2.439839 4.000000 4.685761 5.651731 7.000000 #> attr(,\"converged\") #> [1] FALSE   # create a very busy profile with lots of possible overlapping # depth annotation x <- quickSPC(   \"SPC:AAA|BBB|CCC|D|EEEEE|FF|GG|HH|I|I|JJ|KK|LL|M|N|O|P|QQQQ|RR|S|TTTTTT|U\",    interval = 1 )  # convert horizon ID to numeric x$z <- as.numeric(x$hzID)  # plotSPC arguments .a <- list(   width = 0.2,    hz.depths = TRUE,    name.style = 'center-center',    cex.names = 1.5,    depth.axis = FALSE,    name = NA,   color = 'z',   show.legend = FALSE,   print.id = FALSE,   col.palette = hcl.colors(n = 25, palette = 'Spectral', rev = TRUE) )  # set plotSPC default arguments options(.aqp.plotSPC.args = .a)  # wrapper function to test label collision solutions testIt <- function(x, ...) {      plotSPC(x, ...)      # a normalized index of label adjustment   .txt <- sprintf(     \"LAI: %0.3f\",      get('last_spc_plot', envir = aqp.env)$hz.depth.LAI   )   mtext(.txt, side = 1, at = 1, line = -2, cex = 0.8)    }   # compare and contrast op <- par(mar = c(0, 0, 0, 0), mfcol = c(1, 6))  testIt(x) title('ES (defaults)', line = -3)  testIt(x, fixOverlapArgs = list(method = 'S')) title('SANN (defaults)', line = -3)  testIt(x, fixOverlapArgs = list(method = 'E', q = 1.5)) title('ES (q = 1.5)', line = -3)  testIt(x, fixOverlapArgs = list(method = 'E', q = 1)) title('ES (q = 1)', line = -3)  testIt(x, fixOverlapArgs = list(method = 'E', q = 0.5)) title('ES (q = 0.5)', line = -3)  testIt(x, fixOverlapArgs = list(method = 'E', q = 0.1)) title('ES (q = 0.1)', line = -3)   par(op)"},{"path":"https://ncss-tech.github.io/aqp/reference/flagOverlappingHz.html","id":null,"dir":"Reference","previous_headings":"","what":"Flag perfectly overlapping horizons within a SoilProfileCollection — flagOverlappingHz","title":"Flag perfectly overlapping horizons within a SoilProfileCollection — flagOverlappingHz","text":"Flag perfectly overlapping horizons within SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/flagOverlappingHz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flag perfectly overlapping horizons within a SoilProfileCollection — flagOverlappingHz","text":"","code":"flagOverlappingHz(x)"},{"path":"https://ncss-tech.github.io/aqp/reference/flagOverlappingHz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flag perfectly overlapping horizons within a SoilProfileCollection — flagOverlappingHz","text":"x SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/flagOverlappingHz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flag perfectly overlapping horizons within a SoilProfileCollection — flagOverlappingHz","text":"logical vector length (order) matching horizons x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/flagOverlappingHz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flag perfectly overlapping horizons within a SoilProfileCollection — flagOverlappingHz","text":"Horizons NA depths can flagged overlapping. Consider finding horizons checkHzDepthLogic(byhz=TRUE) removing fixing .","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/flagOverlappingHz.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Flag perfectly overlapping horizons within a SoilProfileCollection — flagOverlappingHz","text":"D.E. Beaudette, .G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/flagOverlappingHz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flag perfectly overlapping horizons within a SoilProfileCollection — flagOverlappingHz","text":"","code":"# two overlapping horizons z <- data.frame(   id = 'SPC',   top = c(0, 25, 25, 50, 75, 100, 100),   bottom = c(25, 50, 50, 75, 100, 125, 125) )  # init SPC depths(z) <- id ~ top + bottom  # flag perfectly overlapping horizons z$.overlapFlag <- flagOverlappingHz(z)  # thematic sketches plotSPC(z, color = '.overlapFlag', hz.depths = TRUE,  depth.axis = FALSE, cex.names = 0.85)"},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentClasses.html","id":null,"dir":"Reference","previous_headings":"","what":"Coarse Fragment Class Labels and Diameter — fragmentClasses","title":"Coarse Fragment Class Labels and Diameter — fragmentClasses","text":"convenience function accessing coarse fragment class labels associated diameter (mm), defined various classification systems USDA, Unified, AASHTO.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentClasses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coarse Fragment Class Labels and Diameter — fragmentClasses","text":"","code":"fragmentClasses(   sys = c(\"usda_simplified\", \"usda\", \"international\", \"unified\", \"aashto\",     \"mod.wentworth\"),   flat = FALSE,   rounded = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentClasses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coarse Fragment Class Labels and Diameter — fragmentClasses","text":"sys character, length 1. abbreviated name used select class labels fragment diameter. flat logical. Fragments flat, used USDA systems. rounded logical. Fragments rounded, used AASHTO system.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentClasses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coarse Fragment Class Labels and Diameter — fragmentClasses","text":"named vector fragment diameter mm","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentClasses.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Coarse Fragment Class Labels and Diameter — fragmentClasses","text":"Schoeneberger, P.J., D.. Wysocki, E.C. Benham, Soil Survey Staff. 2012. Field book describing sampling soils, Version 3.0. Natural Resources Conservation Service, National Soil Survey Center, Lincoln, NE.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentClasses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coarse Fragment Class Labels and Diameter — fragmentClasses","text":"","code":"# use default system: \"usda_simplified\" fragmentClasses() #>   gravel  cobbles   stones boulders  #>       76      250      600   100000  fragmentClasses(flat = TRUE) #>   channers flagstones     stones   boulders  #>        150        380        600     100000   fragmentClasses(sys = 'usda') #>   fine_gravel medium_gravel coarse_gravel       cobbles        stones  #>             5            20            76           250           600  #>      boulders  #>        100000  fragmentClasses(sys = 'USDA', flat = TRUE) #>   channers flagstones     stones   boulders  #>        150        380        600     100000   fragmentClasses(sys = 'international') #> gravel stones  #>  2e+01  1e+05   fragmentClasses(sys = 'unified') #>   fine_gravel coarse_gravel       cobbles      boulders  #>            19            76           300        100000   fragmentClasses(sys = 'aashto') #>   fine_gravel medium_gravel coarse_gravel   broken_rock  #>       9.5e+00       2.5e+01       7.5e+01       1.0e+05  fragmentClasses(sys = 'aashto', rounded = TRUE) #>   fine_gravel medium_gravel coarse_gravel      boulders  #>       9.5e+00       2.5e+01       7.5e+01       1.0e+05   fragmentClasses(sys = 'mod.wentworth') #>  pebbles  cobbles boulders  #>       64      256   100000"},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentSieve.html","id":null,"dir":"Reference","previous_headings":"","what":"Sieve the Coarse Fraction of Soil — fragmentSieve","title":"Sieve the Coarse Fraction of Soil — fragmentSieve","text":"Sieve applies thresholds numeric vector fragment diameter values, returning fragment size classes. Particle diameter thresholds evaluated d < threshold.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentSieve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sieve the Coarse Fraction of Soil — fragmentSieve","text":"","code":"fragmentSieve(   diameter,   sieves = NULL,   ordered = FALSE,   prefix = \"\",   new_names = NULL,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentSieve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sieve the Coarse Fraction of Soil — fragmentSieve","text":"diameter numeric. Vector diameters coarse fragments \"sieve\". Default sieves specified millimeters. sieves leave NULL use fragment class labels diameters defined fragmentClasses(), named vector fragment diameters. See examples. ordered logical. Return ordered factor. prefix character. Add prefix result names? Default: \"\" adds prefix. example \"para\" might used size classes pararock fragments. new_names Optional: apply new labels result classes. match length sieves. ... additional arguments fragmentClasses(), sys, flat, rounded, see examples.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentSieve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sieve the Coarse Fraction of Soil — fragmentSieve","text":"character. Size class labels based names sieves, new_names, prefix (specified).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentSieve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sieve the Coarse Fraction of Soil — fragmentSieve","text":"Soil Science Division Staff. 2017. Soil survey manual. C. Ditzler, K. Scheffe, H.C. Monger (eds.). USDA Handbook 18. Government Printing Office, Washington, D.C.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/fragmentSieve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sieve the Coarse Fraction of Soil — fragmentSieve","text":"","code":"# use a simplified version of the USDA system # common within NRCS/SPSD and NCSS fragmentSieve(c(30, 125, 180, 500, 1000)) #> [1] \"gravel\"   \"cobbles\"  \"cobbles\"  \"stones\"   \"boulders\"  # pararock fragments fragmentSieve(c(30, 125, 180, 500, 1000), prefix = 'para') #> [1] \"paragravel\"   \"paracobbles\"  \"paracobbles\"  \"parastones\"   \"paraboulders\"  # result as an ordered factor fragmentSieve(c(30, 125, 180, 500, 1000), ordered = TRUE) #> [1] gravel   cobbles  cobbles  stones   boulders #> Levels: gravel < cobbles < stones < boulders  # USDA system, flat size classes fragmentSieve(c(30, 125, 180, 500, 1000), flat = TRUE) #> [1] \"channers\"   \"channers\"   \"flagstones\" \"stones\"     \"boulders\"    # alternative classification systems fragmentSieve(c(30, 125, 180, 500, 1000), sys = 'usda') #> [1] \"coarse_gravel\" \"cobbles\"       \"cobbles\"       \"stones\"        #> [5] \"boulders\"      fragmentSieve(c(30, 125, 180, 500, 1000), sys = 'international') #> [1] \"stones\" \"stones\" \"stones\" \"stones\" \"stones\" fragmentSieve(c(30, 125, 180, 500, 1000), sys = 'unified') #> [1] \"coarse_gravel\" \"cobbles\"       \"cobbles\"       \"boulders\"      #> [5] \"boulders\"      fragmentSieve(c(30, 125, 180, 500, 1000), sys = 'aashto') #> [1] \"coarse_gravel\" \"broken_rock\"   \"broken_rock\"   \"broken_rock\"   #> [5] \"broken_rock\"   fragmentSieve(c(30, 125, 180, 500, 1000), sys = 'mod.wentworth') #> [1] \"pebbles\"  \"cobbles\"  \"cobbles\"  \"boulders\" \"boulders\"  # custom fragment labels / diameter fragmentSieve(   c(30, 125, 180, 500, 1000),   sieves = c(clumps = 50, chunks = 300, blocks = 100000) ) #> [1] \"clumps\" \"chunks\" \"chunks\" \"blocks\" \"blocks\"  # unnamed sieves, generic labels used fragmentSieve(c(10, 50), sieves = c(30, 70)) #> [1] \"class_1\" \"class_2\"  fragmentSieve(c(10, 50), sieves = c(30, 70), ordered = TRUE) #> [1] class_1 class_2 #> Levels: class_1 < class_2"},{"path":"https://ncss-tech.github.io/aqp/reference/genSlabLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Labels for Slabs — genSlabLabels","title":"Generate Labels for Slabs — genSlabLabels","text":"method used slab() generating labels assign IDs layers SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/genSlabLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Labels for Slabs — genSlabLabels","text":"","code":"genSlabLabels(   slab.structure = 1,   max.d = NULL,   n.profiles = NULL,   spc = NULL,   diced = NULL,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/genSlabLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Labels for Slabs — genSlabLabels","text":"slab.structure user-defined slab thickness (defined integer), user-defined structure (numeric vector). See details slab(). max.d Maximum depth n.profiles Number profiles spc Optional: SoilProfileCollection diced Optional: dice()-ed horizon-level data.frame corresponding spc ... Additional arguments passed dice() spc specified.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/genSlabLabels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Labels for Slabs — genSlabLabels","text":"factor. slab IDs, labels segment top bottom depth separated \"-\"","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/genSlabLabels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Labels for Slabs — genSlabLabels","text":"new routine used aqp 2.0 requires , minimum, spc slab.structure arguments specified.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/generalize.hz.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalize Horizon Names — generalize.hz","title":"Generalize Horizon Names — generalize.hz","text":"Generalize vector horizon names, based new classes, REGEX patterns. create new column ghl SoilProfileCollection (requires horizon designation name defined collection, see details)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/generalize.hz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalize Horizon Names — generalize.hz","text":"","code":"generalize.hz(   x,   new,   pattern,   non.matching.code = \"not-used\",   hzdepm = NULL,   ordered = !missing(hzdepm),   na.rm = TRUE,   ... )  # S4 method for class 'character' generalizeHz(   x,   new,   pattern,   non.matching.code = \"not-used\",   hzdepm = NULL,   ordered = !missing(hzdepm),   ... )  # S4 method for class 'SoilProfileCollection' generalizeHz(   x,   new,   pattern,   non.matching.code = \"not-used\",   hzdepm = NULL,   ordered = !missing(hzdepm),   ghl = \"genhz\",   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/generalize.hz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalize Horizon Names — generalize.hz","text":"x character vector horizon names SoilProfileCollection object new character vector generalized horizon labels (GHL) pattern character vector REGEX patterns, length new non.matching.code character, label used horizon matched pattern hzdepm numeric vector horizon mid-points; NA values hzdepm result non.matching.code (NA defined) result ordered logical, default TRUE hzdepm argument specified na.rm logical, default TRUE ignore missing depths calculating sort order hzdepm specified ordered=TRUE ... additional arguments passed grep() perl = TRUE advanced REGEX ghl Generalized Horizon Designation column name (created/updated x SoilProfileCollection)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/generalize.hz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalize Horizon Names — generalize.hz","text":"factor (ordered factor ordered=TRUE) length x (character) number horizons x (SoilProfileCollection)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/generalize.hz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generalize Horizon Names — generalize.hz","text":"x SoilProfileCollection ghl column updated factor results. requires \"horizon designation name\" metadata defined collection set column input designations.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/generalize.hz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalize Horizon Names — generalize.hz","text":"Beaudette, D.E., Roudier, P., Skovlin, J. (2016). Probabilistic Representation Genetic Soil Horizons. : Hartemink, ., Minasny, B. (eds) Digital Soil Morphometrics. Progress Soil Science. Springer, Cham. https://doi.org/10.1007/978-3-319-28295-4_18","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/generalize.hz.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalize Horizon Names — generalize.hz","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/generalize.hz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generalize Horizon Names — generalize.hz","text":"","code":"data(sp1)  # check original distribution of hz designations table(sp1$name) #>  #>   2C  2C1  2C2  3Ab 3Bwb   3C  3Cb    A   A1   A2   A3   AB  AB1  AB2  AB3   BA  #>    2    2    2    1    2    2    1    4    4    4    1    5    1    1    1    2  #>   Bt  Bt1  Bt2  Bw1  Bw2  Bw3    C   C1   C2 Oa/A   Oe   Oi   Rt  #>    1    3    3    3    3    1    1    2    2    1    1    3    1   # generalized horizon labels # character vector input sp1$genhz <- generalizeHz(   sp1$name,   new = c('O','A','B','C','R'),   pattern = c('O', '^A','^B','C','R'),   ordered = TRUE )  # see how we did / what we missed table(sp1$genhz, sp1$name) #>            #>            2C 2C1 2C2 3Ab 3Bwb 3C 3Cb A A1 A2 A3 AB AB1 AB2 AB3 BA Bt Bt1 Bt2 #>   O         0   0   0   0    0  0   0 0  0  0  0  0   0   0   0  0  0   0   0 #>   A         0   0   0   0    0  0   0 4  4  4  1  5   1   1   1  0  0   0   0 #>   B         0   0   0   0    0  0   0 0  0  0  0  0   0   0   0  2  1   3   3 #>   C         2   2   2   0    0  2   1 0  0  0  0  0   0   0   0  0  0   0   0 #>   R         0   0   0   0    0  0   0 0  0  0  0  0   0   0   0  0  0   0   0 #>   not-used  0   0   0   1    2  0   0 0  0  0  0  0   0   0   0  0  0   0   0 #>            #>            Bw1 Bw2 Bw3 C C1 C2 Oa/A Oe Oi Rt #>   O          0   0   0 0  0  0    1  1  3  0 #>   A          0   0   0 0  0  0    0  0  0  0 #>   B          3   3   1 0  0  0    0  0  0  0 #>   C          0   0   0 1  2  2    0  0  0  0 #>   R          0   0   0 0  0  0    0  0  0  1 #>   not-used   0   0   0 0  0  0    0  0  0  0   ## a more advanced example, requries `perl = TRUE` # example data x <- c('A', 'AC', 'Bt1', '^AC', 'C', 'BC', 'CB')  # new labels n <- c('A', '^AC', 'C')  # patterns: # \"A anywhere in the name\" # \"literal '^A' anywhere in the name\" # \"C anywhere in name, but without preceding A\" p <- c('A', '^A', '(?<!A)C')  # note additional argument res <- generalizeHz(   x,    new = n,    pattern = p,    perl = TRUE )  # double-check: OK table(res, x) #>           x #> res        A AC BC Bt1 C CB ^AC #>   A        0  0  0   0 0  0   1 #>   ^AC      1  1  0   0 0  0   0 #>   C        0  0  1   0 1  1   0 #>   not-used 0  0  0   1 0  0   0  ## apply to a SoilProfileCollection data(sp1) depths(sp1) <- id ~ top + bottom  # must set horizon designation metadata hzdesgnname(sp1) <- 'name'  # result is a SoilProfileCollection x <- generalizeHz(   sp1,   new = c('O','A','B','C','R'),   pattern = c('O', '^A','^B','C','R'),   ordered = TRUE )  # GHL stored in 'genhz' column x$genhz #>  [1] A        A        A        B        B        R        O        A        #>  [9] C        C        O        A        B        B        B        A        #> [17] A        A        B        B        A        A        B        B        #> [25] O        A        A        A        A        C        C        C        #> [33] C        C        A        A        B        B        B        C        #> [41] C        not-used C        O        A        A        B        B        #> [49] C        C        C        O        A        A        A        B        #> [57] B        C        not-used not-used #> Levels: O < A < B < C < R < not-used  # GHL metadata is set GHL(x) #> [1] \"genhz\""},{"path":"https://ncss-tech.github.io/aqp/reference/genhzTableToAdjMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert cross-tabulation to adjacency matrix. — genhzTableToAdjMat","title":"Convert cross-tabulation to adjacency matrix. — genhzTableToAdjMat","text":"Convert cross-tabulation e.g. original horizon designations vs. generalized horizon labels adjacency matrix form.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/genhzTableToAdjMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert cross-tabulation to adjacency matrix. — genhzTableToAdjMat","text":"","code":"genhzTableToAdjMat(tab)"},{"path":"https://ncss-tech.github.io/aqp/reference/genhzTableToAdjMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert cross-tabulation to adjacency matrix. — genhzTableToAdjMat","text":"tab table, cross-tabulation original generalized horizon labels e.g. table(original, genhz)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/genhzTableToAdjMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert cross-tabulation to adjacency matrix. — genhzTableToAdjMat","text":"matrix numeric values","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/genhzTableToAdjMat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert cross-tabulation to adjacency matrix. — genhzTableToAdjMat","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/get.increase.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Pair-wise Distances of Soil Properties over Depth — get.increase.matrix","title":"Compute Pair-wise Distances of Soil Properties over Depth — get.increase.matrix","text":"Computes pair-wise distance matrix determine attribute increases within specified vertical distance threshold. get.increase.depths performs conversion square matrix output get.increase.matrix back horizon top depth criteria met.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/get.increase.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Pair-wise Distances of Soil Properties over Depth — get.increase.matrix","text":"","code":"get.increase.matrix(p, attr, threshold.fun, vertical.distance)  get.increase.depths(p, attr, threshold.fun, vertical.distance)"},{"path":"https://ncss-tech.github.io/aqp/reference/get.increase.matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Pair-wise Distances of Soil Properties over Depth — get.increase.matrix","text":"p SoilProfileCollection, containing single profile attr horizon attribute name get \"increase\" threshold.fun function returns threshold (function attr); may return constant single value vertical.distance vertical distance (determined difference SPC top depth variable) within increase must met","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/get.increase.matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Pair-wise Distances of Soil Properties over Depth — get.increase.matrix","text":"Returns square logical matrix reflecting increase criteria met. get.increase.depths converts horizon top depth using matrix output determine depths increase met. Returns numeric vector depths increase requirement met. argillic, first one interest. get.increase.depths() converts horizon top depth using matrix output determine depths increase met.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/get.increase.matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Pair-wise Distances of Soil Properties over Depth — get.increase.matrix","text":"Uses matrix outer product determine pair-wise differences attr horizons p. Supplies attr threshold.fun determine minimum value criterion return TRUE output matrix \"increase\". Also, computes pair-wise distances depth dimension determine whether vertical distance criteria met simultaneously attr increase. function assumes threshold.fun supplied user returns either constant vector equal length input. Note threshold.fun result allowed contain NA, result output affected cells. get.increase.depths() performs conversion square matrix output get.increase.matrix back horizon top depth criteria met. Note threshold.fun result allowed contain NA, result output affected cells.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/get.increase.matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Pair-wise Distances of Soil Properties over Depth — get.increase.matrix","text":"Andrew Gene Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/get.increase.matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Pair-wise Distances of Soil Properties over Depth — get.increase.matrix","text":"","code":"data(sp1, package = 'aqp') depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  p <- sp1[1] attr <- 'prop' # clay contents foo <- get.increase.matrix(p, threshold.fun = crit.clay.argillic,                            attr = attr, vertical.distance = 30) foo #>       [,1]  [,2]  [,3]  [,4]  [,5]  [,6] #> [1,] FALSE FALSE FALSE FALSE FALSE FALSE #> [2,] FALSE FALSE FALSE  TRUE FALSE FALSE #> [3,] FALSE FALSE FALSE  TRUE  TRUE FALSE #> [4,] FALSE FALSE FALSE FALSE  TRUE FALSE #> [5,] FALSE FALSE FALSE FALSE FALSE FALSE #> [6,] FALSE FALSE FALSE FALSE FALSE FALSE   data(sp1, package = 'aqp') depths(sp1) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing. site(sp1) <- ~ group #> Error in eval(predvars, data, env): object 'group' not found  p <- sp1[1] attr <- 'prop' # clay contents foo <- get.increase.depths(p, threshold.fun = crit.clay.argillic,                            attr = attr, vertical.distance = 30) foo #> [1] 49 57"},{"path":"https://ncss-tech.github.io/aqp/reference/get.ml.hz.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine ML Horizon Boundaries — get.ml.hz","title":"Determine ML Horizon Boundaries — get.ml.hz","text":"function accepts input slab() (data.frame) along vector horizon names, returns data.frame likely horizon boundaries. function expects x data.frame generated slab(). x generated slab(), o.names required.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/get.ml.hz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine ML Horizon Boundaries — get.ml.hz","text":"","code":"get.ml.hz(x, o.names = attr(x, which = \"original.levels\"))"},{"path":"https://ncss-tech.github.io/aqp/reference/get.ml.hz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine ML Horizon Boundaries — get.ml.hz","text":"x data.frame, output slab() o.names optional character vector horizon designations used final table","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/get.ml.hz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine ML Horizon Boundaries — get.ml.hz","text":"data.frame following columns: hz: horizon names top: horizon top depth bottom: horizon bottom depth confidence: integrated probability thickness ML horizon, rounded nearest integer pseudo.brier: \"pseudo\"\" Brier Score multi-class prediction, -likely horizon label treated \"correct\" outcome. Details calculation traditional Brier Scores : https://en.wikipedia.org/wiki/Brier_score. Lower values suggest better agreement ML horizon label class-wise probabilities. mean.H: mean Shannon entropy (bits), derived probabilities within -likely horizon. Larger values suggest confusion within ML.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/get.ml.hz.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Determine ML Horizon Boundaries — get.ml.hz","text":"Beaudette, D. E., Roudier, P., & Skovlin, J. (2016). Probabilistic representation genetic soil horizons. Digital soil morphometrics, 281-293.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/get.ml.hz.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine ML Horizon Boundaries — get.ml.hz","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/get.ml.hz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine ML Horizon Boundaries — get.ml.hz","text":"","code":"# init SPC data(sp1) depths(sp1) <- id ~ top + bottom  # set horizon designation metadata hzdesgnname(sp1) <- 'name'  # generalize horizon designations from character vector # result is an ordered factor sp1$genhz <- generalizeHz(   sp1$name,   new = c('O','A','B','C'),   pat = c('O', '^A','^B','C'),   ordered = TRUE )  # compute slice-wise GHL probability # so that it sums to contributing fraction # from 0-150cm a <- slab(sp1, fm = ~ genhz, cpm = 1, slab.structure = 0:150) #> horizons with zero thickness have been omitted from results  # note original GHL names are set by slab() attr(a, 'original.levels') #> [1] \"O\"        \"A\"        \"B\"        \"C\"        \"not-used\"  # generate table of ML horizonation get.ml.hz(a) #>   hz top bottom confidence pseudo.brier    mean.H #> 1  O   0      2         37    0.3950617 0.9910761 #> 2  A   2     32         75    0.1547325 0.7922828 #> 3  B  32    145         57    0.3574667 1.0813045 #> 4  C 145    150         71    0.1250000 0.8112781"},{"path":"https://ncss-tech.github.io/aqp/reference/getArgillicBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate upper and lower boundary of argillic diagnostic subsurface horizon — getArgillicBounds","title":"Estimate upper and lower boundary of argillic diagnostic subsurface horizon — getArgillicBounds","text":"getArgillicBounds estimates upper lower boundary argillic diagnostic subsurface horizon profile single-profile SoilProfileCollection object (p). upper boundary clay increase threshold met. function uses crit.clay.argillic threshold function determining whether clay increase occurs get.increase.matrix determine whether increase met, whether vertical distance increase sufficiently small, horizon.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getArgillicBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate upper and lower boundary of argillic diagnostic subsurface horizon — getArgillicBounds","text":"","code":"getArgillicBounds(   p,   hzdesgn = hzdesgnname(p, required = TRUE),   clay.attr = hzmetaname(p, \"clay\", required = TRUE),   texcl.attr = hztexclname(p, required = TRUE),   require_t = TRUE,   bottom.pattern = \"Cr|R|Cd\",   lower.grad.pattern = \"^[2-9]*B*CB*[^rtd]*[1-9]*$\",   sandy.texture.pattern = \"-S$|^S$|COS$|L[^V]FS$|[^L]VFS$|LS$|LFS$\",   vertical.distance = 30,   simplify = TRUE,   verbose = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/getArgillicBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate upper and lower boundary of argillic diagnostic subsurface horizon — getArgillicBounds","text":"p SoilProfileCollection hzdesgn name column/attribute containing horizon designation; default=\"hzname\" clay.attr name column/attribute containing clay content; default=\"clay\" texcl.attr name column/attribute containing textural class (used finding sandy horizons); default=\"texcl\" require_t require \"t\" subscript positive identification upper lower bound argillic? default: TRUE bottom.pattern regular expression passed estimateSoilDepth match lower boundary soil. default \"Cr|R|Cd\" approximately matches paralithic, lithic densic contacts. lower.grad.pattern pattern adjusting bottom depth argillic horizon upwards bottom depth soil. absence illuviation used final control horizon pattern matching. sandy.texture.pattern pattern matching sandy textural classes: -S$|^S$|COS$|L[^V]FS$|[^L]VFS$|LS$|LFS$ vertical.distance Vertical distance clay increase must met. Default 30 cm simplify Return length 2 vector upper lower boundary p length 1? Default TRUE. verbose Print information 't' subscripts, sandy textures, plow layers lower gradational horizons?","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getArgillicBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate upper and lower boundary of argillic diagnostic subsurface horizon — getArgillicBounds","text":"Returns numeric vector; first value top depth, second value bottom depth. .list TRUE, returns list top depth named \"ubound\" bottom depth named \"lbound\". p one profile simplify = FALSE result data.frame containing profile ID, upper lower boundary columns.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getArgillicBounds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate upper and lower boundary of argillic diagnostic subsurface horizon — getArgillicBounds","text":"lower boundary first approximated depth lithic/paralithic/densic contact, horizon matchable custom regular expression pattern. Subsequently, boundary extended upwards end \"evidence illuviation.\" depth contact estimated using 'bottom.pattern' \"Cr|R|Cd\" default. matches anything containing Cr, R Cd. lower gradational horizon regular expression ‘lower.grad.pattern' default ^[2-9]*B*CB*[^rtd]*[1-9]*$}. matches anything starts lithologic discontinuity (none) C master horizon designation. May contain B second horizon designation transitional horizon. May contain 'r' 't' subscript. minimum thickness argillic horizon dependent whether subhorizons \"sandy\" . sandy.texture.pattern default -S$|^S$|COS$|L[^V]FS$|[^L]VFS$|LS$|LFS$ captures USDA textural class fine earth fractions meet \"sandy\" particle size class criteria. also option ‘require_t' omit requirement evidence eluviation form 't' subscript 'hzdesgn'. Even \"t\" subscript required positive identification, presence lower gradational C horizons lacking 't' still used modify lower boundary upward detected contact, needed. behavior desired, just set 'lower.grad.pattern' something match horizons data.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getArgillicBounds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate upper and lower boundary of argillic diagnostic subsurface horizon — getArgillicBounds","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getArgillicBounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate upper and lower boundary of argillic diagnostic subsurface horizon — getArgillicBounds","text":"","code":"data(sp1, package = 'aqp') depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  # set required metadata hzdesgnname(sp1) <- 'name' hztexclname(sp1) <- 'texture' hzmetaname(sp1, 'clay') <- 'prop'  x <- getArgillicBounds(sp1) x #>     id ubound lbound #> 1 P001     49     89 #> 2 P002     NA     NA #> 3 P003      2     67 #> 4 P004     32     62 #> 5 P005      5     68 #> 6 P006     NA     NA #> 7 P007     NA     NA #> 8 P008     NA     NA #> 9 P009     NA     NA"},{"path":"https://ncss-tech.github.io/aqp/reference/getCambicBounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Find all intervals that are potentially part of a Cambic horizon — getCambicBounds","title":"Find all intervals that are potentially part of a Cambic horizon — getCambicBounds","text":"Find intervals potentially part Cambic horizon excluding part argillic horizon (defined either depth interval getArgillicBounds()). may multiple cambic horizons (indexes) profile. cambic index top bottom depth associated: cambic_top cambic_bottom. result designed used single profiles, profileApply(..., frameify = TRUE)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getCambicBounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find all intervals that are potentially part of a Cambic horizon — getCambicBounds","text":"","code":"getCambicBounds(   p,   hzdesgn = hzdesgnname(p, required = TRUE),   texcl.attr = hztexclname(p, required = TRUE),   clay.attr = hzmetaname(p, \"clay\", required = TRUE),   argi_bounds = NULL,   d_value = \"d_value\",   m_value = \"m_value\",   m_chroma = \"m_chroma\",   sandy.texture.pattern = \"-S$|^S$|COS$|L[^V]FS$|[^L]VFS$|LS$|LFS$\",   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/getCambicBounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find all intervals that are potentially part of a Cambic horizon — getCambicBounds","text":"p single-profile SoilProfileCollection hzdesgn Column name containing horizon designations. texcl.attr Arguments getArgillicBounds() clay.attr Arguments getArgillicBounds() argi_bounds Optional: numeric vector length 2 top bottom argillic; (Default: NULL) d_value Column name containing dry value. Default: d_value m_value Column name containing moist value. Default: m_value m_chroma Column name containing moist chroma Default: m_chroma sandy.texture.pattern pattern matching sandy textural classes: -S$|^S$|COS$|L[^V]FS$|[^L]VFS$|LS$|LFS$ ... Arguments getArgillicBounds()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getCambicBounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find all intervals that are potentially part of a Cambic horizon — getCambicBounds","text":"data.frame containing profile, cambic indexes, along top bottom depths.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getCambicBounds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find all intervals that are potentially part of a Cambic horizon — getCambicBounds","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getCambicBounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find all intervals that are potentially part of a Cambic horizon — getCambicBounds","text":"","code":"# construct a fake profile spc <- data.frame(id=1, taxsubgrp = \"Lithic Haploxerepts\",                   hzname   = c(\"A\",\"AB\",\"Bw\",\"BC\",\"R\"),                   hzdept   = c(0,  20, 32, 42,  49),                   hzdepb   = c(20, 32, 42, 49, 200),                   clay     = c(19, 22, 22, 21,  NA),                   texcl    = c(\"l\",\"l\",\"l\", \"l\",\"br\"),                   d_value  = c(5,   5,  5,  6,  NA),                   m_value  = c(2.5, 3,  3,  4,  NA),                   m_chroma = c(2,   3,  4,  4,  NA))  # promote to SoilProfileCollection depths(spc) <- id ~ hzdept + hzdepb  # set required metadata hzdesgnname(spc) <- 'hzname' hztexclname(spc) <- 'texcl' hzmetaname(spc, 'clay') <- 'clay'  # print results in table getCambicBounds(spc) #>   id cambic_top cambic_bottom cambic_index #> 1  1         32            49            1"},{"path":"https://ncss-tech.github.io/aqp/reference/getClosestMunsellChip.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Approximate Munsell Chip — getClosestMunsellChip","title":"Get Approximate Munsell Chip — getClosestMunsellChip","text":"Non-standard Munsell notation ('7.9YR 2.7/2.0') can matched (nearest-neighbor, interpolation) closest color within munsell sRGB/CIELAB look-table via getClosestMunsellChip(). accurate estimate sRGB values non-standard notation can achieved munsellinterpol package. example, conversion Munsell CIELAB, assuming D65 illuminant via: MunsellToLab('0.1Y 3.3/4.4', white='D65', adapt='Bradford').","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getClosestMunsellChip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Approximate Munsell Chip — getClosestMunsellChip","text":"","code":"getClosestMunsellChip(munsellColor, convertColors = TRUE, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/getClosestMunsellChip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Approximate Munsell Chip — getClosestMunsellChip","text":"munsellColor character vector strings containing Munsell notation color, e.g. '10YR 4/3', NA-safe convertColors logical, parsed Munsell colors converted sRGB values ... arguments munsell2rgb","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getClosestMunsellChip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Approximate Munsell Chip — getClosestMunsellChip","text":"data.frame convertColors=TRUE, otherwise character vector","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getClosestMunsellChip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Approximate Munsell Chip — getClosestMunsellChip","text":"","code":"# convert a non-standard color to closest \"chip\" in `munsell` look-up table getClosestMunsellChip('7.9YR 2.7/2.0', convertColors = FALSE) #> [1] \"7.5YR 2.5/2\"  # convert directly to R color getClosestMunsellChip('7.9YR 2.7/2.0') #> [1] \"#48382CFF\"  # special case for 2.5 value -> no rounding, we have these records in the conversion LUT getClosestMunsellChip('7.5YR 2.5/2', convertColors = FALSE) #> [1] \"7.5YR 2.5/2\"   getClosestMunsellChip('7.5YR 6.8/4.4', convertColors = FALSE) #> [1] \"7.5YR 7/4\""},{"path":"https://ncss-tech.github.io/aqp/reference/getLastHorizonID.html","id":null,"dir":"Reference","previous_headings":"","what":"Get IDs of Deepest Horizons by Profile — getLastHorizonID","title":"Get IDs of Deepest Horizons by Profile — getLastHorizonID","text":"Return horizon IDs deepest horizon within profile SoilProfileCollection. IDs returned order profile_id(x). Horizon top depths used cases bottom depths may missing.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getLastHorizonID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get IDs of Deepest Horizons by Profile — getLastHorizonID","text":"","code":"getLastHorizonID(x)"},{"path":"https://ncss-tech.github.io/aqp/reference/getLastHorizonID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get IDs of Deepest Horizons by Profile — getLastHorizonID","text":"x SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getSoilDepthClass.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Soil Depth Class Matrix — getSoilDepthClass","title":"Generate Soil Depth Class Matrix — getSoilDepthClass","text":"Generate boolean matrix soil depth classes, actual soil depth class, estimate soil depth SoilProfileCollection object. Soil depths estimated using pattern matching applied horizon designations, estimateSoilDepth(). default REGEX pattern (p = 'Cr|R|Cd') match \"contacts\" described using USDA / Soil Taxonomy horizon designation conventions.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getSoilDepthClass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Soil Depth Class Matrix — getSoilDepthClass","text":"","code":"getSoilDepthClass(   f,   depth.classes = c(very.shallow = 25, shallow = 50, mod.deep = 100, deep = 150,     very.deep = 10000),   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/getSoilDepthClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Soil Depth Class Matrix — getSoilDepthClass","text":"f SoilProfileCollection object depth.classes named vector classes depth breaks ... arguments passed estimateSoilDepth","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getSoilDepthClass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Soil Depth Class Matrix — getSoilDepthClass","text":"data.frame containing soil depth depth class profile, see examples","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/getSoilDepthClass.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate Soil Depth Class Matrix — getSoilDepthClass","text":"D.E. Beaudette J.M. Skovlin","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getSoilDepthClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Soil Depth Class Matrix — getSoilDepthClass","text":"","code":"data(sp1) depths(sp1) <- id ~ top + bottom  # generate depth-class matrix sdc <- getSoilDepthClass(sp1, name = 'name')  # inspect head(sdc) #>     id depth very.shallow shallow mod.deep  deep very.deep depth.class #> 1 P001    89        FALSE   FALSE     TRUE FALSE     FALSE    mod.deep #> 2 P002    59        FALSE   FALSE     TRUE FALSE     FALSE    mod.deep #> 3 P003    67        FALSE   FALSE     TRUE FALSE     FALSE    mod.deep #> 4 P004    62        FALSE   FALSE     TRUE FALSE     FALSE    mod.deep #> 5 P005    68        FALSE   FALSE     TRUE FALSE     FALSE    mod.deep #> 6 P006   200        FALSE   FALSE    FALSE FALSE      TRUE   very.deep  # join back into sp1 as site-level data site(sp1) <- sdc  if (FALSE) { # \\dontrun{ # sample data data(gopheridge, package='soilDB')  getSoilDepthClass(gopheridge, name = 'hzname') } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/getSurfaceHorizonDepth.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine thickness of horizons (continuous from surface) matching a pattern — getSurfaceHorizonDepth","title":"Determine thickness of horizons (continuous from surface) matching a pattern — getSurfaceHorizonDepth","text":"Find thickness horizon designations, character patterns, continuous soil surface (depth = 0 shallowest depth profile).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getSurfaceHorizonDepth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine thickness of horizons (continuous from surface) matching a pattern — getSurfaceHorizonDepth","text":"","code":"getSurfaceHorizonDepth(   p,   pattern,   hzdesgn = hzdesgnname(p, required = TRUE),   simplify = TRUE )  getMineralSoilSurfaceDepth(   p,   hzdesgn = hzdesgnname(p, required = TRUE),   pattern = \"O\",   simplify = TRUE )  getPlowLayerDepth(   p,   hzdesgn = hzdesgnname(p, required = TRUE),   pattern = \"^Ap[^b]*\",   simplify = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/reference/getSurfaceHorizonDepth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine thickness of horizons (continuous from surface) matching a pattern — getSurfaceHorizonDepth","text":"p SoilProfileCollection pattern regular expression pattern match horizons considered part \"surface\". hzdesgn column name containing horizon designation. Default: hzdesgnname(p, required = TRUE). simplify logical. Return single profile results vector (default: TRUE) data.frame (FALSE)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getSurfaceHorizonDepth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine thickness of horizons (continuous from surface) matching a pattern — getSurfaceHorizonDepth","text":"numeric value corresponding bottom depth last horizon matching 'pattern' contiguous matching horizons soil surface. length(p) > 1 data.frame containing profile ID, horizon ID, top bottom depths, horizon designation pattern.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getSurfaceHorizonDepth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine thickness of horizons (continuous from surface) matching a pattern — getSurfaceHorizonDepth","text":"horizon designation match specified regular expression pattern 'pattern'. horizons matching pattern, continuous soil surface, count towards depth / thickness value ultimately returned. instance: horizon designations: A1-A2-A3-C-Ab , return A3 bottom depth given pattern = \"^[1-9]*$\". getSurfaceHorizonDepth used getPlowLayerDepth matching Ap horizons; , used getMineralSoilSurfaceDepth find thickness O horizons lieu lab data.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getSurfaceHorizonDepth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine thickness of horizons (continuous from surface) matching a pattern — getSurfaceHorizonDepth","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/getSurfaceHorizonDepth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine thickness of horizons (continuous from surface) matching a pattern — getSurfaceHorizonDepth","text":"","code":"library(aqp) data(sp1, package = 'aqp') depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  p <- sp1[1] q <- sp1[2]  # look at horizon designations in p and q p$name #> [1] \"A1\" \"A2\" \"AB\" \"BA\" \"Bt\" \"Rt\" q$name #> [1] \"Oi\" \"A\"  \"C1\" \"C2\"  # thickness of all surface horizons containing A getSurfaceHorizonDepth(p, pattern = 'A', hzdesgn = 'name') #> [1] 57  # thickness of all surface horizons that start with A getSurfaceHorizonDepth(p, pattern = '^A', hzdesgn = 'name') #> [1] 49  # thickness of all surface horizons that start with A, and the A is not followed by B getSurfaceHorizonDepth(p, pattern = '^A[^B]*', hzdesgn = 'name') #> [1] 49  # thickness of all surface horizons that start with A #  followed by a number from _2_ to 9 (returns ZERO) getSurfaceHorizonDepth(p, pattern = '^A[2-9]*', hzdesgn = 'name') #> [1] 49  # getPlowLayerDepth matches first two horizons in fake Ap horizon data with \"buried Ap\" p$aphorizons <- c(\"Ap1\",\"Ap2\",\"AB\", rep('C', nrow(p) - 4), \"Apb\") getPlowLayerDepth(p, hzdesgn = 'aphorizons') #> [1] 14  # getMineralSoilSurfaceDepthmatches first 3 horizons in fake O horizon data p$ohorizons <- c(\"Oi1\",\"Oi2\",\"Oe\", rep('C', nrow(p) - 4), \"2C\") getMineralSoilSurfaceDepth(p, hzdesgn='ohorizons') #> [1] 49  # matches first Oi horizon with original horizon designations of pedon 2 getMineralSoilSurfaceDepth(q, hzdesgn='name') #> [1] 5"},{"path":"https://ncss-tech.github.io/aqp/reference/glom.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset soil horizon data using a depth or depth interval — glom,SoilProfileCollection-method","title":"Subset soil horizon data using a depth or depth interval — glom,SoilProfileCollection-method","text":"Make \"clod\" horizons SoilProfileCollection given point depth interval intersect. interval [z1,z2] may profile-specific (equal length p), may recycled profiles (boundaries length 1). \"point\" intersection, z2 may left default value NULL. trunc() wrapper method (using S4 generic) glom() truncate=TRUE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/glom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset soil horizon data using a depth or depth interval — glom,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' glom(   p,   z1,   z2 = NULL,   ids = FALSE,   df = FALSE,   truncate = FALSE,   invert = FALSE,   fill = FALSE,   modality = \"all\",   drop = !fill,   ... )  # S4 method for class 'SoilProfileCollection' trunc(x, z1, z2, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/glom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset soil horizon data using a depth or depth interval — glom,SoilProfileCollection-method","text":"p SoilProfileCollection z1 numeric vector top depth intersect horizon (required). Can expression involving siteNames(p) quoted column name. evaluate numeric length 1 length equal length(p) z2 numeric vector bottom depth intersection interval (optional). Can also expression involving siteNames(p) quoted column name. evaluate numeric length 1, length equal length(p) NULL. Default: NULL \"point\" intersection ids return horizon IDs? default: FALSE df return data.frame, intersection horizons(p)? default: FALSE truncate truncate horizon top bottom depths z1 z2? default: FALSE invert get horizons outside interval [z1,z2]? default: FALSE fill keep sites preserve order profiles horizons interval filling single horizon NA top bottom depth. default: FALSE modality default: \"\" return horizons; modality = \"thickest\") return thickest horizon interval. multiple horizons equal thickness, first (shallowest) returned. drop Inverted alias fill consistency methods. drop=FALSE, filling occurs. ... trunc(): additional arguments passed glom() x SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/glom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset soil horizon data using a depth or depth interval — glom,SoilProfileCollection-method","text":"SoilProfileCollection, data.frame, vector horizon IDs. NULL result.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/glom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset soil horizon data using a depth or depth interval — glom,SoilProfileCollection-method","text":"\"glom\" \"steal\" \"become stuck attached \". word related compound \"glomalin\", glycoprotein produced mycorrhizal fungi soil. full depth range horizons included within interval returned (\"ragged\" SoilProfileCollection) unless truncate argument set TRUE. Horizon intersection based unique ID hzidname(spc) depth range interest. Profiles lack data range interest dropped resulting SoilProfileCollection. inverting results invert, possible thick horizons (whose boundaries span wider specified interval) split two horizons, previously one. may make results ids = TRUE different expect, based profile \"extra\" horizon re-calculated unique horizon ID (hzidname(spc)) \"hzID\".","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/glom.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subset soil horizon data using a depth or depth interval — glom,SoilProfileCollection-method","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/glom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset soil horizon data using a depth or depth interval — glom,SoilProfileCollection-method","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  data(sp1, package = 'aqp') depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  p <- glom(sp1, 25, 150)  # 28 horizons nrow(p)  #> [1] 32  # inspect graphically par(mar = c(1,1,3,1)) plot(p, color = \"prop\", max.depth = 200) #> [P001:4] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths() abline(h = c(25, 100), lty = 2)   ## glom(..., truncate = TRUE)  p2 <- glom(sp1, 25, 150, truncate = TRUE)  # 28 horizons nrow(p2)  #> [1] 32  # inspect graphically par(mar = c(1,1,3,1)) plot(p2, color = \"prop\", max.depth = 200) #> [P001:4] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths() abline(h = c(25, 100), lty = 2)   ## glom(..., truncate = TRUE, invert = TRUE)  p3 <- glom(sp1, 25, 150, truncate = TRUE, invert = TRUE)  # 45 horizons nrow(p3)  #> [1] 40  # inspect graphically par(mar = c(1,1,3,1)) plot(p3, color = \"prop\", max.depth = 200) abline(h = c(25, 100), lty = 2)   ## profile-specific interval, using expressions evaluated within sp1@site  # calculate some new site-level variables containing target interval sp1$glom_top <- (1:9) * 10 sp1$glom_bottom <- 10 + sp1$glom_top  # glom evaluates non-standard expressions using siteNames(sp1) column names p4 <- glom(sp1, glom_top / 2, glom_bottom * 1.2, truncate = TRUE)  # inspect graphically par(mar = c(1,1,3,1)) plot(p4, color = \"prop\", max.depth = 200)    # load sample data data(\"sp3\")  # promote to SPC depths(sp3) <- id ~ top + bottom  ### TRUNCATE all profiles in sp3 to [0,25]  # set up plot parameters par(mfrow=c(2,1), mar=c(0,0,0,0))  # full profiles plot(sp3)  # trunc'd profiles plot(trunc(sp3, 0, 25))"},{"path":"https://ncss-tech.github.io/aqp/reference/glomApply.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset an SPC by applying glom to each profile — glomApply","title":"Subset an SPC by applying glom to each profile — glomApply","text":"glomApply() function used subsetting SoilProfileCollection objects depth. wrapper around glom intended subset single-profile SPCs based depth intervals/intersection. glomApply works accepting function .fun argument. function used profile process multi-profile SPC input glom (via profileApply). profile, .fun returns 2-length numeric vector top bottom boundaries glom arguments: z1, z2. glomApply provides option generate profile-specific glom depths large SPC handles iteration rebuilding subset SPC object. Optional arguments include: truncate cut boundaries specified [z1, z2]; invert portion outside [z1, z2], modality either \"\" horizons \"thickest\" horizon glom interval. ... various expressions can run individual profiles using NSE, similar mutate.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/glomApply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset an SPC by applying glom to each profile — glomApply","text":"","code":"glomApply(   object,   .fun = NULL,   truncate = FALSE,   invert = FALSE,   modality = \"all\",   ...,   chunk.size = 100 )"},{"path":"https://ncss-tech.github.io/aqp/reference/glomApply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset an SPC by applying glom to each profile — glomApply","text":"object SoilProfileCollection .fun function returns vector top bottom depth (z1 z2 arguments glom) single profile p (passed profileApply) truncate Truncate horizon top bottom depths [z1, z2] invert Truncate horizon top bottom depths [z1, z2] invert result? modality Aggregation method glom result. Default \"\": return horizons; \"thickest\": return (shallowest) thickest horizon ... set comma-delimited R expressions resolve transformation applied single profile e.g glomApply(hzdept = max(hzdept) - hzdept) like aqp::mutate chunk.size Chunk size parameter profileApply","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/glomApply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset an SPC by applying glom to each profile — glomApply","text":"SoilProfileCollection.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/glomApply.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subset an SPC by applying glom to each profile — glomApply","text":"Andrew G. Brown.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/glomApply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset an SPC by applying glom to each profile — glomApply","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  data(sp3) depths(sp3) <- id ~ top + bottom  # init horizon designation column in metadata, used by estimateSoilDepth hzdesgnname(sp3) <- 'name'  # constant depths, whole horizon returns by default plot(glomApply(sp3, function(p) c(25,100)))   # constant depths, truncated #(see aqp::trunc for helper function) plot(glomApply(sp3, function(p) c(25,30), truncate = TRUE))   # constant depths, inverted plot(glomApply(sp3, function(p) c(25,100), invert = TRUE))   # constant depths, inverted + truncated (same as above) plot(glomApply(sp3, function(p) c(25,30), invert = TRUE, truncate=TRUE))   # random boundaries in each profile plot(glomApply(sp3, function(p) round(sort(runif(2, 0, max(sp3))))))   # random boundaries in each profile (truncated) plot(glomApply(sp3, function(p) round(sort(runif(2, 0, max(sp3)))), truncate = TRUE))   # calculate some boundaries as site level attribtes sp3$glom_top <- profileApply(sp3, getMineralSoilSurfaceDepth) #> Warning: found 1 profiles where pattern did not match and shallowest depth is greater than 0 #> Warning: found 1 profiles where pattern did not match and shallowest depth is greater than 0 #> Warning: found 1 profiles where pattern did not match and shallowest depth is greater than 0 sp3$glom_bottom <- profileApply(sp3, estimateSoilDepth)  # use site level attributes for glom intervals for each profile plot(glomApply(sp3, function(p) return(c(p$glom_top, p$glom_bottom))))"},{"path":"https://ncss-tech.github.io/aqp/reference/grepSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset SPC with pattern-matching for text-based attributes — grepSPC","title":"Subset SPC with pattern-matching for text-based attributes — grepSPC","text":"grepSPC() shorthand function subsetting SoilProfileCollection objects. example, filter(grepl(spc, ...)) filter(stringr::str_detect(spc, ...)). provides pattern matching single text-based site horizon level attribute.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/grepSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset SPC with pattern-matching for text-based attributes — grepSPC","text":"","code":"grepSPC(object, attr, pattern, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/grepSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset SPC with pattern-matching for text-based attributes — grepSPC","text":"object SoilProfileCollection attr character vector (column object) matching patterns . pattern REGEX pattern match attr ... Additional arguments passed grep()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/grepSPC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset SPC with pattern-matching for text-based attributes — grepSPC","text":"SoilProfileCollection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/grepSPC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subset SPC with pattern-matching for text-based attributes — grepSPC","text":"Andrew G. Brown.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/groupSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Store groupings within a profile collection. — groupSPC","title":"Store groupings within a profile collection. — groupSPC","text":"Store groupings within profile collection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/groupSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store groupings within a profile collection. — groupSPC","text":"","code":"groupSPC(object, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/groupSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store groupings within a profile collection. — groupSPC","text":"object SoilProfileCollection. ... One expressions evaluated within context object resolve vectors can coerced factor \"groups.\"","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/groupedProfilePlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Grouped Soil Profile Plot — groupedProfilePlot","title":"Grouped Soil Profile Plot — groupedProfilePlot","text":"Plot collection soil profiles, sorted group. left-right ordering groups can adjusted converting groups factor explicitly setting factor levels. Alpha-numeric ordering used types.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/groupedProfilePlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grouped Soil Profile Plot — groupedProfilePlot","text":"","code":"groupedProfilePlot(   x,   groups,   group.name.offset = -5,   group.name.cex = 0.75,   group.line.col = \"RoyalBlue\",   group.line.lwd = 2,   group.line.lty = 2,   break.style = c(\"line\", \"arrow\", \"both\"),   break.offset = 0.5,   arrow.offset = group.name.offset + 5,   arrow.length = 0.1,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/groupedProfilePlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grouped Soil Profile Plot — groupedProfilePlot","text":"x SoilProfileCollection object groups name site-level attribute defines groups, factor levels influence plotting order group.name.offset vertical offset group names, single numeric value vector offsets group.name.cex font size group names group.line.col color line splits groups group.line.lwd width line splits groups group.line.lty style line splits groups break.style style group boundaries: \"line\", \"arrow\", \"\" break.offset horizontal offset used place vertical breaks /arrows, shifted slightly right default hz.depths=TRUE passed plotSPC() arrow.offset vertical offset \"arrow\" style boundaries, single numeric value vector offsets arrow.length value passed arrows define arrow head size ... arguments plotSPC","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/groupedProfilePlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Grouped Soil Profile Plot — groupedProfilePlot","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/groupedProfilePlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grouped Soil Profile Plot — groupedProfilePlot","text":"","code":"# sample data data(sp1) # convert colors from Munsell to hex-encoded RGB sp1$soil_color <- with(sp1, munsell2rgb(hue, value, chroma))  # promote to SoilProfileCollection depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  # add a groups sp1$group.2 <- sprintf(\"%s-%s\", rev(LETTERS[1:3]), sp1$group)  # convert fake groupt to factor with new levels sp1$group.3 <- factor(sp1$group.2, levels=c('C-2', 'B-2', 'A-2', 'C-1', 'B-1', 'A-1'))  # plot profiles, sorted and annotated by 'group' (integers) par(mar=c(1,1,1,1)) groupedProfilePlot(sp1, groups='group', max.depth=150, group.name.offset = -5, id.style='side') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   # plot profiles, sorted and annotated by 'group.2' (characters) par(mar=c(1,1,1,1)) groupedProfilePlot(sp1, groups='group.2', max.depth=150, group.name.offset = -5, id.style='side') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   # plot profiles, sorted and annotated by 'group.3' (characters) par(mar=c(1,1,1,1)) groupedProfilePlot(sp1, groups='group.3', max.depth=150, group.name.offset = -5, id.style='side') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()    # make fake site-level attribute and adjust levels sp1$new.group <- sample(letters[1:3], size=length(sp1), replace=TRUE)  # tabulate pedons / group tab <- table(sp1$new.group)  # sort large -> small tab <- sort(tab, decreasing = TRUE)  # set levels based on sorted tabulation # assign custom labels sp1$new.group <- factor(sp1$new.group, levels=names(tab), labels=paste0(names(tab), ' (', tab, ')'))  groupedProfilePlot(sp1, groups='new.group', max.depth=150, group.name.offset = -10, id.style='side') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   # offsets can be set using a vector of values, recycled as needed groupedProfilePlot(sp1, groups='new.group', max.depth=150, group.name.offset=c(-10, -5), id.style='side') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   # annotate with arrows instead of vertical lines groupedProfilePlot(sp1, groups='new.group', max.depth=150, group.name.offset=c(-10, -12), break.style='arrow', arrow.offset=-3, group.line.lty = 1, group.line.lwd = 1, id.style='side') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()    if (FALSE) { # \\dontrun{ # more complete example using data from soilDB package data(loafercreek, package='soilDB') par(mar=c(1,1,1,1)) # lines groupedProfilePlot(loafercreek, groups='hillslopeprof', group.name.cex = 0.5, group.name.offset = -10)  # arrows groupedProfilePlot(loafercreek, groups='hillslopeprof', group.name.cex = 0.5, group.name.offset = -10, break.style ='arrow', group.line.lty = 1, group.line.lwd = 1)  # both groupedProfilePlot(loafercreek, groups='hillslopeprof', group.name.cex = 0.5, group.name.offset = -10, break.style ='both', group.line.lty = 1, group.line.lwd = 1) } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/guessGenHzLevels.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess Appropriate Ordering for Generalized Horizon Labels — guessGenHzLevels","title":"Guess Appropriate Ordering for Generalized Horizon Labels — guessGenHzLevels","text":"function makes (educated) guess appropriate set levels generalized horizon labels using median horizon depth mid-points.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/guessGenHzLevels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess Appropriate Ordering for Generalized Horizon Labels — guessGenHzLevels","text":"","code":"guessGenHzLevels(x, hz = GHL(x, required = TRUE))"},{"path":"https://ncss-tech.github.io/aqp/reference/guessGenHzLevels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess Appropriate Ordering for Generalized Horizon Labels — guessGenHzLevels","text":"x SoilProfileCollection object hz name horizon-level attribute containing generalized horizon labels, see details","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/guessGenHzLevels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess Appropriate Ordering for Generalized Horizon Labels — guessGenHzLevels","text":"list: levels vector levels sorted median horizon depth mid-point median.depths vector median horizon mid-points","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/guessGenHzLevels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Guess Appropriate Ordering for Generalized Horizon Labels — guessGenHzLevels","text":"function useful groups horizons generalized via method generalize.hz. example, may useful generalize horizons using labels derived slice depths. default sorting labels follow logical depth-wise sorting converted factor. guessGenHzLevels good job \"guessing\" proper ordering labels based median horizon depth mid-point.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/guessGenHzLevels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Guess Appropriate Ordering for Generalized Horizon Labels — guessGenHzLevels","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/guessGenHzLevels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess Appropriate Ordering for Generalized Horizon Labels — guessGenHzLevels","text":"","code":"# load some example data data(sp1, package='aqp')  # upgrade to SoilProfileCollection depths(sp1) <- id ~ top + bottom  # generalize horizon names n <- c('O', 'A', 'B', 'C') p <- c('O', 'A', 'B', 'C') sp1$genhz <- generalize.hz(sp1$name, n, p)  # note: levels are in the order in which originally defined: levels(sp1$genhz) #> [1] \"O\"        \"A\"        \"B\"        \"C\"        \"not-used\"  # generalize horizons by depth slice s <- dice(sp1, c(5, 10, 15, 25, 50, 100, 150) ~ .) #> dropping horizons with invalid depth logic, see `metadata(x)$removed.horizons` #> filling gaps left by HzDepthLogicSubset s$slice <- paste0(s$top, ' cm') # not a factor levels(s$slice) #> NULL  # the proper ordering of these new labels can be guessed from horizon depths guessGenHzLevels(s, 'slice') #> $levels #> [1] \"5 cm\"   \"10 cm\"  \"15 cm\"  \"25 cm\"  \"50 cm\"  \"100 cm\" \"150 cm\" #>  #> $median.depths #>   5 cm  10 cm  15 cm  25 cm  50 cm 100 cm 150 cm  #>    5.5   10.5   15.5   25.5   50.5  100.5  150.5  #>   # convert to factor, and set proper order s$slice <- factor(s$slice, levels=guessGenHzLevels(s, 'slice')$levels)  # that is better levels(s$slice) #> [1] \"5 cm\"   \"10 cm\"  \"15 cm\"  \"25 cm\"  \"50 cm\"  \"100 cm\" \"150 cm\""},{"path":"https://ncss-tech.github.io/aqp/reference/guessHzAttrName.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess Horizon Slot Column Names — guessHzAttrName","title":"Guess Horizon Slot Column Names — guessHzAttrName","text":"guessHzAttrName(): Guess horizon column name possible/preferred formative elements known. preference records optional requirements met handle cases many matches. example, working soil data one might \"low, RV high\" total clay, well clay fractions. One distinguish different measurements using standard formative elements column names database interest. Result first match horizonNames(x) required plus optional patterns matched. e.g. guessHzAttrName(x, attr=\"clay\", optional=c(\"total\", \"_r\")) matches (claytotal_r == totalclay_r) (clay_r == claytotal == totalclay) clay. guessHzDesgnName(): DEPRECATED follows historic convention used aqp::plotSPC() looking \"hzname\" column names containing regular expression \"name\". pattern \"name\" found, pattern \"desgn\" searched fallback, \"hzdesgn\" \"hz_desgn\" common column naming schemes horizon designation name. guessHzTexClName(): DEPRECATED function used provide texture class attribute column name functions. use regular expressions match \"texcl\" typically texture fine earth fraction, without modifiers -lieu textures. Alternately, match \"texture\" cases \"texcl\" absent (e.g. NASIS Component Horizon).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/guessHzAttrName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess Horizon Slot Column Names — guessHzAttrName","text":"","code":"guessHzAttrName(x, attr, optional = NULL, verbose = TRUE, required = FALSE)  guessHzDesgnName(x, required = FALSE)  guessHzTexClName(x, required = FALSE)"},{"path":"https://ncss-tech.github.io/aqp/reference/guessHzAttrName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess Horizon Slot Column Names — guessHzAttrName","text":"x SoilProfileCollection attr character. regular expression containing required formative element attribute name. optional character. Vector regular expression(s) containing optional formative elements attribute name. verbose logical. Produce message output guesses? Default: TRUE required logical Default: FALSE. attribute required? , set TRUE trigger error invalid value.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/guessHzAttrName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess Horizon Slot Column Names — guessHzAttrName","text":"Character containing horizon attribute column name. Result first match horizonNames(x) required plus optional patterns matched.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/guessHzAttrName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Guess Horizon Slot Column Names — guessHzAttrName","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/guessHzAttrName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess Horizon Slot Column Names — guessHzAttrName","text":"","code":"# a has the required attr pattern, but none of the optional a <- data.frame(id = 1, top = c(0,10), bottom=c(10,40),                 clay=c(18,19)) depths(a) <- id ~ top + bottom  guessHzAttrName(a, attr=\"clay\", optional=c(\"total\", \"_r\")) #> guessing horizon attribute 'clay' is stored in `clay` #> [1] \"clay\"  # b has requried attr pattern, and one of the opional patterns #   notice that it also contains \"clay\" but preferentially matches more optional patterns b <- data.frame(id = 1, top = c(0,10), bottom=c(10,40),                 clay=c(0.18,0.19), clay_r=c(18,19)) depths(b) <- id ~ top + bottom  guessHzAttrName(b, attr=\"clay\", optional=c(\"total\", \"_r\")) #> guessing horizon attribute 'clay' is stored in `clay_r` #> [1] \"clay_r\"  # c has total and _r (both optional) on either side of clay # having all of the optional patterns plus required is best evidence, and first # column containing that combination will be returned c <- data.frame(id = 1, top = c(0,10), bottom=c(10,40),                 totalclay_r=c(18,19), claytotal_r=c(0.18,0.19)) depths(c) <- id ~ top + bottom  guessHzAttrName(c, attr=\"clay\", optional=c(\"total\", \"_r\")) #> guessing horizon attribute 'clay' is stored in `totalclay_r` #> [1] \"totalclay_r\""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.melanization.html","id":null,"dir":"Reference","previous_headings":"","what":"Harden (1982) Melanization — harden.melanization","title":"Harden (1982) Melanization — harden.melanization","text":"Calculate \"melanization\" component \"Profile Development Index\" Harden (1982) \"quantitative index soil development field descriptions: Examples chronosequence central California\". Accepts vectorized inputs value reference value produce vector output. convenient use case apply profile-specific basis, value_ref single value, value vector length equal number horizons within upper 100 cm.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.melanization.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harden (1982) Melanization — harden.melanization","text":"","code":"harden.melanization(value, value_ref)"},{"path":"https://ncss-tech.github.io/aqp/reference/harden.melanization.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harden (1982) Melanization — harden.melanization","text":"value numeric vector containing Munsell values value_ref numeric vector containing Munsell value(s) reference material","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.melanization.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harden (1982) Melanization — harden.melanization","text":"numeric vector reflecting horizon darkening relative reference (e.g. parent) material.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.melanization.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Harden (1982) Melanization — harden.melanization","text":"Harden (1982), \"melanization\" calculated relative reference parent material horizons within 100cm soil surface. addition, several non-color components normalized relative maximum value summed obtain overall Profile Development Index.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.melanization.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Harden (1982) Melanization — harden.melanization","text":"Harden, J.W. (1982) quantitative index soil development field descriptions: Examples chronosequence central California. Geoderma. 28(1) 1-28. doi:  10.1016/0016-7061(82)90037-4","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.melanization.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Harden (1982) Melanization — harden.melanization","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.melanization.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harden (1982) Melanization — harden.melanization","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  library(aqp) data(\"jacobs2000\", package=\"aqp\")  # LEFT JOIN hue, value, chroma matrix color columns horizons(jacobs2000) <- cbind(horizons(jacobs2000)[,c(idname(jacobs2000), hzidname(jacobs2000))],                               parseMunsell(jacobs2000$matrix_color_munsell, convertColors = FALSE))  # calculate a mixed 150-200cm color ~\"parent material\"  jacobs2000$c_horizon_color <- profileApply(jacobs2000, function(p) {    # and derive the parent material from the 150-200cm interval   p150_200 <- glom(p, 150, 200, truncate = TRUE)   p150_200$thickness <- p150_200$bottom - p150_200$top    # mix colors   clrs <- na.omit(horizons(p150_200)[,c('matrix_color_munsell','thickness')])   mixMunsell(clrs$matrix_color_munsell, w = clrs$thickness)$munsell  })  # segment profile into 1cm slices (for proper depth weighting) jacobs2000$melan <- profileApply(jacobs2000, function(p) {    # sum the melanization index over the 0-100cm interval   p0_100 <- hz_segment(p, 0:100)    ccol <- parseMunsell(p$c_horizon_color, convertColors = FALSE)    sum(harden.melanization(     value = as.numeric(p0_100$value),     value_ref = as.numeric(ccol$value)), na.rm = TRUE)  })  jacobs2000$melanorder <- order(jacobs2000$melan)  # Plot in order of increasing Melanization index  plotSPC(jacobs2000,          color = \"matrix_color\",         label = \"melan\",         plot.order = jacobs2000$melanorder,         max.depth = 250         )  segments(   x0 = 0.5,    x1 = length(jacobs2000) + 0.5,    y0 = c(0,100,150,200),    y1 = c(0,100,150,200),    lty = 2 )  # Add [estimated] parent material color swatches lapply(seq_along(jacobs2000$c_horizon_color), function(i) {   rect(i - 0.15, 250, i + 0.15, 225,        col = parseMunsell(jacobs2000$c_horizon_color[jacobs2000$melanorder[i]])) })  #> [[1]] #> NULL #>  #> [[2]] #> NULL #>  #> [[3]] #> NULL #>  #> [[4]] #> NULL #>  #> [[5]] #> NULL #>  #> [[6]] #> NULL #>  #> [[7]] #> NULL #>"},{"path":"https://ncss-tech.github.io/aqp/reference/harden.rubification.html","id":null,"dir":"Reference","previous_headings":"","what":"Harden (1982) Rubification — harden.rubification","title":"Harden (1982) Rubification — harden.rubification","text":"Calculate \"rubification\" component \"Profile Development Index\" Harden (1982) \"quantitative index soil development field descriptions: Examples chronosequence central California\". Accepts vectorized inputs hue chroma produce vector output. Harden (1982) \"rubification\" calculated relative reference parent material. Several non-color components normalized relative maximum value summed obtain overall Profile Development Index.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.rubification.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harden (1982) Rubification — harden.rubification","text":"","code":"harden.rubification(hue, chroma, hue_ref, chroma_ref)"},{"path":"https://ncss-tech.github.io/aqp/reference/harden.rubification.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harden (1982) Rubification — harden.rubification","text":"hue character vector containing Munsell hues (e.g. \"7.5YR\") chroma numeric vector containing Munsell chromas hue_ref character vector containing Munsell hue(s) (e.g. \"10YR\") reference material chroma_ref numeric vector containing Munsell chroma(s) reference material","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.rubification.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harden (1982) Rubification — harden.rubification","text":"numeric vector reflecting horizon redness increase relative reference (e.g. parent) material.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.rubification.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Harden (1982) Rubification — harden.rubification","text":"Harden, J.W. (1982) quantitative index soil development field descriptions: Examples chronosequence central California. Geoderma. 28(1) 1-28. doi:  10.1016/0016-7061(82)90037-4","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.rubification.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Harden (1982) Rubification — harden.rubification","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harden.rubification.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harden (1982) Rubification — harden.rubification","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  library(aqp) data(\"jacobs2000\", package=\"aqp\")  # LEFT JOIN hue, value, chroma matrix color columns horizons(jacobs2000) <- cbind(horizons(jacobs2000)[,c(idname(jacobs2000), hzidname(jacobs2000))],                               parseMunsell(jacobs2000$matrix_color_munsell, convertColors = FALSE))  #' # calculate a mixed 150-200cm color ~\"parent material\" jacobs2000$c_horizon_color <- profileApply(jacobs2000, function(p) {    # and derive the parent material from the 150-200cm interval   p150_200 <- glom(p, 150, 200, truncate = TRUE)   p150_200$thickness <- p150_200$bottom - p150_200$top      # subset colors and thickness   clrs <- na.omit(horizons(p150_200)[,c('matrix_color_munsell','thickness')])      # simulate a subtractive mixture using thickness as weight   mixMunsell(   clrs$matrix_color_munsell,    w = clrs$thickness,    mixingMethod = 'exact')$munsell })  # segment profile into 1cm slices (for proper depth weighting) jacobs2000$rubif <- profileApply(jacobs2000, function(p) {    # sum the melanization index over the 0-100cm interval   p0_100 <- hz_segment(p, 0:100)    ccol <- parseMunsell(p$c_horizon_color, convertColors = FALSE)    sum(harden.rubification(     hue = p0_100$hue,     chroma = as.numeric(p0_100$chroma),     hue_ref = ccol$hue,     chroma_ref = as.numeric(ccol$chroma)   ), na.rm = TRUE)  })  jacobs2000$rubiforder <- order(jacobs2000$rubif)  # Plot in order of increasing Rubification index  plotSPC(jacobs2000, color = \"matrix_color\", label = \"rubif\", plot.order = jacobs2000$rubiforder, max.depth = 250 )  segments(   x0 = 0.5,    x1 = length(jacobs2000) + 0.5,    y0 = c(0,100,150,200),    y1 = c(0,100,150,200),    lty = 2 )  # Add [estimated] parent material color swatches trash <- sapply(seq_along(jacobs2000$c_horizon_color), function(i) {   rect(i - 0.15, 250, i + 0.15, 225,        col = parseMunsell(jacobs2000$c_horizon_color[jacobs2000$rubiforder[i]])) })"},{"path":"https://ncss-tech.github.io/aqp/reference/harmonize-SoilProfileCollection-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize a property by profile-level denormalization for convenient visualization or analysis of ranges — harmonize,SoilProfileCollection-method","title":"Harmonize a property by profile-level denormalization for convenient visualization or analysis of ranges — harmonize,SoilProfileCollection-method","text":"sometimes convenient able \"denormalize\" SoilProfileCollection fewer attributes profiles. helpful wherever calculations made profile basis ranges repeated measures depicted multiple attributes per soil horizon. harmonize commonly used creating \"comparison\" soil profile sketches plotSPC–thematic attribute derived multiple data sources summary statistics (quantiles property Low-RV-High). However, method generally applies wherever one wants alias multiple columns containing \"similar\" data input algorithm. Data \"harmonized\" common attribute names specified names list elements x.names. Profiles essentially duplicated. order satisfy uniqueness constraints SoilProfileCollection, label sub-elements x.names used disambiguate profiles. new column site table calculated reflect groupings facilitate filtering. See examples .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harmonize-SoilProfileCollection-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize a property by profile-level denormalization for convenient visualization or analysis of ranges — harmonize,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' harmonize(x, x.names, keep.cols = NULL, grp.name = \"hgroup\")"},{"path":"https://ncss-tech.github.io/aqp/reference/harmonize-SoilProfileCollection-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize a property by profile-level denormalization for convenient visualization or analysis of ranges — harmonize,SoilProfileCollection-method","text":"x SoilProfileCollection. x.names named list character vectors specifying target names, profile ID suffixes source attribute names harmonization keep.cols character vector column names keep unaltered horizon data grp.name character vector column name store grouping variable site table (default: \"hgroup\")","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harmonize-SoilProfileCollection-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize a property by profile-level denormalization for convenient visualization or analysis of ranges — harmonize,SoilProfileCollection-method","text":"(redundant) SoilProfileCollection, one profile set harmonizations specified x.names.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harmonize-SoilProfileCollection-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Harmonize a property by profile-level denormalization for convenient visualization or analysis of ranges — harmonize,SoilProfileCollection-method","text":"attributes reflecting similar property within soil layer different names (e.g. socQ05, socQ50, socQ95) sometimes inconvenient work multiple attributes within profile. similar attributes may need analyzed together, sequence profile, displayed using name using common scale. also useful able alias different data sources attributes different names. list element x.names specifies single \"harmonization,\" comprised one mappings new old. named \"sub-element\" x.names specifies name attribute use updating profile ID site table  duplicated profiles.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harmonize-SoilProfileCollection-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Harmonize a property by profile-level denormalization for convenient visualization or analysis of ranges — harmonize,SoilProfileCollection-method","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/harmonize-SoilProfileCollection-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize a property by profile-level denormalization for convenient visualization or analysis of ranges — harmonize,SoilProfileCollection-method","text":"","code":"### single source \"harmonization\" of single-profile with range -> single attribute, multi-profile  # make some test data spc <- combine(lapply(1:10, random_profile, SPC = TRUE))  # assume that p1, p2 and p3 are the low RV and high quantiles for a hypothetical property \"foo\" h1 <- harmonize(spc, x.names = list(foo = c(q05 = \"p1\", q50 = \"p2\", q95 = \"p3\")))  # inspect result plotSPC(h1, color = \"foo\")   # filter with calculated \"harmonized group\" to get just RV profiles plotSPC(subset(h1, hgroup == \"q50\"), color=\"foo\")   ### single source, two properties at once; with common labels: \"method1\" \"method2\"  # assume that p1, p2 are measurements by two (!=) methods for a hypothetical property \"foo\" #             p3, p4 are measurements by same two methods for a hypothetical property \"bar\" h3 <- harmonize(spc, x.names = list(foo = c(method1 = \"p1\", method2 = \"p2\"),                                     bar = c(method1 = \"p3\", method2 = \"p4\"))) plotSPC(h3, color = \"foo\")  plotSPC(h3, color = \"bar\")  head(horizons(h3)) #>           id top bottom       foo         bar hzID #> 1 10_method1   0     15 -3.949882  -0.4669061    1 #> 2 10_method1  15     43 -9.046262  -0.1005962    2 #> 3 10_method1  43     68 -1.072998 -10.6224367    3 #> 4 10_method2   0     15  8.020219   8.7493569    4 #> 5 10_method2  15     43  9.242370  17.9955380    5 #> 6 10_method2  43     68  1.133050  25.4371732    6  # a slight modification, \"method 1\" onlyused for \"foo\" and \"method 3\" for \"bar\" h3 <- harmonize(spc, x.names = list(foo = c(method1 = \"p1\", method2 = \"p2\"),                                     bar = c(method2 = \"p3\", method3 = \"p4\"))) plotSPC(h3, color = \"foo\") # note the pattern of values missing for foo (*_method3)  plotSPC(h3, color = \"bar\") #  likewise for bar (*_method1)   #' the new labels need not match across harmonizations -- not sure how useful this is but it works h3 <- harmonize(spc, x.names = list(foo = c(method1 = \"p1\", method2 = \"p2\"),                                     bar = c(method3 = \"p3\", method4 = \"p4\"))) plotSPC(h3, color = \"foo\") # note the pattern of values missing for foo (*_method 3 + 4)  plotSPC(h3, color = \"bar\") #  likewise for bar (*_method 1 + 2)   ### two-source harmonization  # make test data spc1 <- combine(lapply(LETTERS[1:5], random_profile, SPC = TRUE)) spc2 <- combine(lapply(letters[1:5], random_profile, SPC = TRUE))  h4 <- combine(list(harmonize(spc1, list(foo = c(transect1 = \"p4\"))),   # foo is p4 in dataset 1                       harmonize(spc2, list(foo = c(transect2 = \"p2\")))))  # foo is p2 in dataset 2  # same property with different name in two different datasets plotSPC(h4, color = \"foo\")   ### many source harmonization  # make test datasets (n=10); highly redundant IDs (1:3 repeated) spcs <- lapply(1:10, function(x) pbindlist(lapply(1:3, random_profile, SPC = TRUE)))  # randomly varying column name for demo (in each dataset, foo could could be p1 thru p5) rcolname <- paste0(\"p\", round(runif(10, 0.5, 5.5)))  # iterate over data sources bigspc <- combine(lapply(1:length(spcs), function(i) {    # assume each data source has a unique name for the property \"foo\"   xn <- rcolname[i]    # set names attribute to be equal to index i [creating unique profile IDs]   #   i.e. 2_10 will be profile ID 2 from 10th dataset   names(xn) <- i    # harmonize each data source, using unique column name and target name \"foo\"   harmonize(spcs[[i]], x.names = list(foo = xn)) }))  # inspect a subset plotSPC(bigspc[1:30,], color = \"foo\")"},{"path":"https://ncss-tech.github.io/aqp/reference/hasDarkColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Find horizons with colors darker than a Munsell hue, value, chroma threshold — hasDarkColors","title":"Find horizons with colors darker than a Munsell hue, value, chroma threshold — hasDarkColors","text":"hasDarkColors returns boolean value horizon representing whether darkness thresholds met. code fully vectorized deals missing data optional thresholds. Default arguments set \"5-3-3 colors\" – basic criteria Mollic/Umbric epipedon/mineral soil darkness. thresholds column names can altered. thresholds set equal NA ignored.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hasDarkColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find horizons with colors darker than a Munsell hue, value, chroma threshold — hasDarkColors","text":"","code":"hasDarkColors(   p,   d_hue = NA,   m_hue = NA,   d_value = 5,   d_chroma = NA,   m_value = 3,   m_chroma = 3,   dhuenm = \"d_hue\",   dvalnm = \"d_value\",   dchrnm = \"d_chroma\",   mhuenm = \"m_hue\",   mvalnm = \"m_value\",   mchrnm = \"m_chroma\" )"},{"path":"https://ncss-tech.github.io/aqp/reference/hasDarkColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find horizons with colors darker than a Munsell hue, value, chroma threshold — hasDarkColors","text":"p SoilProfileCollection. d_hue Optional: character vector dry hues match (default: NA) m_hue Optional: character vector moist hues match (default: NA) d_value Maximum value dry value (default: 5) d_chroma Optional: Maximum value dry chroma (default: NA) m_value Maximum value moist value (default: 3) m_chroma Maximum value moist chroma (default: 3) dhuenm Column name containing dry hue. dvalnm Column name containing dry value. dchrnm Column name containing dry chroma. mhuenm Column name containing moist hue. mvalnm Column name containing moist value. mchrnm Column name containing moist chroma.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hasDarkColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find horizons with colors darker than a Munsell hue, value, chroma threshold — hasDarkColors","text":"Boolean value (horizon p) reflecting whether \"darkness\" criteria met.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hasDarkColors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find horizons with colors darker than a Munsell hue, value, chroma threshold — hasDarkColors","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hasDarkColors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find horizons with colors darker than a Munsell hue, value, chroma threshold — hasDarkColors","text":"","code":"# construct a fake profile spc <- data.frame(id=1, taxsubgrp = \"Lithic Haploxeralfs\",                   hzdesgn  = c(\"A\",\"AB\",\"Bt\",\"BCt\",\"R\"),                   hzdept   = c(0, 20, 32, 42,  49),                   hzdepb   = c(20, 32, 42, 49, 200),                   d_value  = c(5,   5,  5,  6,  NA),                   m_value  = c(2.5, 3,  3,  4,  NA),                   m_chroma = c(2,   3,  4,  4,  NA))  # promote to SoilProfileCollection depths(spc) <- id ~ hzdept + hzdepb  # print results in table data.frame(id = spc[[idname(spc)]],            hz_desgn = spc$hzdesgn,            has_dark_colors = hasDarkColors(spc)) #>   id hz_desgn has_dark_colors #> 1  1        A            TRUE #> 2  1       AB            TRUE #> 3  1       Bt           FALSE #> 4  1      BCt           FALSE #> 5  1        R              NA"},{"path":"https://ncss-tech.github.io/aqp/reference/horizonColorIndices.html","id":null,"dir":"Reference","previous_headings":"","what":"Horizon Color Indices — horizonColorIndices","title":"Horizon Color Indices — horizonColorIndices","text":"Calculate basic horizon-level color indices SoilProfileCollection. Basic indices require aggregation whole profile comparison \"reference\" (e.g. parent material) color. Includes Hurst (1977) Redness Index, Barron-Torrent Redness Index (1986) Buntley-Westin Index (1965). wrapper method around several horizon-level indices. See individual functions details.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/horizonColorIndices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horizon Color Indices — horizonColorIndices","text":"","code":"horizonColorIndices(p, hue = \"m_hue\", value = \"m_value\", chroma = \"m_chroma\")"},{"path":"https://ncss-tech.github.io/aqp/reference/horizonColorIndices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horizon Color Indices — horizonColorIndices","text":"p SoilProfileCollection hue Column name containing moist hue; default: \"m_hue\" value Column name containing moist value; default: \"m_value\" chroma Column name containing moist chroma; default: \"m_chroma\"","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/horizonColorIndices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Horizon Color Indices — horizonColorIndices","text":"data.frame containing unique pedon horizon IDs horizon-level color indices.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/horizonColorIndices.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Horizon Color Indices — horizonColorIndices","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/horizonColorIndices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Horizon Color Indices — horizonColorIndices","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  data(sp1)  # promote sp1 data to SoilProfileCollection depths(sp1) <- id ~ top + bottom  # move site data site(sp1) <- ~ group  # use Munsell color notation as horizon name sp1$m <- sprintf(\"%s %s/%s\", sp1$hue, sp1$value, sp1$chroma)  # compute indices # merged into `sp1` with left-join on hzidname(sp1) horizons(sp1) <- horizonColorIndices(sp1, hue=\"hue\", value=\"value\", chroma=\"chroma\")  # visualize par(mar = c(0, 1, 3, 1)) plotSPC(sp1, color='hurst_redness', name = 'm') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()  plotSPC(sp1, color='barron_torrent_redness', name = 'm') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()  plotSPC(sp1, color='buntley_westin', name = 'm') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()"},{"path":"https://ncss-tech.github.io/aqp/reference/horizonDepths.html","id":null,"dir":"Reference","previous_headings":"","what":"Set horizon depth column names — horizonDepths<-","title":"Set horizon depth column names — horizonDepths<-","text":"Set column name containing horizon ID Get column names containing horizon depths","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/horizonDepths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set horizon depth column names — horizonDepths<-","text":"","code":"# S4 method for class 'SoilProfileCollection' horizonDepths(object) <- value  # S4 method for class 'SoilProfileCollection' horizonDepths(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/horizonDepths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set horizon depth column names — horizonDepths<-","text":"object SoilProfileCollection value character vector length two names columns containing numeric top bottom depths","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/horizonNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Set horizon column names — horizonNames<-","title":"Set horizon column names — horizonNames<-","text":"Set horizon column names Get names columns horizon table.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/horizonNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set horizon column names — horizonNames<-","text":"","code":"# S4 method for class 'SoilProfileCollection' horizonNames(object) <- value  # S4 method for class 'SoilProfileCollection' horizonNames(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/horizonNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set horizon column names — horizonNames<-","text":"object SoilProfileCollection value unique vector equal length number columns horizons length(horizonNames(object))","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/horizons.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve horizon data from SoilProfileCollection — horizons,SoilProfileCollection-method","title":"Retrieve horizon data from SoilProfileCollection — horizons,SoilProfileCollection-method","text":"Get horizon data SoilProfileCollection. Result returned data.frame class used initially construct SoilProfileCollection. Horizon data object inheriting data.frame can easily added via merge (LEFT JOIN). must one -named columns (least matching data) left right hand side facilitate join: horizons(spc) <- newdata","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/horizons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve horizon data from SoilProfileCollection — horizons,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' horizons(object)  # S4 method for class 'SoilProfileCollection' horizons(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/horizons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve horizon data from SoilProfileCollection — horizons,SoilProfileCollection-method","text":"object SoilProfileCollection value object inheriting data.frame","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/horizons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve horizon data from SoilProfileCollection — horizons,SoilProfileCollection-method","text":"","code":"# load test data data(sp2)  # promote to SPC depths(sp2) <- id ~ top + bottom  # assign true to surface horizon newdata <- data.frame(top = 0,                       newvalue = TRUE)  # do left join horizons(sp2) <- newdata  # inspect site table: newvalue TRUE only for horizons #  with top depth equal to zero horizons(sp2) #>     top     id         surface bottom bound_distinct bound_topography  name #> 1     0  hon-1        holocene     12              A                S     A #> 2    12  hon-1        holocene     16              A                S   2A1 #> 3    16  hon-1        holocene     25              C                S   2A2 #> 4    25  hon-1        holocene     49              C                S   2AC #> 5    49  hon-1        holocene     85              C                S    2C #> 6    85  hon-1        holocene     95              A                S   3C1 #> 7    95  hon-1        holocene    122           <NA>             <NA>   3C2 #> 8   122  hon-1        holocene    140           <NA>             <NA>   4C1 #> 9   140  hon-1        holocene    170           <NA>             <NA>   4C2 #> 10    0 hon-10   lower modesto     22              C                W    Ap #> 11   22 hon-10   lower modesto     40              G                S    BA #> 12   40 hon-10   lower modesto     86              G                S   Bt1 #> 13   86 hon-10   lower modesto    132              C                S   Bt2 #> 14  132 hon-10   lower modesto    150              C                S    BC #> 15  150 hon-10   lower modesto    205              A                W     C #> 16  205 hon-10   lower modesto    225           <NA>             <NA>    2C #> 17    0 hon-11   lower modesto     18              A                W    Ap #> 18   18 hon-11   lower modesto     45              G                S    BA #> 19   45 hon-11   lower modesto     94              G                S   Bt1 #> 20   94 hon-11   lower modesto    125              C                W   Bt2 #> 21  125 hon-11   lower modesto    145              G                W    BC #> 22  145 hon-11   lower modesto    179              A                W     C #> 23  179 hon-11   lower modesto    220           <NA>             <NA>    2C #> 24    0 hon-13   upper modesto     24              A                S    Ap #> 25   24 hon-13   upper modesto     33              C                S    BA #> 26   33 hon-13   upper modesto     50              C                S  BAt1 #> 27   50 hon-13   upper modesto     62              C                S  BAt2 #> 28   62 hon-13   upper modesto     86              C                S   Bt1 #> 29   86 hon-13   upper modesto    102              C                S   Bt2 #> 30  102 hon-13   upper modesto    123              C                S   Bt3 #> 31  123 hon-13   upper modesto    157              G                W   BCt #> 32  157 hon-13   upper modesto    208           <NA>             <NA> 2BCt1 #> 33  208 hon-13   upper modesto    245              G                W 2BCt2 #> 34  245 hon-13   upper modesto    266              D                W 2BCt3 #> 35  266 hon-13   upper modesto    301           <NA>             <NA>   2CB #> 36    0 hon-14   upper modesto     28              A                S    Ap #> 37   28 hon-14   upper modesto     39              C                S    BA #> 38   39 hon-14   upper modesto     59              C                S  BAt1 #> 39   59 hon-14   upper modesto     76              C                S  BAt2 #> 40   76 hon-14   upper modesto    111              C                W   Bt1 #> 41  111 hon-14   upper modesto    126              C                W   Bt2 #> 42  126 hon-14   upper modesto    150              G                W 2BCt1 #> 43  150 hon-14   upper modesto    200              G                W 2BCt2 #> 44  200 hon-14   upper modesto    260              D                W 2BCt3 #> 45  260 hon-14   upper modesto    320           <NA>             <NA>   2CB #> 46    0 hon-17 lower riverbank     18              C                W   Ap1 #> 47   18 hon-17 lower riverbank     24              A                W   Ap2 #> 48   24 hon-17 lower riverbank     76              G                W    BA #> 49   76 hon-17 lower riverbank    100              G                W   Bt1 #> 50  100 hon-17 lower riverbank    160              C                W   Bt2 #> 51  160 hon-17 lower riverbank    201              G                W  2BCt #> 52  201 hon-17 lower riverbank    208              C                S  3BCt #> 53  208 hon-17 lower riverbank    295           <NA>             <NA>  4BCt #> 54    0 hon-18 lower riverbank     19              C                W   Ap1 #> 55   19 hon-18 lower riverbank     30              A                W   Ap2 #> 56   30 hon-18 lower riverbank     90              G                W    BA #> 57   90 hon-18 lower riverbank    113              C                W   Bt1 #> 58  113 hon-18 lower riverbank    170              G                W   Bt2 #> 59  170 hon-18 lower riverbank    190              C                W  2BCt #> 60  190 hon-18 lower riverbank    240              C                S  3BCt #> 61  240 hon-18 lower riverbank    300           <NA>             <NA>  4BCt #> 62    0 hon-19 lower riverbank      7              C                W   Ap1 #> 63    7 hon-19 lower riverbank     24              A                W   Ap2 #> 64   24 hon-19 lower riverbank     63              G                W    BA #> 65   63 hon-19 lower riverbank     91              C                W   Bt1 #> 66   91 hon-19 lower riverbank    126              G                W   Bt2 #> 67  126 hon-19 lower riverbank    176              C                W   Bt3 #> 68  176 hon-19 lower riverbank    218              C                S   BCt #> 69  218 hon-19 lower riverbank    246              G                S 2BCt1 #> 70  246 hon-19 lower riverbank    268              G                S 2BCt2 #> 71  268 hon-19 lower riverbank    300           <NA>             <NA> 2BCt3 #> 72  300 hon-19 lower riverbank    320           <NA>             <NA>  3Cox #> 73  320 hon-19 lower riverbank    410           <NA>             <NA>  3Cox #> 74    0  hon-2        holocene      4              A                S    A1 #> 75    4  hon-2        holocene     32              A                W    A2 #> 76   32  hon-2        holocene     61              C                S     C #> 77   61  hon-2        holocene     92              C                S    2C #> 78   92  hon-2        holocene    103           <NA>             <NA>    3C #> 79  103  hon-2        holocene    130           <NA>             <NA>    4C #> 80    0 hon-20 lower riverbank     11              C                W   Ap1 #> 81   11 hon-20 lower riverbank     30              A                W   Ap2 #> 82   30 hon-20 lower riverbank     60              C                W    BA #> 83   60 hon-20 lower riverbank    114              C                I   Bt1 #> 84  114 hon-20 lower riverbank    191              C                W   Bt2 #> 85  191 hon-20 lower riverbank    223              G                S 2BCt1 #> 86  223 hon-20 lower riverbank    260              G                S 2BCt2 #> 87  260 hon-20 lower riverbank    283           <NA>             <NA>   2CB #> 88    0 hon-21    lower laguna     11              C                S     A #> 89   11 hon-21    lower laguna     33              C                W    AB #> 90   33 hon-21    lower laguna     46              A                W    BA #> 91   46 hon-21    lower laguna     71              C                W   Bt1 #> 92   71 hon-21    lower laguna     93              C                W   Bt2 #> 93   93 hon-21    lower laguna    119              C                W   Bt3 #> 94  119 hon-21    lower laguna    148              G                W   Bt4 #> 95  148 hon-21    lower laguna    197              G                W  2Bt1 #> 96  197 hon-21    lower laguna    274              D                W  2Bt2 #> 97  274 hon-21    lower laguna    315              D                W   2BC #> 98  315 hon-21    lower laguna    473              A                I   3BC #> 99  473 hon-21    lower laguna   1300           <NA>             <NA>     C #> 100   0 hon-22    lower laguna     23              C                W     A #> 101  23 hon-22    lower laguna     43              C                W    AB #> 102  43 hon-22    lower laguna     59              A                W    BA #> 103  59 hon-22    lower laguna     89              C                W   Bt1 #> 104  89 hon-22    lower laguna    120              C                W   Bt2 #> 105 120 hon-22    lower laguna    154              G                S   Bt3 #> 106 154 hon-22    lower laguna    207              G                S  2Bt1 #> 107 207 hon-22    lower laguna    270              G                W  2Bt2 #> 108 270 hon-22    lower laguna    342              G                W  2BCt #> 109 342 hon-22    lower laguna    455              G                W 3BCt1 #> 110 455 hon-22    lower laguna    505              A                W 3BCt2 #> 111 505 hon-22    lower laguna   1300           <NA>             <NA>     C #> 112   0  hon-3        holocene      4              A                S    A1 #> 113   4  hon-3        holocene     16              G                S    A2 #> 114  16  hon-3        holocene     31              A                W    AC #> 115  31  hon-3        holocene     54              A                W     C #> 116  54  hon-3        holocene     78           <NA>             <NA>    2C #> 117   0  hon-4        holocene     17              A                S     C #> 118  17  hon-4        holocene     32              C                S    2A #> 119  32  hon-4        holocene     49              C                S   2AC #> 120  49  hon-4        holocene     86              G                S    2C #> 121  86  hon-4        holocene    113              G                S   3C1 #> 122 113  hon-4        holocene    147           <NA>             <NA>   3C2 #> 123   0  hon-5   upper modesto     13              A                W   Ap1 #> 124  13  hon-5   upper modesto     23              C                W   Ap2 #> 125  23  hon-5   upper modesto     54              C                S    BA #> 126  54  hon-5   upper modesto     88              C                S   Bw1 #> 127  88  hon-5   upper modesto    102              C                S   Bw2 #> 128 102  hon-5   upper modesto    141              G                S   BC1 #> 129 141  hon-5   upper modesto    180           <NA>             <NA>   BC2 #> 130   0  hon-6   upper modesto     10              A                W   Ap1 #> 131  10  hon-6   upper modesto     22              C                W   Ap2 #> 132  22  hon-6   upper modesto     43              C                S    BA #> 133  43  hon-6   upper modesto     91              C                S   Bw1 #> 134  91  hon-6   upper modesto    118              C                S   Bw2 #> 135 118  hon-6   upper modesto    157              G                S   BC1 #> 136 157  hon-6   upper modesto    184           <NA>             <NA>   BC2 #> 137   0  hon-7   upper modesto      8              C                S   Ap1 #> 138   8  hon-7   upper modesto     30              C                S   Ap2 #> 139  30  hon-7   upper modesto     54              G                S    BA #> 140  54  hon-7   upper modesto     88              G                S   Bw1 #> 141  88  hon-7   upper modesto    118              G                S   Bw2 #> 142 118  hon-7   upper modesto    180              C                S    BC #> 143 180  hon-7   upper modesto    230           <NA>             <NA>   2BC #> 144 230  hon-7   upper modesto    290           <NA>             <NA>  3Cox #> 145 290  hon-7   upper modesto    340           <NA>             <NA>  4Cox #> 146 340  hon-7   upper modesto    370           <NA>             <NA>   4Cn #> 147   0  hon-8   upper modesto      7              A                S  Ap-1 #> 148   7  hon-8   upper modesto     34              C                S  Ap-2 #> 149  34  hon-8   upper modesto     57              C                S    BA #> 150  57  hon-8   upper modesto     90              C                W  Bw-1 #> 151  90  hon-8   upper modesto    126              G                S  Bw-2 #> 152 126  hon-8   upper modesto    191              G                S   BC1 #> 153 191  hon-8   upper modesto    240           <NA>             <NA>   BC2 #> 154 240  hon-8   upper modesto    390           <NA>             <NA>  2Cox #>      texture prop structure_grade structure_size structure_type stickiness #> 1          L   16               1              F             GR         SS #> 2        sil   17               1              F             GR         SS #> 3          L   16               1              F             GR         SS #> 4          L   16               0           <NA>             MA         SS #> 5          L   13              NA           <NA>             MA         SS #> 6         sl   11              NA           <NA>             MA         SO #> 7         sl   12              NA           <NA>             MA         SO #> 8       <NA>   11              NA           <NA>           <NA>       <NA> #> 9       <NA>   13              NA           <NA>           <NA>       <NA> #> 10      sgsl   11               1             CO            SBK         SS #> 11      sgsl   12              NA           <NA>             MA         SO #> 12      sgsl   12               2           <NA>             MA         SS #> 13      sgsl   14               2           <NA>             MA         SS #> 14      sgsl   11               2           <NA>             MA         SS #> 15      sgsl    8              NA           <NA>             MA         SO #> 16       fsl    8              NA           <NA>             MA         SO #> 17      sgsl   14               1              M            SBK         SS #> 18      sgsl   12              NA           <NA>             MA         SS #> 19      sgsl   13               2           <NA>             MA         SS #> 20      sgsl   15               2           <NA>             MA         MS #> 21      sgsl   11               2           <NA>             MA         SS #> 22      sgsl   10              NA           <NA>             MA         SO #> 23       sil    8              NA           <NA>             MA         SS #> 24       sil   17              NA           <NA>            CDY         SS #> 25     sil-l   20              NA           <NA>             MA         SS #> 26     sil-l   23               2           <NA>             MA         SS #> 27        l+   26               2              M             PR         MS #> 28        c-   43               3              M             PR         VS #> 29       SIC   51               3           <NA>             MA         VS #> 30      SIC-   42               3              M            ABK         MS #> 31      sicl   34               3              M            ABK         SS #> 32      <NA>   26              NA           <NA>           <NA>       <NA> #> 33        cl   24              NA           <NA>             MA         SS #> 34      scl-   21              NA           <NA>             MA         SS #> 35        sl   17              NA           <NA>             MA         SO #> 36       sil   16              NA           <NA>             MA         SS #> 37       sil   22              NA           <NA>             MA         SS #> 38       sil   23               2              M            SBK         SS #> 39        cl   30               2              F             PR         MS #> 40       SIC   45               3              M             PR         VS #> 41        cl   37               3              M            ABK         MS #> 42        cl   34               3              M            ABK         MS #> 43   cl-sicl   30               2           <NA>             MA         SS #> 44       cl-   27              NA           <NA>             MA         SS #> 45      scl-   23              NA           <NA>             MA         SO #> 46         l   18              NA           <NA>            CDY         SS #> 47         l   18              NA           <NA>             MA         SS #> 48       cl-   27               2              M             MA         MS #> 49        cl   30               2           <NA>             MA         MS #> 50        cl   33               2              F             PR         MS #> 51       scl   25              NA           <NA>             MA         MS #> 52       cl-   27              NA           <NA>             MA         MS #> 53     vgscl   21              NA           <NA>             MA         MS #> 54         l   17               2              M            SBK         SS #> 55         l   17              NA           <NA>             MA       <NA> #> 56         L   26               2             VF           <NA>         MS #> 57        cl   29               2           <NA>             MA         MS #> 58      sicl   34               3              M             PR         VS #> 59        CL   28              NA           <NA>             MA         MS #> 60        CL   29              NA           <NA>             MA         MS #> 61    GRVSCL   21              NA           <NA>             MA         SS #> 62         l   16              NA           <NA>            CDY         SO #> 63         l   19              NA           <NA>             MA         SO #> 64        l+   24               2              M            SBK         SS #> 65        l+   24               2           <NA>             MA         MS #> 66        cl   33               3              M             PR         MS #> 67        cl   34               3              F             MA         MS #> 68      scl-   27               2              M            ABK         SS #> 69      sgsl   20              NA           <NA>             MA         SS #> 70      sgsl   15              NA           <NA>             MA         SS #> 71         l   14              NA           <NA>             MA         SO #> 72      <NA>   11              NA           <NA>           <NA>       <NA> #> 73      <NA>   13              NA           <NA>           <NA>       <NA> #> 74       sil   20               2              F             GR         SS #> 75     sil-1   20              NA           <NA>             MA         SS #> 76         L   13              NA           <NA>             MA         SO #> 77      L-sl   13              NA           <NA>             MA         SS #> 78         L   16              NA           <NA>             MA         SS #> 79      <NA>   16              NA           <NA>           <NA>       <NA> #> 80         l   17              NA           <NA>            CDY         SO #> 81         l   18              NA           <NA>             MA         SO #> 82        l+   24               2             VF             MA         SS #> 83        l+   25               2           <NA>             MA         SS #> 84        cl   33               3              M             PR         MS #> 85    sgscl-   22               2             CO            ABK         SS #> 86     sgsl+   18              NA           <NA>            SGR         SS #> 87        sl   11              NA           <NA>             MA         SO #> 88       sl+   18               2             CO            SBK         SO #> 89       scl   25               2             CO            SBK         SO #> 90  sgscl-cl   30               2           <NA>             MA         SS #> 91       sgc   51               3           <NA>             MA         MS #> 92       sgc   55               1              F             PR         MS #> 93       sgc   51               1              M             PR         MS #> 94       sgc   48               1              M             PR         MS #> 95       grc   45               3           <NA>             MA         SS #> 96      grcl   35               2           <NA>             MA         SS #> 97      grcl   33               2           <NA>             MA         SS #> 98   extg l+   26               2              F           <NA>         SO #> 99        sl   12              NA           <NA>             MA         SO #> 100     scl-   22               2             CO            SBK         SS #> 101    sgscl   29               1              M            SBK         SS #> 102      sgc   44               2              M            SBK         MS #> 103      sgc   55               3           <NA>             MA         MS #> 104      sgc   51               3              M           <NA>         MS #> 105      sgc   51               3           <NA>             MA         MS #> 106      grc   47               3           <NA>             MA         MS #> 107   grcl++   39               3              F            ABK         SS #> 108    vgscl   30               2           <NA>             MA         SS #> 109   extgcl   23               1              F           <NA>         SS #> 110    extg+   34               1              F           <NA>         SS #> 111       sl   18              NA           <NA>             MA         SO #> 112      sil   24               2              F             GR         SS #> 113      sil   22               1              F             GR         SS #> 114      sil   21               1              M           <NA>         SS #> 115        L   13              NA           <NA>             MA         SO #> 116        L   14              NA           <NA>             MA         SS #> 117       sl    9              NA           <NA>            SGR         SO #> 118        L   16               2              F             GR         SS #> 119      sil   17              NA           <NA>             MA         SS #> 120        L   15              NA           <NA>             MA         SS #> 121       sl   11              NA           <NA>             MA         SO #> 122       sl   10              NA           <NA>             MA         SO #> 123      sil   23              NA           <NA>             MA         SS #> 124      sil   23               2              F             GR         SS #> 125     sil+   25              NA           <NA>             MA         SS #> 126      sil   24               2              M           <NA>         SS #> 127      sil   23               2              M            ABK         SS #> 128    sil-1   22               2              M            ABK         SS #> 129    sil-1   22               1              M            ABK         SS #> 130      sil   23              NA              M            CDY         SS #> 131      sil   24              NA           <NA>             MA         SS #> 132      sil   24              NA           <NA>             MA         SS #> 133        L   22               2              M            ABK         SS #> 134        L   22               2              M            ABK         SS #> 135        L   23               2              M            ABK         SS #> 136        L   22               1              M            ABK         SS #> 137        L   19              NA           <NA>            CDY         SS #> 138        L   20              NA           <NA>             MA         SS #> 139    sil-1   21              NA           <NA>             MA         SS #> 140        L   23               2           <NA>             MA         SS #> 141        L   21               2           <NA>             MA         SS #> 142     <NA>   22               2           <NA>             MA         SS #> 143    sicl-   28               1              F           <NA>         SS #> 144     <NA>   17              NA           <NA>           <NA>       <NA> #> 145     <NA>    8              NA           <NA>           <NA>       <NA> #> 146     <NA>    6              NA           <NA>           <NA>       <NA> #> 147        L   19              NA           <NA>            CDY         SO #> 148        L   20              NA           <NA>             MA         SO #> 149        L   23               1              M            SBK         SS #> 150        L   21               2           <NA>             MA         SS #> 151        L   21               1           <NA>            SGR         SS #> 152        L   23               2           <NA>             MA         SS #> 153    L-sil   19               1           <NA>            SGR         SS #> 154     <NA>    5              NA           <NA>           <NA>       <NA> #>     plasticity field_ph     hue value chroma         r         g          b #> 1           PO      6.5    10YR   3.0    3.0 0.3522797 0.2688590 0.17574632 #> 2           PO      6.6    10YR   3.0    2.5        NA        NA         NA #> 3           SP      6.5    10YR   3.0    3.0 0.3522797 0.2688590 0.17574632 #> 4           SP      6.6   7.5YR   4.0    3.0 0.4706220 0.3590875 0.27082863 #> 5           PO      6.8   7.5YR   4.0    3.0 0.4706220 0.3590875 0.27082863 #> 6           PO      6.7   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 7           PO      7.0   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 8         <NA>       NA    <NA>    NA     NA        NA        NA         NA #> 9         <NA>       NA    <NA>    NA     NA        NA        NA         NA #> 10          PO      6.8   7.5YR   3.0    2.0 0.3433252 0.2694211 0.21692139 #> 11          PO      6.8   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 12          SP      6.8   7.5YR   4.0    3.0 0.4706220 0.3590875 0.27082863 #> 13          SP      7.2 5-7.5YR   3.0    4.0        NA        NA         NA #> 14          PO      7.2   7.5YR   4.0    3.0 0.4706220 0.3590875 0.27082863 #> 15          PO      7.2   7.5YR   4.0    3.0 0.4706220 0.3590875 0.27082863 #> 16          PO      7.2    2.5Y   4.0    3.0 0.4428399 0.3717701 0.24837880 #> 17          PO      6.6   7.5YR   3.0    2.0 0.3433252 0.2694211 0.21692139 #> 18          SP      7.0   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 19          SP      7.0   7.5YR   4.0    3.0 0.4706220 0.3590875 0.27082863 #> 20          MP      7.1   7.5YR   3.0    4.0 0.3827022 0.2567391 0.15069361 #> 21          PO      7.2   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 22          PO      7.3   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 23          PO      7.3    2.5Y   5.0    4.0 0.5620372 0.4702857 0.29727835 #> 24          PO      5.5   7.5YR   6.0    6.0 0.7440717 0.5444687 0.34754585 #> 25          SP      6.3     5YR   4.0    4.0 0.5026314 0.3462401 0.24995558 #> 26          SP      6.5     5YR   4.0    4.0 0.5026314 0.3462401 0.24995558 #> 27          MP      6.8     5YR   4.0    5.0 0.5227043 0.3383386 0.21952529 #> 28          VP      6.8     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 29          VP      6.6     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 30          VP      7.1     5YR   4.0    5.0 0.5227043 0.3383386 0.21952529 #> 31          MP      7.1   7.5YR   4.0    6.0 0.5252055 0.3404370 0.15784923 #> 32        <NA>       NA    <NA>    NA     NA        NA        NA         NA #> 33          SP      7.1     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 34          SP      6.9     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 35          SP      6.7     5YR   4.0    5.0 0.5227043 0.3383386 0.21952529 #> 36          PO      5.6   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 37          SP      6.1   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 38          MP      6.5     5YR   4.0    5.0 0.5227043 0.3383386 0.21952529 #> 39          MP      6.7     5YR   4.0    5.0 0.5227043 0.3383386 0.21952529 #> 40          VP      6.7     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 41          VP      7.0     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 42          MP      7.1   7.5YR   5.0    6.0 0.6373120 0.4408493 0.24846998 #> 43          SP      6.9   7.5YR   5.0    6.0 0.6373120 0.4408493 0.24846998 #> 44          SP      6.8     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 45          SP      6.8     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 46          SP      5.7     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 47          SP      5.7     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 48          SP      6.1   2.5YR   3.0    4.0 0.4047002 0.2430202 0.18367986 #> 49          SP      6.4   2.5YR   3.0    5.0 0.4268174 0.2319252 0.15787833 #> 50          MP      6.6   2.5YR   3.0    5.0 0.4268174 0.2319252 0.15787833 #> 51          MP      6.8   2.5YR   5.0    6.0 0.6642703 0.4232155 0.31003272 #> 52          SP      6.9     5YR   4.0    5.0 0.5227043 0.3383386 0.21952529 #> 53          SP      6.8     5YR   5.0    6.0 0.6516906 0.4320947 0.27623886 #> 54          SP      5.5     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 55        <NA>      5.5     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 56          SP      6.1   2.5YR   3.0    5.0 0.4268174 0.2319252 0.15787833 #> 57          SP      6.6   2.5YR   3.0    5.0 0.4268174 0.2319252 0.15787833 #> 58          MP      6.8   2.5YR   3.0    6.0 0.4468915 0.2206162 0.12794174 #> 59          MP      6.9   2.5YR   3.0    6.0 0.4468915 0.2206162 0.12794174 #> 60          MP      6.8     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 61          PO      6.8   2.5YR   4.0    6.0 0.5550868 0.3205433 0.21624665 #> 62          PO      6.3     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 63          SP      6.0     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 64          SP      6.1   2.5YR   3.0    5.0 0.4268174 0.2319252 0.15787833 #> 65          MP      6.2   2.5YR   3.0    5.0 0.4268174 0.2319252 0.15787833 #> 66          MP      6.6   2.5YR   3.0    6.0 0.4468915 0.2206162 0.12794174 #> 67          MP      7.0   2.5YR   3.0    6.0 0.4468915 0.2206162 0.12794174 #> 68          SP      6.9     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 69          SP      7.2     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 70          SP      7.1     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 71          PO      6.9     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 72        <NA>       NA    <NA>    NA     NA        NA        NA         NA #> 73        <NA>       NA    <NA>    NA     NA        NA        NA         NA #> 74          SP      5.6    10YR   3.0    2.5        NA        NA         NA #> 75          SP      6.2    10YR   3.0    2.5        NA        NA         NA #> 76          PO      6.8    10YR   3.0    3.0 0.3522797 0.2688590 0.17574632 #> 77          PO      7.1    10YR   4.0    4.0 0.4765699 0.3603870 0.21438027 #> 78          SP      7.2    10YR   3.0    3.0 0.3522797 0.2688590 0.17574632 #> 79        <NA>       NA    <NA>    NA     NA        NA        NA         NA #> 80          PO      6.2     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 81          SP      6.2     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 82          SP      6.3     5YR   3.0    5.0 0.4134797 0.2413405 0.13580495 #> 83          MP      6.8   2.5YR   3.0    5.0 0.4268174 0.2319252 0.15787833 #> 84          MP      7.1   2.5YR   3.0    6.0 0.4468915 0.2206162 0.12794174 #> 85          MP      6.8     5YR   5.0    6.0 0.6516906 0.4320947 0.27623886 #> 86          SP      6.9     5YR   4.0    6.0 0.5409717 0.3305930 0.18529327 #> 87          PO       NA   7.5YR   5.0    6.0 0.6373120 0.4408493 0.24846998 #> 88          PO      6.2   2.5YR   3.0    4.0 0.4047002 0.2430202 0.18367986 #> 89          SP      6.2   2.5YR   3.0    4.0 0.4047002 0.2430202 0.18367986 #> 90          SP      6.2   2.5YR   3.0    4.0 0.4047002 0.2430202 0.18367986 #> 91          MP      5.7    10YR   3.0    5.0 0.3814261 0.2600469 0.09577498 #> 92          MP      5.3    10YR   3.0    5.0 0.3814261 0.2600469 0.09577498 #> 93          MP      5.0    10YR   3.0    6.0 0.3934784 0.2558781 0.03398692 #> 94          MP      4.9    10YR   3.0    6.0 0.3934784 0.2558781 0.03398692 #> 95          MP      5.0    10YR   3.0    6.0 0.3934784 0.2558781 0.03398692 #> 96          MP      5.3   2.5YR   3.0    6.0 0.4468915 0.2206162 0.12794174 #> 97          PO      5.7   2.5YR   3.0    6.0 0.4468915 0.2206162 0.12794174 #> 98          PO      6.1     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 99          PO      6.2   7.5YR   4.0    3.0 0.4706220 0.3590875 0.27082863 #> 100         SP      6.4   2.5YR   3.0    4.0 0.4047002 0.2430202 0.18367986 #> 101         SP      6.7   2.5YR   3.0    5.0 0.4268174 0.2319252 0.15787833 #> 102         MP      6.7   2.5YR   3.0    5.0 0.4268174 0.2319252 0.15787833 #> 103         MP      6.9    10YR   3.0    6.0 0.3934784 0.2558781 0.03398692 #> 104         MP      5.9    10YR   3.0    6.0 0.3934784 0.2558781 0.03398692 #> 105         MP      5.4    10YR   3.0    6.0 0.3934784 0.2558781 0.03398692 #> 106         MP      5.4    10YR   3.0    6.0 0.3934784 0.2558781 0.03398692 #> 107         MP      5.4    10YR   3.0    6.0 0.3934784 0.2558781 0.03398692 #> 108         SP      5.5   2.5YR   3.0    4.0 0.4047002 0.2430202 0.18367986 #> 109         PO      6.1     5YR   3.0    4.0 0.3940324 0.2499977 0.16682669 #> 110         PO      6.0     5YR   4.0    4.0 0.5026314 0.3462401 0.24995558 #> 111         PO      6.9     5YR   4.0    4.0 0.5026314 0.3462401 0.24995558 #> 112         SP      5.9    10YR   3.0    3.0 0.3522797 0.2688590 0.17574632 #> 113         SP      5.8    10YR   3.0    3.0 0.3522797 0.2688590 0.17574632 #> 114         SP      6.1    10YR   3.0    3.0 0.3522797 0.2688590 0.17574632 #> 115         PO      7.1    10YR   4.0    3.0 0.4578366 0.3653270 0.25754623 #> 116         SP      7.0    10YR   4.0    3.0 0.4578366 0.3653270 0.25754623 #> 117         PO      6.5    10YR   4.0    3.0 0.4578366 0.3653270 0.25754623 #> 118         SP      6.9    10YR   3.0    3.0 0.3522797 0.2688590 0.17574632 #> 119         SP      6.6    10YR   3.0    3.0 0.3522797 0.2688590 0.17574632 #> 120         SP      6.7    10YR   3.5    3.0        NA        NA         NA #> 121         PO      6.8    10YR   4.0    3.0 0.4578366 0.3653270 0.25754623 #> 122         PO      6.7    10YR   4.0    3.0 0.4578366 0.3653270 0.25754623 #> 123         SP      6.2   7.5YR   3.0    2.0 0.3433252 0.2694211 0.21692139 #> 124         SP      6.3   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 125         SP      6.7   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 126         SP      7.0   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 127         SP      7.1   7.5YR   3.0    4.0 0.3827022 0.2567391 0.15069361 #> 128         SP      7.2   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 129         SP      7.3   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 130         SP      6.2   7.5YR   3.0    2.0 0.3433252 0.2694211 0.21692139 #> 131         SP      6.4   7.5YR   3.0    2.0 0.3433252 0.2694211 0.21692139 #> 132         SP      6.6   7.5YR   3.0    2.0 0.3433252 0.2694211 0.21692139 #> 133         SP      7.0   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 134         PO      7.0   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 135         SP      7.2   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 136         PO      7.4   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 137         SP      5.6   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 138         SP      5.7   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 139         SP      6.6   7.5YR   3.0    2.5        NA        NA         NA #> 140         SP      7.0   7.5YR   4.0    6.0 0.5252055 0.3404370 0.15784923 #> 141         SP      7.2   7.5YR   3.0    4.0 0.3827022 0.2567391 0.15069361 #> 142         SP      7.3   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 143         SP      7.2    10YR   4.0    3.0 0.4578366 0.3653270 0.25754623 #> 144       <NA>       NA    <NA>    NA     NA        NA        NA         NA #> 145       <NA>       NA    <NA>    NA     NA        NA        NA         NA #> 146       <NA>       NA    <NA>    NA     NA        NA        NA         NA #> 147         SP      5.6   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 148         MP      5.8   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 149         SP      6.3   7.5YR   3.0    3.0 0.3644985 0.2628982 0.18559713 #> 150         SP      6.8   7.5YR   3.0    4.0 0.3827022 0.2567391 0.15069361 #> 151         SP      7.1   7.5YR   3.0    4.0 0.3827022 0.2567391 0.15069361 #> 152         SP      7.3   7.5YR   4.0    4.0 0.4923909 0.3523340 0.23133285 #> 153         SP      7.3   7.5YR   4.0    3.0 0.4706220 0.3590875 0.27082863 #> 154       <NA>       NA    <NA>    NA     NA        NA        NA         NA #>     soil_color hzID newvalue #> 1    #5A452DFF    1     TRUE #> 2         <NA>    2       NA #> 3    #5A452DFF    3       NA #> 4    #785C45FF    4       NA #> 5    #785C45FF    5       NA #> 6    #7E5A3BFF    6       NA #> 7    #7E5A3BFF    7       NA #> 8         <NA>    8       NA #> 9         <NA>    9       NA #> 10   #584537FF   10     TRUE #> 11   #5D432FFF   11       NA #> 12   #785C45FF   12       NA #> 13        <NA>   13       NA #> 14   #785C45FF   14       NA #> 15   #785C45FF   15       NA #> 16   #715F3FFF   16       NA #> 17   #584537FF   17     TRUE #> 18   #5D432FFF   18       NA #> 19   #785C45FF   19       NA #> 20   #624126FF   20       NA #> 21   #7E5A3BFF   21       NA #> 22   #7E5A3BFF   22       NA #> 23   #8F784CFF   23       NA #> 24   #BE8B59FF   24     TRUE #> 25   #805840FF   25       NA #> 26   #805840FF   26       NA #> 27   #855638FF   27       NA #> 28   #8A542FFF   28       NA #> 29   #8A542FFF   29       NA #> 30   #855638FF   30       NA #> 31   #865728FF   31       NA #> 32        <NA>   32       NA #> 33   #8A542FFF   33       NA #> 34   #8A542FFF   34       NA #> 35   #855638FF   35       NA #> 36   #7E5A3BFF   36     TRUE #> 37   #7E5A3BFF   37       NA #> 38   #855638FF   38       NA #> 39   #855638FF   39       NA #> 40   #8A542FFF   40       NA #> 41   #8A542FFF   41       NA #> 42   #A3703FFF   42       NA #> 43   #A3703FFF   43       NA #> 44   #8A542FFF   44       NA #> 45   #8A542FFF   45       NA #> 46   #64402BFF   46     TRUE #> 47   #64402BFF   47       NA #> 48   #673E2FFF   48       NA #> 49   #6D3B28FF   49       NA #> 50   #6D3B28FF   50       NA #> 51   #A96C4FFF   51       NA #> 52   #855638FF   52       NA #> 53   #A66E46FF   53       NA #> 54   #64402BFF   54     TRUE #> 55   #64402BFF   55       NA #> 56   #6D3B28FF   56       NA #> 57   #6D3B28FF   57       NA #> 58   #723821FF   58       NA #> 59   #723821FF   59       NA #> 60   #8A542FFF   60       NA #> 61   #8E5237FF   61       NA #> 62   #64402BFF   62     TRUE #> 63   #64402BFF   63       NA #> 64   #6D3B28FF   64       NA #> 65   #6D3B28FF   65       NA #> 66   #723821FF   66       NA #> 67   #723821FF   67       NA #> 68   #8A542FFF   68       NA #> 69   #8A542FFF   69       NA #> 70   #8A542FFF   70       NA #> 71   #8A542FFF   71       NA #> 72        <NA>   72       NA #> 73        <NA>   73       NA #> 74        <NA>   74     TRUE #> 75        <NA>   75       NA #> 76   #5A452DFF   76       NA #> 77   #7A5C37FF   77       NA #> 78   #5A452DFF   78       NA #> 79        <NA>   79       NA #> 80   #64402BFF   80     TRUE #> 81   #64402BFF   81       NA #> 82   #693E23FF   82       NA #> 83   #6D3B28FF   83       NA #> 84   #723821FF   84       NA #> 85   #A66E46FF   85       NA #> 86   #8A542FFF   86       NA #> 87   #A3703FFF   87       NA #> 88   #673E2FFF   88     TRUE #> 89   #673E2FFF   89       NA #> 90   #673E2FFF   90       NA #> 91   #614218FF   91       NA #> 92   #614218FF   92       NA #> 93   #644109FF   93       NA #> 94   #644109FF   94       NA #> 95   #644109FF   95       NA #> 96   #723821FF   96       NA #> 97   #723821FF   97       NA #> 98   #64402BFF   98       NA #> 99   #785C45FF   99       NA #> 100  #673E2FFF  100     TRUE #> 101  #6D3B28FF  101       NA #> 102  #6D3B28FF  102       NA #> 103  #644109FF  103       NA #> 104  #644109FF  104       NA #> 105  #644109FF  105       NA #> 106  #644109FF  106       NA #> 107  #644109FF  107       NA #> 108  #673E2FFF  108       NA #> 109  #64402BFF  109       NA #> 110  #805840FF  110       NA #> 111  #805840FF  111       NA #> 112  #5A452DFF  112     TRUE #> 113  #5A452DFF  113       NA #> 114  #5A452DFF  114       NA #> 115  #755D42FF  115       NA #> 116  #755D42FF  116       NA #> 117  #755D42FF  117     TRUE #> 118  #5A452DFF  118       NA #> 119  #5A452DFF  119       NA #> 120       <NA>  120       NA #> 121  #755D42FF  121       NA #> 122  #755D42FF  122       NA #> 123  #584537FF  123     TRUE #> 124  #5D432FFF  124       NA #> 125  #5D432FFF  125       NA #> 126  #5D432FFF  126       NA #> 127  #624126FF  127       NA #> 128  #7E5A3BFF  128       NA #> 129  #7E5A3BFF  129       NA #> 130  #584537FF  130     TRUE #> 131  #584537FF  131       NA #> 132  #584537FF  132       NA #> 133  #5D432FFF  133       NA #> 134  #5D432FFF  134       NA #> 135  #7E5A3BFF  135       NA #> 136  #7E5A3BFF  136       NA #> 137  #5D432FFF  137     TRUE #> 138  #5D432FFF  138       NA #> 139       <NA>  139       NA #> 140  #865728FF  140       NA #> 141  #624126FF  141       NA #> 142  #7E5A3BFF  142       NA #> 143  #755D42FF  143       NA #> 144       <NA>  144       NA #> 145       <NA>  145       NA #> 146       <NA>  146       NA #> 147  #5D432FFF  147     TRUE #> 148  #5D432FFF  148       NA #> 149  #5D432FFF  149       NA #> 150  #624126FF  150       NA #> 151  #624126FF  151       NA #> 152  #7E5A3BFF  152       NA #> 153  #785C45FF  153       NA #> 154       <NA>  154       NA"},{"path":"https://ncss-tech.github.io/aqp/reference/huePosition.html","id":null,"dir":"Reference","previous_headings":"","what":"Munsell Hue Reference and Position Searching — huePosition","title":"Munsell Hue Reference and Position Searching — huePosition","text":"40 Munsell hues typically arranged 5R 2.5R moving clock wise unit circle. function matches vector hues positions circle, options setting custom origin search direction. function fully vectorized.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/huePosition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Munsell Hue Reference and Position Searching — huePosition","text":"","code":"huePosition(   x,   returnHues = FALSE,   includeNeutral = FALSE,   origin = \"5R\",   direction = c(\"cw\", \"ccw\") )"},{"path":"https://ncss-tech.github.io/aqp/reference/huePosition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Munsell Hue Reference and Position Searching — huePosition","text":"x character vector hues, e.g. c('10YR', '5YR'), optional returnHues = TRUE returnHues logical, full set Munsell hues returned? See details. includeNeutral logical, add 'N' end full set Munsell hues origin hue used starting point position searches (position 1) direction indexing direction, cw (clock wise) ccw (counter-clock wise)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/huePosition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Munsell Hue Reference and Position Searching — huePosition","text":"vector integer hue positions returned, length order x. returnHues = TRUE, hue names ordering returned x ignored.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/huePosition.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Munsell Hue Reference and Position Searching — huePosition","text":"Soil Survey Technical Note 2 wayback machine URL Munsell book color. 1976. Macbeth, Division Kollmorgen Corp., Baltimore, MD.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/huePosition.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Munsell Hue Reference and Position Searching — huePosition","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/huePosition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Munsell Hue Reference and Position Searching — huePosition","text":"","code":"# get hue ordering for setting levels of a factor huePosition(returnHues = TRUE) #>  [1] \"5R\"    \"7.5R\"  \"10R\"   \"2.5YR\" \"5YR\"   \"7.5YR\" \"10YR\"  \"2.5Y\"  \"5Y\"    #> [10] \"7.5Y\"  \"10Y\"   \"2.5GY\" \"5GY\"   \"7.5GY\" \"10GY\"  \"2.5G\"  \"5G\"    \"7.5G\"  #> [19] \"10G\"   \"2.5BG\" \"5BG\"   \"7.5BG\" \"10BG\"  \"2.5B\"  \"5B\"    \"7.5B\"  \"10B\"   #> [28] \"2.5PB\" \"5PB\"   \"7.5PB\" \"10PB\"  \"2.5P\"  \"5P\"    \"7.5P\"  \"10P\"   \"2.5RP\" #> [37] \"5RP\"   \"7.5RP\" \"10RP\"  \"2.5R\"   # get hue ordering including N (neutral) huePosition(returnHues = TRUE, includeNeutral = TRUE) #>  [1] \"5R\"    \"7.5R\"  \"10R\"   \"2.5YR\" \"5YR\"   \"7.5YR\" \"10YR\"  \"2.5Y\"  \"5Y\"    #> [10] \"7.5Y\"  \"10Y\"   \"2.5GY\" \"5GY\"   \"7.5GY\" \"10GY\"  \"2.5G\"  \"5G\"    \"7.5G\"  #> [19] \"10G\"   \"2.5BG\" \"5BG\"   \"7.5BG\" \"10BG\"  \"2.5B\"  \"5B\"    \"7.5B\"  \"10B\"   #> [28] \"2.5PB\" \"5PB\"   \"7.5PB\" \"10PB\"  \"2.5P\"  \"5P\"    \"7.5P\"  \"10P\"   \"2.5RP\" #> [37] \"5RP\"   \"7.5RP\" \"10RP\"  \"2.5R\"  \"N\"      # get position of the '10YR' hue, relative to standard origin of '5R' # should be 7 huePosition(x = '10YR') #> [1] 7  # get position of the '10YR' hue, relative to standard origin of '5YR' # should be 3 huePosition(x = '10YR', origin = '5YR') #> [1] 3  # visualize op <- par(mar = c(0, 0, 0, 0), fg = 'white', bg = 'black')  huePositionCircle(huePosition(returnHues = TRUE, origin = '5YR'))   par(op)"},{"path":"https://ncss-tech.github.io/aqp/reference/huePositionCircle.html","id":null,"dir":"Reference","previous_headings":"","what":"Visual Description of Munsell Hue Ordering — huePositionCircle","title":"Visual Description of Munsell Hue Ordering — huePositionCircle","text":"Munsell hues arranged unit circle \"neutral\" center.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/huePositionCircle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visual Description of Munsell Hue Ordering — huePositionCircle","text":"","code":"huePositionCircle(   hues = huePosition(returnHues = TRUE),   value = 6,   chroma = 10,   chip.cex = 5.5,   label.cex = 0.66,   seg.adj = 0.8,   seg.col = grey(0.4),   plot = TRUE,   simulateCVD = NULL,   CVDseverity = 1 )"},{"path":"https://ncss-tech.github.io/aqp/reference/huePositionCircle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visual Description of Munsell Hue Ordering — huePositionCircle","text":"hues vector Munsell hues, commonly derived huePosition() value single integer, Munsell value used create actual color chroma single integer, Munsell chroma used create actual color chip.cex numeric, scaling color chips label.cex numeric, scaling labels seg.adj numeric, scaling line segment cues seg.col single color, color used line segment cues plot logical, generate output current graphics device simulateCVD simulate color vision deficiencies colorspace package, character representation function name, one : 'deutan', 'protan', 'tritan'. CVDseverity numeric value 0 (none) 1 (total), describing severity color vision deficiency","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/huePositionCircle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visual Description of Munsell Hue Ordering — huePositionCircle","text":"invisible data.frame data used create figure","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/huePositionCircle.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Visual Description of Munsell Hue Ordering — huePositionCircle","text":"best results obtained setting margins zero, inverting foreground / background colors. example: par(mar = c(0, 0, 0, 0), fg = 'white', bg = 'black').","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/huePositionCircle.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Visual Description of Munsell Hue Ordering — huePositionCircle","text":"Munsell book color. 1976. Macbeth, Division Kollmorgen Corp., Baltimore, MD.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/huePositionCircle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visual Description of Munsell Hue Ordering — huePositionCircle","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))   # better graphics defaults op <- par( mar = c(0, 0, 0, 0),  fg = 'white',  bg = 'black',  xpd = NA )  # full set of hues, as generated by huePosition(returnHues = TRUE) huePositionCircle()   # just a few hues huePositionCircle(hues = c('5R', '5Y', '5G', '5B', '5P'))   # adjust Munsell value and chroma huePositionCircle(value = 3, chroma = 6)   # reset graphics state par(op)"},{"path":"https://ncss-tech.github.io/aqp/reference/hurst.redness.html","id":null,"dir":"Reference","previous_headings":"","what":"Hurst (1977) Redness Index — hurst.redness","title":"Hurst (1977) Redness Index — hurst.redness","text":"Calculate Redness Index Hurst (1977) \"Visual estimation iron saprolite\" DOI: 10.1130/0016-7606(1977)88<174:VEOIIS>2.0.CO;2. Accepts vectorized inputs hue, value chroma, produces vector output.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hurst.redness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hurst (1977) Redness Index — hurst.redness","text":"","code":"hurst.redness(hue, value, chroma)"},{"path":"https://ncss-tech.github.io/aqp/reference/hurst.redness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hurst (1977) Redness Index — hurst.redness","text":"hue character vector containing Munsell hues (e.g. \"7.5YR\") value numeric vector containing Munsell values chroma numeric vector containing Munsell chromas","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hurst.redness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hurst (1977) Redness Index — hurst.redness","text":"numeric vector horizon redness index (lower values = redder).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hurst.redness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hurst (1977) Redness Index — hurst.redness","text":"Hurst, V.J. (1977) Visual estimation iron saprolite. GSA Bulletin. 88(2): 174–176. doi: https://doi.org/10.1130/0016-7606(1977)88<174:VEOIIS>2.0.CO;2","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hurst.redness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Hurst (1977) Redness Index — hurst.redness","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDepthTests.html","id":null,"dir":"Reference","previous_headings":"","what":"Tests of horizon depth logic — hzDepthTests","title":"Tests of horizon depth logic — hzDepthTests","text":"Function used internally checkHzDepthLogic(), glom() various functions operate horizon data single soil profiles require priori depth logic checks. Checks bottom depths less top depth / bad top depth order (\"depthLogic\"), bottom depths equal top depth (\"sameDepth\"), overlaps/gaps (\"overlapOrGap\") missing depths (\"missingDepth\"). Use names(res)[res] result res hzDepthTest() determine type logic error(s) found – see examples .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDepthTests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tests of horizon depth logic — hzDepthTests","text":"","code":"hzDepthTests(top, bottom = NULL)"},{"path":"https://ncss-tech.github.io/aqp/reference/hzDepthTests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tests of horizon depth logic — hzDepthTests","text":"top numeric vector containing horizon top depths. data.frame two columns (first containing top depths, second containing bottom) bottom numeric vector containing horizon bottom depths.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDepthTests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tests of horizon depth logic — hzDepthTests","text":"named logical vector containing TRUE type horizon logic error found given data.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDepthTests.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tests of horizon depth logic — hzDepthTests","text":"Andrew G. Brown & Dylan E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDepthTests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tests of horizon depth logic — hzDepthTests","text":"","code":"# no logic errors res <- hzDepthTests(top = c(0,10,20,30), bottom = c(10,20,30,50)) names(res)[res] #> character(0)  # bottom < top hzDepthTests(top = c(10,20,30,50), bottom = c(0,10,20,30)) #>   depthLogic    sameDepth missingDepth overlapOrGap  #>         TRUE        FALSE        FALSE         TRUE  names(res)[res] #> character(0)  # bottom == top hzDepthTests(top = c(10,20,30,50), bottom = c(0,20,20,30)) #>   depthLogic    sameDepth missingDepth overlapOrGap  #>         TRUE         TRUE        FALSE         TRUE  names(res)[res] #> character(0)  # overlap hzDepthTests(top = c(0,5,20,30), bottom = c(10,20,30,50)) #>   depthLogic    sameDepth missingDepth overlapOrGap  #>        FALSE        FALSE        FALSE         TRUE  names(res)[res] #> character(0)  # gap hzDepthTests(top = c(0,15,20,30), bottom = c(10,20,30,50)) #>   depthLogic    sameDepth missingDepth overlapOrGap  #>        FALSE        FALSE        FALSE         TRUE  names(res)[res] #> character(0)  # missing hzDepthTests(c(0,15,NA,30),c(10,NA,30,50)) #>   depthLogic    sameDepth missingDepth overlapOrGap  #>         TRUE        FALSE         TRUE         TRUE  names(res)[res] #> character(0)"},{"path":"https://ncss-tech.github.io/aqp/reference/hzDesgn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get horizon designation column name — hzDesgn,SoilProfileCollection-method","title":"Get horizon designation column name — hzDesgn,SoilProfileCollection-method","text":"Get horizon designation names","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDesgn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get horizon designation column name — hzDesgn,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' hzDesgn(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/hzDesgn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get horizon designation column name — hzDesgn,SoilProfileCollection-method","text":"object SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDistinctnessCodeToOffset.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Horizon Boundary Distinctness to Vertical Offset — hzDistinctnessCodeToOffset","title":"Convert Horizon Boundary Distinctness to Vertical Offset — hzDistinctnessCodeToOffset","text":"function convert USDA-NCSS horizon boundary distinctness codes vertical (+/-) offsets cm, based Field Book Describing Sampling Soils, version 3.0.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDistinctnessCodeToOffset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Horizon Boundary Distinctness to Vertical Offset — hzDistinctnessCodeToOffset","text":"","code":"hzDistinctnessCodeToOffset(   x,   codes = c(\"very abrupt\", \"abrupt\", \"clear\", \"gradual\", \"diffuse\"),   offset = c(0.5, 2, 5, 15, 20)/2 )"},{"path":"https://ncss-tech.github.io/aqp/reference/hzDistinctnessCodeToOffset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Horizon Boundary Distinctness to Vertical Offset — hzDistinctnessCodeToOffset","text":"x vector boundary distinctness codes converted codes character vector distinctness terms ('clear') codes ('C'), case insensitive, see details offset vertical offset factors (cm), approximating 1/2 transitional zone thickness, see details","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDistinctnessCodeToOffset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Horizon Boundary Distinctness to Vertical Offset — hzDistinctnessCodeToOffset","text":"vector offsets length x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDistinctnessCodeToOffset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Horizon Boundary Distinctness to Vertical Offset — hzDistinctnessCodeToOffset","text":"default offsets based high-end ranges presented \"transitional zone thickness criteria\" Field Book version 3.0 (page 2-6). Offsets returned 1/2 transitional zone thickness horizon boundaries can adjusted /horizon depths. See plotSPC, specifically hz.distinctness.offset argument visualization ideas. Missing data x (NA) codes defined codes returned 0 offsets. Either format (mixture) accepted, case insensitive: terms: c('abrupt', 'abrupt', 'clear', 'gradual', 'diffuse') coded values: c('v', '', 'c', 'g', d') Additional examples available Visualization Horizon Boundaries tutorial.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDistinctnessCodeToOffset.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert Horizon Boundary Distinctness to Vertical Offset — hzDistinctnessCodeToOffset","text":"Field Book Describing Sampling Soils, version 3.0","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hzDistinctnessCodeToOffset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Horizon Boundary Distinctness to Vertical Offset — hzDistinctnessCodeToOffset","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzDistinctnessCodeToOffset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Horizon Boundary Distinctness to Vertical Offset — hzDistinctnessCodeToOffset","text":"","code":"# example data data(sp1)  # compute 1/2 transitional zone thickness from distinctness codes sp1$hzdo <- hzDistinctnessCodeToOffset(sp1$bound_distinct)  # convert colors from Munsell to hex-encoded RGB sp1$soil_color <- with(sp1, munsell2rgb(hue, value, chroma))  # promote to SoilProfileCollection depths(sp1) <- id ~ top + bottom hzdesgnname(sp1) <- 'name'  # adjust margins op <- par(mar=c(0,0,0,1.5))  # sketches, adjust width, adjust text size, include coded hz distinctness offsets plotSPC(sp1, width=0.3, cex.names=0.75, hz.distinctness.offset = 'hzdo') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   # clean-up par(op)"},{"path":"https://ncss-tech.github.io/aqp/reference/hzID.html","id":null,"dir":"Reference","previous_headings":"","what":"Set horizon IDs — hzID<-,SoilProfileCollection-method","title":"Set horizon IDs — hzID<-,SoilProfileCollection-method","text":"Set vector containing horizon IDs Get vector containing horizon IDs","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set horizon IDs — hzID<-,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' hzID(object) <- value  # S4 method for class 'SoilProfileCollection' hzID(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/hzID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set horizon IDs — hzID<-,SoilProfileCollection-method","text":"object SoilProfileCollection value unique vector equal length number horizons nrow(object)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get horizon-level metadata — hzMetadata,SoilProfileCollection-method","title":"Get horizon-level metadata — hzMetadata,SoilProfileCollection-method","text":"Get idname(object) hzidname(object), hzdesgnname(object), hztexclname(object) (defined)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get horizon-level metadata — hzMetadata,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' hzMetadata(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/hzMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get horizon-level metadata — hzMetadata,SoilProfileCollection-method","text":"object SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzOffset.html","id":null,"dir":"Reference","previous_headings":"","what":"Horizons Above or Below — hzAbove","title":"Horizons Above or Below — hzAbove","text":"Horizons ","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzOffset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horizons Above or Below — hzAbove","text":"","code":"hzAbove(x, ..., offset = 1, SPC = TRUE, simplify = SPC)  hzBelow(x, ..., offset = 1, SPC = TRUE, simplify = SPC)  hzOffset(x, hzid, offset, SPC = FALSE, simplify = TRUE)"},{"path":"https://ncss-tech.github.io/aqp/reference/hzOffset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horizons Above or Below — hzAbove","text":"x SoilProfileCollection ... Comma-separated set R expressions evaluate TRUE FALSE context horizon data frame. Length individual expressions matches number horizons, x. offset Integer offset terms SoilProfileCollection [,j] (horizon/slice) index SPC Return SoilProfileCollection? Default TRUE horizon_* methods. simplify TRUE return vector (elements combined), list (1 element per profile). SPC TRUE simplify TRUE. hzid vector target horizon IDs. calculated ... horizon_*() methods","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzOffset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Horizons Above or Below — hzAbove","text":"SoilProfileCollection (SPC = TRUE) vector horizon row indices (SPC = FALSE simplify = TRUE) list (SPC = FALSE simplify = FALSE))","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzOffset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Horizons Above or Below — hzAbove","text":"minimize likelihood issues non-standard evaluation context, especially using hzAbove()/hzBelow() inside another function, expressions used ... terms variables horizon data frame.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzOffset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Horizons Above or Below — hzAbove","text":"","code":"data(sp4) depths(sp4) <- id ~ top + bottom  # get the horizon above the last horizon (j-index of bottom horizon minus 1) hzAbove(sp4, hzID(sp4) %in% getLastHorizonID(sp4)) #> Error: unable to find an inherited method for function ‘hzID’ for signature ‘object = \"data.frame\"’  # get horizons below the last horizon (none; j-index of bottom horizon plus 1) hzBelow(sp4, hzID(sp4) %in% getLastHorizonID(sp4)) #> Error: unable to find an inherited method for function ‘hzID’ for signature ‘object = \"data.frame\"’"},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToLineType.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Horizon Boundary Topography to Line Type — hzTopographyCodeToLineType","title":"Convert Horizon Boundary Topography to Line Type — hzTopographyCodeToLineType","text":"function convert USDA-NCSS horizon boundary topography codes line types, based Field Book Describing Sampling Soils, version 3.0.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToLineType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Horizon Boundary Topography to Line Type — hzTopographyCodeToLineType","text":"","code":"hzTopographyCodeToLineType(   x,   codes = c(\"smooth\", \"wavy\", \"irregular\", \"broken\"),   lty = c(1, 2, 3, 4) )"},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToLineType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Horizon Boundary Topography to Line Type — hzTopographyCodeToLineType","text":"x vector boundary topography codes converted codes character vector topography terms ('smooth') codes ('S'), case insensitive, see details lty line types","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToLineType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Horizon Boundary Topography to Line Type — hzTopographyCodeToLineType","text":"vector line types length x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToLineType.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Horizon Boundary Topography to Line Type — hzTopographyCodeToLineType","text":"Visualization horizon boundary topography can difficult, line type offers additional visual cue. See hzTopographyCodeToOffset offset-based approach. Additional examples available Visualization Horizon Boundaries tutorial. Missing data x (NA) codes defined codes returned line type 1. Either format (mixture) accepted, case insensitive: terms: c('smooth', 'wavy', 'irregular', 'broken') coded values: c('s', 'w', '', 'b')","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToLineType.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert Horizon Boundary Topography to Line Type — hzTopographyCodeToLineType","text":"Field Book Describing Sampling Soils, version 3.0","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToLineType.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Horizon Boundary Topography to Line Type — hzTopographyCodeToLineType","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToOffset.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Horizon Boundary Topography to Vertical Offset — hzTopographyCodeToOffset","title":"Convert Horizon Boundary Topography to Vertical Offset — hzTopographyCodeToOffset","text":"function convert USDA-NCSS horizon boundary topography codes vertical offset, suitable use plotSPC. Default values reasonable starting points encoding smooth, wavy, irregular, broken style horizon boundary topography defined Field Book Describing Sampling Soils, version 3.0.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToOffset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Horizon Boundary Topography to Vertical Offset — hzTopographyCodeToOffset","text":"","code":"hzTopographyCodeToOffset(   x,   codes = c(\"smooth\", \"wavy\", \"irregular\", \"broken\"),   offset = c(0, 4, 8, 12) )"},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToOffset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Horizon Boundary Topography to Vertical Offset — hzTopographyCodeToOffset","text":"x vector boundary topography codes converted codes character vector topography terms ('smooth') codes ('S'), case insensitive, see details offset vertical offset (depth units) used create \"chevron\" effect","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToOffset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Horizon Boundary Topography to Vertical Offset — hzTopographyCodeToOffset","text":"vector vertical offsets length x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToOffset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Horizon Boundary Topography to Vertical Offset — hzTopographyCodeToOffset","text":"Additional examples available Visualization Horizon Boundaries tutorial. Missing data x (NA) codes defined codes returned offset 0. Either format (mixture) accepted, case insensitive: terms: c('smooth', 'wavy', 'irregular', 'broken') coded values: c('s', 'w', '', 'b')","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToOffset.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert Horizon Boundary Topography to Vertical Offset — hzTopographyCodeToOffset","text":"Field Book Describing Sampling Soils, version 3.0","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hzTopographyCodeToOffset.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Horizon Boundary Topography to Vertical Offset — hzTopographyCodeToOffset","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTransitionProbabilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Horizon Transition Probabilities — hzTransitionProbabilities","title":"Horizon Transition Probabilities — hzTransitionProbabilities","text":"Functions creating working horizon (sequence) transition probability matrices. See following tutorials ideas: horizon designation TP soil color TP","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTransitionProbabilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Horizon Transition Probabilities — hzTransitionProbabilities","text":"","code":"hzTransitionProbabilities(   x,   name = GHL(x, required = TRUE),   loopTerminalStates = FALSE )  mostLikelyHzSequence(mc, t0, maxIterations = 10)"},{"path":"https://ncss-tech.github.io/aqp/reference/hzTransitionProbabilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Horizon Transition Probabilities — hzTransitionProbabilities","text":"x SoilProfileCollection object. name horizon level attribute x names horizons. loopTerminalStates terminal states loop back ? useful transition probability matrix used initialize markovchain object. See examples . mc Passed markovchain conditionalDistribution() t0 Passed markovchain conditionalDistribution() maxIterations Maximum number iterations. Default: 10","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTransitionProbabilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Horizon Transition Probabilities — hzTransitionProbabilities","text":"square matrix transition probabilities. See examples. function genhzTableToAdjMat() returns square adjacency matrix. See examples. function mostLikelyHzSequence() returns likely sequence horizons, given markovchain object initialized horizon transition probabilities initial state, t0. See examples.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTransitionProbabilities.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Horizon Transition Probabilities — hzTransitionProbabilities","text":"functions still experimental subject change.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hzTransitionProbabilities.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Horizon Transition Probabilities — hzTransitionProbabilities","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzTransitionProbabilities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Horizon Transition Probabilities — hzTransitionProbabilities","text":"","code":"data(sp4) depths(sp4) <- id ~ top + bottom  # horizon transition probabilities: row -> col transitions (tp <- hzTransitionProbabilities(sp4, 'name')) #> Warning: ties in transition probability matrix #>     A A1 A2 AB       ABt        Bt       Bt1 Bt2 Bt3 #> A   0  0  0  0 0.1111111 0.4444444 0.4444444   0   0 #> A1  0  0  1  0 0.0000000 0.0000000 0.0000000   0   0 #> A2  0  0  0  1 0.0000000 0.0000000 0.0000000   0   0 #> AB  0  0  0  0 0.0000000 0.0000000 1.0000000   0   0 #> ABt 0  0  0  0 0.0000000 0.0000000 1.0000000   0   0 #> Bt  0  0  0  0 0.0000000 0.0000000 0.0000000   0   0 #> Bt1 0  0  0  0 0.0000000 0.0000000 0.0000000   1   0 #> Bt2 0  0  0  0 0.0000000 0.0000000 0.0000000   0   1 #> Bt3 0  0  0  0 0.0000000 0.0000000 0.0000000   0   0 #> attr(,\"ties\") #> [1] TRUE"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_dissolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissolving horizon boundaries by grouping variables — hz_dissolve","title":"Dissolving horizon boundaries by grouping variables — hz_dissolve","text":"function dissolves combines horizons common set grouping variables. combines horizon records sequential (e.g. share horizon boundary). Thus, can used identify discontinuities grouping variables along profile unique depths. particularly useful determining depth top bottom horizons specific category, simpler previous methods require aggregating profiles.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_dissolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissolving horizon boundaries by grouping variables — hz_dissolve","text":"","code":"hz_dissolve(   object,   by,   idcol = \"id\",   depthcols = c(\"top\", \"bottom\"),   collapse = FALSE,   order = FALSE )  dissolve_hz(   object,   by,   id = \"idcol\",   hztop = \"top\",   hzbot = \"bottom\",   collapse = FALSE,   order = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_dissolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dissolving horizon boundaries by grouping variables — hz_dissolve","text":"object data.frame character: column names, used grouping variables, within object. idcol character: column name pedon ID within object. depthcols character vector length 2 specifying names horizon depths (e.g. c(\"top\", \"bottom\")). collapse logical: indicating whether combine grouping variables dissolving. order logical: indicating whether order object id, hztop, hzbot columns. id deprecated replaced idcol. hztop deprecated replaced depthcols. hzbot deprecated replaced depthcols.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_dissolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dissolving horizon boundaries by grouping variables — hz_dissolve","text":"data.frame original idcol, grouping variables, non-consecutive horizon depths.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_dissolve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dissolving horizon boundaries by grouping variables — hz_dissolve","text":"function assumes profiles horizons within object follow logic defined checkHzDepthLogic (e.g. records ordered sequentially id, hztop, hzbot without gaps). records ordered, set order = TRUE.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hz_dissolve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Dissolving horizon boundaries by grouping variables — hz_dissolve","text":"Stephen Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_dissolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dissolving horizon boundaries by grouping variables — hz_dissolve","text":"","code":"# example 1 data(jacobs2000) spc <- jacobs2000  spc$dep_5 <- spc$depletion_pct >=5 spc$genhz <- generalize.hz(spc$name, c(\"A\", \"E\", \"B\", \"C\"), c(\"A\", \"E\", \"B\", \"C\"))  h <- horizons(spc)  test <- hz_dissolve(h, by = c(\"genhz\", \"dep_5\"), idcol = \"id\", depthcols = c(\"top\", \"bottom\")) #> non-character grouping variables are being converted to characters  vars <- c(\"id\", \"top\", \"bottom\", \"genhz\", \"dep_5\") h[h$id == \"92-1\", vars] #>     id top bottom genhz dep_5 #> 1 92-1   0     18     A FALSE #> 2 92-1  18     43     E FALSE #> 3 92-1  43     79     B FALSE #> 4 92-1  79    130     B FALSE #> 5 92-1 130    153     B FALSE #> 6 92-1 153    156     C FALSE #> 7 92-1 156    213     C  TRUE test[test$id == \"92-1\", ] #>      id top bottom variable value        dissolve_id #> 1  92-1   0     18    genhz     A     92-1_000-018_A #> 2  92-1  18     43    genhz     E     92-1_018-043_E #> 3  92-1  43    153    genhz     B     92-1_043-153_B #> 4  92-1 153    213    genhz     C     92-1_153-213_C #> 27 92-1   0    156    dep_5 FALSE 92-1_000-156_FALSE #> 28 92-1 156    213    dep_5  TRUE  92-1_156-213_TRUE   # example 2 df <- data.frame(     id = 1,     top    = c(0, 5,  10, 15, 25, 50),      bottom = c(5, 10, 15, 25, 50, 100),     hzname = c(\"A1\",  \"A2\",  \"E/A\", \"2Bt1\", \"2Bt2\", \"2C\"),     genhz  = c(\"A\",   \"A\",   \"E\",   \"2Bt\",  \"2Bt\", \"2C\"),     texcl  = c(\"sil\", \"sil\", \"sil\", \"sl\",   \"sl\",   \"s\")     )  df #>   id top bottom hzname genhz texcl #> 1  1   0      5     A1     A   sil #> 2  1   5     10     A2     A   sil #> 3  1  10     15    E/A     E   sil #> 4  1  15     25   2Bt1   2Bt    sl #> 5  1  25     50   2Bt2   2Bt    sl #> 6  1  50    100     2C    2C     s  hz_dissolve(df, c(\"genhz\", \"texcl\")) #>   id top bottom variable value   dissolve_id #> 1  1   0     10    genhz     A   1_000-010_A #> 2  1  10     15    genhz     E   1_010-015_E #> 3  1  15     50    genhz   2Bt 1_015-050_2Bt #> 4  1  50    100    genhz    2C  1_050-100_2C #> 5  1   0     15    texcl   sil 1_000-015_sil #> 6  1  15     50    texcl    sl  1_015-050_sl #> 7  1  50    100    texcl     s   1_050-100_s hz_dissolve(df, c(\"genhz\", \"texcl\"), collapse = TRUE) #>   id top bottom      variable    value        dissolve_id #> 1  1   0     10 genhz & texcl  A & sil  1_000-010_A & sil #> 2  1  10     15 genhz & texcl  E & sil  1_010-015_E & sil #> 3  1  15     50 genhz & texcl 2Bt & sl 1_015-050_2Bt & sl #> 4  1  50    100 genhz & texcl   2C & s   1_050-100_2C & s  test <- hz_dissolve(df, \"genhz\") subset(test, value == \"2Bt\") #>   id top bottom variable value   dissolve_id #> 3  1  15     50    genhz   2Bt 1_015-050_2Bt"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_intersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersecting horizon boundaries by horizon depths — hz_intersect","title":"Intersecting horizon boundaries by horizon depths — hz_intersect","text":"function intersects two horizon tables harmonizing depths merging overlap. can useful rejoin results hz_dissolve() original horizon table, perform aggregation dissolved variables.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_intersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersecting horizon boundaries by horizon depths — hz_intersect","text":"","code":"hz_intersect(x, y, idcol = \"id\", depthcols = c(\"top\", \"bottom\"))"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_intersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersecting horizon boundaries by horizon depths — hz_intersect","text":"x data.frame y data.frame idcol character: column name pedon ID within object. depthcols character vector length 2 specifying names horizon depths (e.g. c(\"top\", \"bottom\")).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_intersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersecting horizon boundaries by horizon depths — hz_intersect","text":"data.frame harmonized depth intervals (.e. segment_id) columns original data.frame. data.frame contain column names, returned (exception idcol depthcols), appended either x y indicate data.frame originated .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_intersect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Intersecting horizon boundaries by horizon depths — hz_intersect","text":".","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hz_intersect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Intersecting horizon boundaries by horizon depths — hz_intersect","text":"Stephen Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_intersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersecting horizon boundaries by horizon depths — hz_intersect","text":"","code":"h <- data.frame(   id = 1,   top    = c(0,  25, 44, 46, 50),   bottom = c(25, 44, 46, 50, 100),   by     = c(\"Yes\", \"Yes\", \"No\", \"No\", \"Yes\"),   clay   = c(10, 12, 27, 35, 16) )  hz_dissolve(h, \"by\") #>   id top bottom variable value   dissolve_id #> 1  1   0     44       by   Yes 1_000-044_Yes #> 2  1  44     50       by    No  1_044-050_No #> 3  1  50    100       by   Yes 1_050-100_Yes  hz_intersect(x = hz_dissolve(h, \"by\"), y = h) #>   segment_id id top bottom variable value   dissolve_id  by clay #> 1    000-025  1   0     25       by   Yes 1_000-044_Yes Yes   10 #> 2    025-044  1  25     44       by   Yes 1_000-044_Yes Yes   12 #> 3    044-046  1  44     46       by    No  1_044-050_No  No   27 #> 4    046-050  1  46     50       by    No  1_044-050_No  No   35 #> 5    050-100  1  50    100       by   Yes 1_050-100_Yes Yes   16  hi <- hz_intersect(x = h, y = hz_dissolve(h, \"by\")) aggregate(clay ~ dissolve_id, data = hi, mean) #>     dissolve_id clay #> 1 1_000-044_Yes   11 #> 2  1_044-050_No   31 #> 3 1_050-100_Yes   16"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Find lagged horizon values — hz_lag","title":"Find lagged horizon values — hz_lag","text":"function finds adjacent values horizon values lagged distances.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find lagged horizon values — hz_lag","text":"","code":"hz_lag(   object,   lag = 1,   unit = \"index\",   idcol = \"id\",   depthcols = c(\"top\", \"bottom\"),   order = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find lagged horizon values — hz_lag","text":"object data.frame lag integer: number horizons lag unit character: lag units index depth. idcol character: column name pedon ID within object. depthcols character vector length 2 specifying names horizon depths (e.g. c(\"top\", \"bottom\")). order logical: indicating whether order #'","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find lagged horizon values — hz_lag","text":"data.frame lagged values.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_lag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find lagged horizon values — hz_lag","text":".","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hz_lag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find lagged horizon values — hz_lag","text":"Stephen Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find lagged horizon values — hz_lag","text":"","code":"h <- data.frame(   id = 1,   top    = c(0,  25, 44, 46, 50),   bottom = c(25, 44, 46, 50, 100),   texcl     = c(\"SL\", \"SL\", \"CL\", \"CL\", \"L\"),   clay   = c(10, 12, 27, 35, 16) )  hz_lag(h) #>    clay_bot.1 texcl_bot.1 #> 2          12          SL #> 3          27          CL #> 4          35          CL #> 5          16           L #> NA         NA        <NA>  hz_lag(h, -1) #>    clay_top.1 texcl_top.1 #> NA         NA        <NA> #> 1          10          SL #> 2          12          SL #> 3          27          CL #> 4          35          CL  hz_lag(h, 10:15, unit = \"depth\") #>     clay_bot.10 clay_bot.11 clay_bot.12 clay_bot.13 clay_bot.14 clay_bot.15 #> 2            12          12          12          12          12          12 #> 5            16          16          16          16          16          16 #> 5.1          16          16          16          16          16          16 #> 5.2          16          16          16          16          16          16 #> NA           NA          NA          NA          NA          NA          NA #>     texcl_bot.10 texcl_bot.11 texcl_bot.12 texcl_bot.13 texcl_bot.14 #> 2             SL           SL           SL           SL           SL #> 5              L            L            L            L            L #> 5.1            L            L            L            L            L #> 5.2            L            L            L            L            L #> NA          <NA>         <NA>         <NA>         <NA>         <NA> #>     texcl_bot.15 #> 2             SL #> 5              L #> 5.1            L #> 5.2            L #> NA          <NA>  transform(cbind(h, lag = hz_lag(h)),    clay_dif = lag.clay_bot.1 - clay,   texcl_contrast = paste0(texcl, \"-\", lag.texcl_bot.1) ) #>    id top bottom texcl clay lag.clay_bot.1 lag.texcl_bot.1 clay_dif #> 2   1   0     25    SL   10             12              SL        2 #> 3   1  25     44    SL   12             27              CL       15 #> 4   1  44     46    CL   27             35              CL        8 #> 5   1  46     50    CL   35             16               L      -19 #> NA  1  50    100     L   16             NA            <NA>       NA #>    texcl_contrast #> 2           SL-SL #> 3           SL-CL #> 4           CL-CL #> 5            CL-L #> NA           L-NA"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Segmenting of Soil Horizon Data by Depth Interval — hz_segment","title":"Segmenting of Soil Horizon Data by Depth Interval — hz_segment","text":"function segments subdivides horizon data SoilProfileCollection data.frame depth interval (e.g. c(0, 10), c(0, 50), 25:100). results horizon records split specified depth intervals, duplicates original horizon data also adds new horizon depths. addition, labels (.e. \"segment_id\") added horizon record correspond depth interval (e.g. 025-100). function intended harmonize horizons common support (.e. depth interval) aggregation summary. See examples.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segmenting of Soil Horizon Data by Depth Interval — hz_segment","text":"","code":"hz_segment(object, intervals, trim = TRUE, depthcols = c(\"top\", \"bottom\"))  segment(object, intervals, trim = TRUE, hzdepcols = c(\"top\", \"bottom\"))"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segmenting of Soil Horizon Data by Depth Interval — hz_segment","text":"object either SoilProfileCollection data.frame intervals vector integers slice horizon data (e.g. c(25, 100) 25:100) trim logical, TRUE horizons object truncated min/max specified intervals. FALSE, horizons overlapping interval marked . Care taken specifying one depth interval trim = FALSE. depthcols character vector length 2 specifying names horizon depths (e.g. c(\"top\", \"bottom\")), necessary object hzdepcols deprecated replaced depthcols.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segmenting of Soil Horizon Data by Depth Interval — hz_segment","text":"Either SoilProfileCollection data.frame original horizon data segmented depth intervals. usually records resulting object, one time segment interval partially overlaps horizon. new column called segment_id identifying depth interval added.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_segment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segmenting of Soil Horizon Data by Depth Interval — hz_segment","text":"hz_segment() performs aggregation resampling source data, rather, labels added horizon records subsequent aggregation summary. makes possible process large number records outside constraints associated e.g. slice() slab().","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hz_segment.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Segmenting of Soil Horizon Data by Depth Interval — hz_segment","text":"Stephen Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segmenting of Soil Horizon Data by Depth Interval — hz_segment","text":"","code":"# example data data(sp1)  # upgrade to SPC depths(sp1) <- id ~ top + bottom  # segment and trim z <- hz_segment(sp1, intervals = c(0, 10, 20, 30), trim = TRUE)  # display segment labels # note that there are new horizon boundaries at segments par(mar = c(0, 0, 3, 1)) plotSPC(z, color = 'segment_id', width = 0.3)   # highlight new horizon records par(mar = c(0, 0, 2, 1)) plotSPC(z, color = NA, default.color = NA, width = 0.3, lwd = 1) plotSPC(sp1, color = NA, default.color = NA,  width = 0.3, lwd = 3, add = TRUE, name = NA, print.id = FALSE) #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths() legend('top', horiz = TRUE,  legend = c('original', 'segmented'),  lwd = c(1, 3), cex = 0.85, bty = 'n')   # \\donttest{ # same results as slab() # 10 random profiles s <- lapply(1:10, random_profile, n_prop = 1, SPC = TRUE, method = 'random_walk') s <- combine(s)  a.slab <- slab(s, fm = ~ p1, slab.structure = c(0, 10, 20, 30), slab.fun = mean, na.rm = TRUE)  z <- hz_segment(s, intervals = c(0, 10, 20, 30), trim = TRUE) z <- horizons(z) z$thick <- z$bottom - z$top  a.segment <- sapply(split(z, z$segment_id), function(i) {   weighted.mean(i$p1, i$thick) })   res <- data.frame(   slab = a.slab$value,   segment = a.segment,   diff = a.slab$value - a.segment )  print(res) #>            slab   segment         diff #> 00-10 -5.305852 -5.305852 8.881784e-16 #> 10-20 -2.212883 -2.212883 0.000000e+00 #> 20-30 -4.091390 -4.091390 0.000000e+00 res$diff < 0.001 #> [1] TRUE TRUE TRUE # }   data(sp5)  # segment by upper 25-cm test1 <- hz_segment(sp5, intervals = c(0, 100)) print(test1) #> SoilProfileCollection with 296 profiles and 1254 horizons #> profile ID: soil  |  horizon ID: hzID  #> Depth range: 70 - 100 cm #>  #> ----- Horizons (6 / 1254 rows  |  10 / 20 columns) ----- #>    soil hzID top bottom name sand silt clay  R25  G25 #>   soil1    1   0      8   H1 32.3 10.9 52.8 0.41 0.38 #>   soil1    2   8     25   H2 29.0 11.2 58.2 0.31 0.28 #>   soil1    3  25     55   H3 34.9 11.6 51.9 0.31 0.28 #>   soil1    4  55    100   H4 38.2 10.9 49.7 0.31 0.28 #>  soil10    5   0     10   H1 25.2 14.4 58.4 0.43 0.37 #>  soil10    6  10     25   H2 24.4 14.9 59.0 0.44 0.37 #> [... more horizons ...] #>  #> ----- Sites (6 / 296 rows  |  1 / 1 columns) ----- #>     soil #>    soil1 #>   soil10 #>  soil100 #>  soil101 #>  soil102 #>  soil103 #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY] nrow(test1) #> [1] 1254 print(object.size(test1), units = \"Mb\") #> 0.3 Mb  # segment by 1-cm increments test2 <- hz_segment(sp5, intervals = 0:100) print(test2) #> SoilProfileCollection with 296 profiles and 29523 horizons #> profile ID: soil  |  horizon ID: hzID  #> Depth range: 70 - 100 cm #>  #> ----- Horizons (6 / 29523 rows  |  10 / 20 columns) ----- #>   soil hzID top bottom name sand silt clay  R25  G25 #>  soil1    1   0      1   H1 32.3 10.9 52.8 0.41 0.38 #>  soil1    2   1      2   H1 32.3 10.9 52.8 0.41 0.38 #>  soil1    3   2      3   H1 32.3 10.9 52.8 0.41 0.38 #>  soil1    4   3      4   H1 32.3 10.9 52.8 0.41 0.38 #>  soil1    5   4      5   H1 32.3 10.9 52.8 0.41 0.38 #>  soil1    6   5      6   H1 32.3 10.9 52.8 0.41 0.38 #> [... more horizons ...] #>  #> ----- Sites (6 / 296 rows  |  1 / 1 columns) ----- #>     soil #>    soil1 #>   soil10 #>  soil100 #>  soil101 #>  soil102 #>  soil103 #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY] nrow(test2) #> [1] 29523 print(object.size(test2), units = \"Mb\") #> 5.9 Mb   # segment and aggregate test3 <- hz_segment(horizons(sp5),                   intervals = c(0, 5, 15, 30, 60, 100, 200),                   depthcols = c(\"top\", \"bottom\") ) test3$hzthk <- test3$bottom - test3$top test3_agg <- by(test3, test3$segment_id, function(x) {   data.frame(     hzID = x$hzID[1],     segment_id = x$segment_id[1],     average = weighted.mean(x$clay, w = x$hzthk)   ) }) test3_agg <- do.call(\"rbind\", test3_agg)  head(test3_agg) #>         hzID segment_id  average #> 000-005    1    000-005 40.31517 #> 005-015    1    005-015 41.89718 #> 015-030    2    015-030 43.88592 #> 030-060    3    030-060 46.01368 #> 060-100    4    060-100 47.65180 #> 100-200    5    100-200 48.13381"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_to_taxpartsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Allocate Particle Size Class for the Control Section. — hz_to_taxpartsize","title":"Allocate Particle Size Class for the Control Section. — hz_to_taxpartsize","text":"function aggregates information horizon table allocates particle size class control section.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_to_taxpartsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allocate Particle Size Class for the Control Section. — hz_to_taxpartsize","text":"","code":"hz_to_taxpartsize(   x,   y,   taxpartsize = \"taxpartsize\",   clay = \"clay\",   idcol = \"id\",   depthcols = c(\"top\", \"bottom\") )"},{"path":"https://ncss-tech.github.io/aqp/reference/hz_to_taxpartsize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allocate Particle Size Class for the Control Section. — hz_to_taxpartsize","text":"x data.frame containing original horizon table. y data.frame containing particle size control section depths idcol. taxpartsize character column name taxonomic family particle size class. clay character column name clay percent. idcol character: column name pedon ID within object. depthcols character vector length 2 specifying names horizon depths (e.g. c(\"top\", \"bottom\")).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_to_taxpartsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allocate Particle Size Class for the Control Section. — hz_to_taxpartsize","text":"data.frame object containing original idcol, aggregated particle size control section allocation, aniso column indicate one contrasting class.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_to_taxpartsize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Allocate Particle Size Class for the Control Section. — hz_to_taxpartsize","text":"function differs texture_to_taxpartsize aggregates results texture_to_taxpartsize, accounts strongly contrasting particle size classes.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hz_to_taxpartsize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Allocate Particle Size Class for the Control Section. — hz_to_taxpartsize","text":"Stephen Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hz_to_taxpartsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allocate Particle Size Class for the Control Section. — hz_to_taxpartsize","text":"","code":"h <- data.frame(   id = 1,   hzname = c(\"A\", \"BA\", \"Bw\", \"BC\", \"C\"),   top    = c(0, 10, 45, 60,  90),   bottom = c(10, 45, 60, 90, 150),   clay   = c(15, 16, 45, 20,  10),   sand   = c(10, 35, 40, 50,  90),   frags  = c(0,  5, 10, 38,  40) )  h <- cbind(h,            texcl = ssc_to_texcl(clay = h$clay, sand = h$sand))  pscs <- data.frame(id = 1,                    top = 25,                    bottom = 100)  h <- cbind(h,            taxpartsize = texture_to_taxpartsize(              texcl = h$texcl,              clay  = h$clay,              sand  = h$sand,              fragvoltot = h$frags            ))  depths(h) <- id ~ top + bottom  # set required metadata for estimatePSCS() hzdesgnname(h) <- \"hzname\" hztexclname(h) <- \"texcl\" hzmetaname(h, \"clay\") <- \"clay\"  pscs <- data.frame(id = h$id, rbind(estimatePSCS(h))) names(pscs)[2:3] <- c(\"top\", \"bottom\")  hz_to_taxpartsize(horizons(h), pscs) #>   id taxpartsizemod              taxpartsize #> 1  1          aniso coarse-loamy over clayey"},{"path":"https://ncss-tech.github.io/aqp/reference/hzdesgnname.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set Horizon Designation Column Name — hzdesgnname","title":"Get or Set Horizon Designation Column Name — hzdesgnname","text":"hzdesgnname(): Get column name containing horizon designations hzdesgnname<-: Set horizon designation column name","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzdesgnname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set Horizon Designation Column Name — hzdesgnname","text":"","code":"# S4 method for class 'SoilProfileCollection' hzdesgnname(object, required = FALSE)  # S4 method for class 'SoilProfileCollection' hzdesgnname(object, required = FALSE) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/hzdesgnname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set Horizon Designation Column Name — hzdesgnname","text":"object SoilProfileCollection required logical, attribute required? , set TRUE trigger error invalid value. value character, name column containing horizon designations","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzdesgnname.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or Set Horizon Designation Column Name — hzdesgnname","text":"Store column name containing horizon designations identifiers metadata slot SoilProfileCollection.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hzdesgnname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or Set Horizon Designation Column Name — hzdesgnname","text":"","code":"data(sp1)  # promote to SPC depths(sp1) <- id ~ top + bottom  # set horizon designation column hzdesgnname(sp1) <- \"name\"  # get horizon designation column hzdesgnname(sp1) #> [1] \"name\""},{"path":"https://ncss-tech.github.io/aqp/reference/hzidname.html","id":null,"dir":"Reference","previous_headings":"","what":"Set horizon ID column name — hzidname<-","title":"Set horizon ID column name — hzidname<-","text":"Set unique horizon ID column name Get column name containing unique horizon ID","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzidname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set horizon ID column name — hzidname<-","text":"","code":"# S4 method for class 'SoilProfileCollection' hzidname(object) <- value  # S4 method for class 'SoilProfileCollection' hzidname(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/hzidname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set horizon ID column name — hzidname<-","text":"object SoilProfileCollection value character, column name containing unique horizon ID values","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzidname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set horizon ID column name — hzidname<-","text":"","code":"data(sp1)  # promote to SPC depths(sp1) <- id ~ top + bottom  # create new horizon ID sp1$hzIDrev <- rev(sp1$hzID)  # set horizon designation column hzidname(sp1) <- \"hzIDrev\"  # get horizon designation column hzidname(sp1) #> [1] \"hzIDrev\""},{"path":"https://ncss-tech.github.io/aqp/reference/hzmetaname.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set Horizon Metadata Column Name — hzmetaname","title":"Get or Set Horizon Metadata Column Name — hzmetaname","text":"hzmetaname(): Get column name containing horizon data interest hzmetaname<-: Set horizon designation column name","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzmetaname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set Horizon Metadata Column Name — hzmetaname","text":"","code":"# S4 method for class 'SoilProfileCollection' hzmetaname(object, attr, required = FALSE)  # S4 method for class 'SoilProfileCollection' hzmetaname(object, attr, required = FALSE) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/hzmetaname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set Horizon Metadata Column Name — hzmetaname","text":"object SoilProfileCollection attr character. Base name attribute stored metadata. prefixed \"aqp_hz\" horizon-level metadata column attributes. e.g. attr=\"clay\" results metadata value retrieved \"aqp_hzclay\". required logical. attribute required? , set TRUE trigger error invalid value. value character. Name horizon-level column containing  data corresponding attr.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hzmetaname.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or Set Horizon Metadata Column Name — hzmetaname","text":"Store column name containing specific type horizon data metadata slot SoilProfileCollection.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/hzmetaname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or Set Horizon Metadata Column Name — hzmetaname","text":"","code":"data(sp1)  # promote to SPC depths(sp1) <- id ~ top + bottom  # set important metadata columns hzdesgnname(sp1) <- \"name\" hztexclname(sp1) <- \"texture\"  # set custom horizon property (clay content) column hzmetaname(sp1, \"clay\") <- \"prop\"  # inspect metadata list metadata(sp1) #> $aqp_df_class #> [1] \"data.frame\" #>  #> $aqp_group_by #> [1] \"\" #>  #> $aqp_hzdesgn #> [1] \"name\" #>  #> $aqp_hztexcl #> [1] \"texture\" #>  #> $depth_units #> [1] \"cm\" #>  #> $stringsAsFactors #> [1] FALSE #>  #> $aqp_hzclay #> [1] \"prop\" #>   # get horizon clay content column hzmetaname(sp1, \"clay\") #> [1] \"prop\"  # uses hzdesgname(), hztexclname(), hzmetaname(attr=\"clay\") in function definition estimatePSCS(sp1) #>     id pscs_top pscs_bottom #> 1 P001       49          89 #> 2 P002       30          59 #> 3 P003        2          52 #> 4 P004       32          62 #> 5 P005        5          55 #> 6 P006       31         106 #> 7 P007       25         100 #> 8 P008       27         102 #> 9 P009       28         103"},{"path":"https://ncss-tech.github.io/aqp/reference/hztexclname.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set Horizon Texture Class Column Name — hztexclname","title":"Get or Set Horizon Texture Class Column Name — hztexclname","text":"hztexclname(): Get column name containing horizon designation name hztexclname<-: Set horizon texture class column name SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hztexclname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set Horizon Texture Class Column Name — hztexclname","text":"","code":"# S4 method for class 'SoilProfileCollection' hztexclname(object, required = FALSE)  # S4 method for class 'SoilProfileCollection' hztexclname(object, required = FALSE) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/hztexclname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set Horizon Texture Class Column Name — hztexclname","text":"object SoilProfileCollection required logical, attribute required? , set TRUE trigger error invalid value. value character, name column containing horizon texture classes","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hztexclname.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get or Set Horizon Texture Class Column Name — hztexclname","text":"Store column name containing horizon texture classes identifiers metadata slot SoilProfileCollection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/hztexclname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or Set Horizon Texture Class Column Name — hztexclname","text":"","code":"data(sp1)  # promote to SPC depths(sp1) <- id ~ top + bottom  # set horizon texture class column hztexclname(sp1) <- \"texture\"  # get horizon texture class column hztexclname(sp1) #> [1] \"texture\""},{"path":"https://ncss-tech.github.io/aqp/reference/idname.html","id":null,"dir":"Reference","previous_headings":"","what":"Get profile ID column name — idname,SoilProfileCollection-method","title":"Get profile ID column name — idname,SoilProfileCollection-method","text":"Get column name containing unique profile IDs","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/idname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get profile ID column name — idname,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' idname(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/idname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get profile ID column name — idname,SoilProfileCollection-method","text":"object SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/initSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Spatial Data in a SoilProfileCollection — initSpatial<-","title":"Initialize Spatial Data in a SoilProfileCollection — initSpatial<-","text":"initSpatial()<-: Set column names containing spatial data corresponding coordinate reference system SoilProfileCollection. getSpatial(): Get spatial data associated SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/initSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Spatial Data in a SoilProfileCollection — initSpatial<-","text":"","code":"# S4 method for class 'SoilProfileCollection,ANY,ANY' initSpatial(object, crs = NULL) <- value  # S4 method for class 'SoilProfileCollection,ANY,character' initSpatial(object, crs = NULL) <- value  # S4 method for class 'SoilProfileCollection' getSpatial(object)  # S4 method for class 'SoilProfileCollection' coordinates(obj)  # S4 method for class 'SoilProfileCollection,ANY' coordinates(object) <- value  # S4 method for class 'SoilProfileCollection,character' coordinates(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/initSpatial.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Spatial Data in a SoilProfileCollection — initSpatial<-","text":"object SoilProfileCollection crs Optional: character. Representation Coordinate Reference System \"authority:code\", integer EPSG code, WKT2019 PROJ4 string, sf crs sp CRS object. value formula specifying names columns containing geometry (x y coordinates), character column names obj SoilProfileCollection","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/initSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Spatial Data in a SoilProfileCollection — initSpatial<-","text":"","code":"data(sp5)  # coordinates are stored in x and y column of site sp5$x <- rnorm(length(sp5)) sp5$y <- rnorm(length(sp5))  # coordinates takes a formula object as input initSpatial(sp5) <- ~ x + y  # optionally specify Coordinate Reference System (crs) on left-hand side initSpatial(sp5, crs = \"OGC:CRS84\") <- ~ x + y"},{"path":"https://ncss-tech.github.io/aqp/reference/invertLabelColor.html","id":null,"dir":"Reference","previous_headings":"","what":"Make High Contrast Label Colors — invertLabelColor","title":"Make High Contrast Label Colors — invertLabelColor","text":"Generate vector white black label colors conditioned vector colors maximize label contrast.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/invertLabelColor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make High Contrast Label Colors — invertLabelColor","text":"","code":"invertLabelColor(colors, threshold = 0.65)"},{"path":"https://ncss-tech.github.io/aqp/reference/invertLabelColor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make High Contrast Label Colors — invertLabelColor","text":"colors vector colors threshold black | white threshold","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/invertLabelColor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make High Contrast Label Colors — invertLabelColor","text":"vector label colors","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/invertLabelColor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make High Contrast Label Colors — invertLabelColor","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/invertLabelColor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make High Contrast Label Colors — invertLabelColor","text":"","code":"# test with shades of grey s <- seq(0, 1, by = 0.05) cols <- grey(s) soilPalette(cols, lab = as.character(s))   # test with 10YR x/3 m <- sprintf('10YR %s/3', 1:8) cols <- parseMunsell(m) soilPalette(cols, lab = m)"},{"path":"https://ncss-tech.github.io/aqp/reference/isEmpty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for ","title":"Check for ","text":"\"Empty\" profiles used placeholders positions SoilProfileCollection profiles result operations remove extract portions horizons source profiles.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/isEmpty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for ","text":"","code":"# S4 method for class 'SoilProfileCollection' isEmpty(object, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/isEmpty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for ","text":"object SoilProfileCollection ... Additional arguments used.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/isEmpty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for ","text":"logical. Vector length equal number profiles object. Returns TRUE profile one horizon NA top bottom depths","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/isEmpty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for ","text":"SoilProfileCollection empty profile occurs one horizon, NA top bottom depths. Generally non-profile ID site horizon-level values also NA, depths checked isEmpty().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/jacobs2000.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Morphologic Data from Jacobs et al. 2002. — jacobs2000","title":"Soil Morphologic Data from Jacobs et al. 2002. — jacobs2000","text":"Select soil morphologic data \"Redoximorphic Features Indicators Seasonal Saturation, Lowndes County, Georgia\". useful sample dataset testing analysis visualization redoximorphic features.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/jacobs2000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Morphologic Data from Jacobs et al. 2002. — jacobs2000","text":"","code":"data(jacobs2000)"},{"path":"https://ncss-tech.github.io/aqp/reference/jacobs2000.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil Morphologic Data from Jacobs et al. 2002. — jacobs2000","text":"SoilProfileCollection object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/jacobs2000.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soil Morphologic Data from Jacobs et al. 2002. — jacobs2000","text":"Jacobs, P. M., L. T. West, J. N. Shaw. 2002. Redoximorphic Features Indicators Seasonal Saturation, Lowndes County, Georgia. Soil Sci. Soc. . J. 66:315-323. doi:doi:10.2136/sssaj2002.3150","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/jacobs2000.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Morphologic Data from Jacobs et al. 2002. — jacobs2000","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # load data(jacobs2000)  # basic plot par(mar = c(0, 1, 3, 1.5)) plotSPC(jacobs2000, name='name', color='matrix_color', width=0.3)  # add concentrations addVolumeFraction(jacobs2000, 'concentration_pct',                   col = jacobs2000$concentration_color, pch = 16, cex.max = 0.5)   # add depletions plotSPC(jacobs2000, name='name', color='matrix_color', width=0.3) addVolumeFraction(jacobs2000, 'depletion_pct',                   col = jacobs2000$depletion_color, pch = 16, cex.max = 0.5)   # time saturated plotSPC(jacobs2000, color='time_saturated', cex.names=0.8, col.label = 'Time Saturated')    # color contrast: matrix vs. concentrations cc <- colorContrast(jacobs2000$matrix_color_munsell, jacobs2000$concentration_munsell) cc <- na.omit(cc)  cc <- cc[order(cc$dE00), ] cc <- unique(cc)  par(bg = 'black', fg = 'white') colorContrastPlot(cc$m1[1:10], cc$m2[1:10], labels = c('matrix', 'concentration'))  colorContrastPlot(cc$m1[11:21], cc$m2[11:21], labels = c('matrix', 'concentration'))    # color contrast: depletion vs. concentrations cc <- colorContrast(jacobs2000$depletion_munsell, jacobs2000$concentration_munsell) cc <- na.omit(cc)  cc <- cc[order(cc$dE00), ] cc <- unique(cc)  par(bg = 'black', fg = 'white') colorContrastPlot(cc$m1, cc$m2, labels = c('depletion', 'concentration'))"},{"path":"https://ncss-tech.github.io/aqp/reference/length.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of profiles in a SoilProfileCollection — length,SoilProfileCollection-method","title":"Get the number of profiles in a SoilProfileCollection — length,SoilProfileCollection-method","text":"Get number profiles SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of profiles in a SoilProfileCollection — length,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' length(x)"},{"path":"https://ncss-tech.github.io/aqp/reference/length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of profiles in a SoilProfileCollection — length,SoilProfileCollection-method","text":"x SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/lookup_taxpartsize.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranking Systems for USDA Taxonomic Particle-Size and Substitute Classes of Mineral Soils — lookup_taxpartsize","title":"Ranking Systems for USDA Taxonomic Particle-Size and Substitute Classes of Mineral Soils — lookup_taxpartsize","text":"Generate lookup table USDA Particle-Size Substitute Classes  names, ranked according approximate particle size","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/lookup_taxpartsize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranking Systems for USDA Taxonomic Particle-Size and Substitute Classes of Mineral Soils — lookup_taxpartsize","text":"","code":"lookup_taxpartsize()"},{"path":"https://ncss-tech.github.io/aqp/reference/lookup_taxpartsize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ranking Systems for USDA Taxonomic Particle-Size and Substitute Classes of Mineral Soils — lookup_taxpartsize","text":"data.frame rank column, taxonomic family particle size class, flag contrasting.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/lookup_taxpartsize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ranking Systems for USDA Taxonomic Particle-Size and Substitute Classes of Mineral Soils — lookup_taxpartsize","text":"Field Book Describing Sampling Soils, version 3.0","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/lookup_taxpartsize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ranking Systems for USDA Taxonomic Particle-Size and Substitute Classes of Mineral Soils — lookup_taxpartsize","text":"Stephen Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/lookup_taxpartsize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ranking Systems for USDA Taxonomic Particle-Size and Substitute Classes of Mineral Soils — lookup_taxpartsize","text":"","code":"# class codes lu <- lookup_taxpartsize()  idx <- lu$contrasting == FALSE  lu$taxpartsize[idx] #>  [1] diatomaceous      very-fine         clayey            fine              #>  [5] hydrous           fine-silty        fine-gypseous     fine-loamy        #>  [9] medial            loamy             coarse-loamy      coarse-silty      #> [13] coarse-gypseous   ashy              sandy             clayey-skeletal   #> [17] hydrous-pumiceous hydrous-skeletal  medial-pumiceous  medial-skeletal   #> [21] loamy-skeletal    gypseous-skeletal ashy-pumiceous    ashy-skeletal     #> [25] sandy-skeletal    pumiceous         cindery           fragmental        #> 99 Levels: diatomaceous < very-fine < clayey < ... < fragmental  lu$rank[as.integer(lu$taxpartsize)[idx]] #>  [1]  84.00  74.00  60.02  46.04  44.04  26.00  25.80  25.60  24.00  17.24 #> [11]   8.88   8.50   7.50   6.50   4.67 -43.33 -55.96 -55.96 -76.00 -76.00 #> [21] -83.23 -83.35 -93.50 -93.50 -95.33 -95.83 -96.33 -98.94"},{"path":"https://ncss-tech.github.io/aqp/reference/lunique.html","id":null,"dir":"Reference","previous_headings":"","what":"Eliminate duplicate instances of profile IDs in a list of SoilProfileCollections — lunique","title":"Eliminate duplicate instances of profile IDs in a list of SoilProfileCollections — lunique","text":"@description Experimental function \"clean\" list input duplicates exist (otherwise prevent pbindlist). Useful queries may overlapping instances data, instance list SoilProfileCollections list element contains profiles gathered set (potentially overlapping) extents.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/lunique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eliminate duplicate instances of profile IDs in a list of SoilProfileCollections — lunique","text":"","code":"lunique(l)"},{"path":"https://ncss-tech.github.io/aqp/reference/lunique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eliminate duplicate instances of profile IDs in a list of SoilProfileCollections — lunique","text":"l list SoilProfileCollections.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/lunique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eliminate duplicate instances of profile IDs in a list of SoilProfileCollections — lunique","text":"list SoilProfileCollections, duplicate profile IDs removed.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/lunique.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Eliminate duplicate instances of profile IDs in a list of SoilProfileCollections — lunique","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/lunique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eliminate duplicate instances of profile IDs in a list of SoilProfileCollections — lunique","text":"","code":"data(sp5)  # EXAMPLE #1 -- resolving overlap  # 6 profiles in four sets, and 5,6,7 are missing input <- lapply(list(c(1,3,4), c(2,2,3), NA, c(8,9,1)), function(idx) {       if(!all(is.na(idx)))        sp5[idx,] })  output <- lunique(input)  # 6 profiles are in final SPC; 5,6,7 are missing match(profile_id(pbindlist(output)), profile_id(sp5)) #> pbindlist: one or more input list elements is NA #> [1] 1 2 3 4 8 9  # EXAMPLE #2 -- exact duplicates  # deliberately duplicate an SPC sp5_2 <- sp5 res <- lunique(list(sp5, sp5_2))  # the number of profiles in first element is equal to number in sp5 length(res[[1]]) == length(sp5) #> [1] TRUE  # second list element contains NA b/c all uniques are in #1 res[[2]] #> [1] NA"},{"path":"https://ncss-tech.github.io/aqp/reference/max.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the maximum bottom depth in a SoilProfileCollection — max,SoilProfileCollection-method","title":"Get the maximum bottom depth in a SoilProfileCollection — max,SoilProfileCollection-method","text":"Get deepest depth description profiles SoilProfileCollection. Data missing one : bottom depth, profile ID, optional attribute omitted using complete.cases.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/max.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the maximum bottom depth in a SoilProfileCollection — max,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' max(x, v = NULL, na.rm = TRUE)"},{"path":"https://ncss-tech.github.io/aqp/reference/max.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the maximum bottom depth in a SoilProfileCollection — max,SoilProfileCollection-method","text":"x SoilProfileCollection v optional: horizon-level column name refine calculation na.rm remove NA? default: TRUE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve metadata from SoilProfileCollection — metadata,SoilProfileCollection-method","title":"Retrieve metadata from SoilProfileCollection — metadata,SoilProfileCollection-method","text":"Get metadata SoilProfileCollection. Result list. Two entries (aqp_df_class, depth_units) edited metadata list directly. methods facilitate changing – propagating changes throughout collection. Otherwise, metadata list free-form slot used store arbitrary information data, collected, citations, etc.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve metadata from SoilProfileCollection — metadata,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' metadata(object)  # S4 method for class 'SoilProfileCollection' metadata(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve metadata from SoilProfileCollection — metadata,SoilProfileCollection-method","text":"object SoilProfileCollection value named list (see examples)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve metadata from SoilProfileCollection — metadata,SoilProfileCollection-method","text":"","code":"data(sp5)  # replace default metadata with itself metadata(sp5) <- metadata(sp5)  # set new metadata attribute value metadata(sp5)$newvalue <- 'foo'  # get metadata attribute metadata(sp5)$newvalue #> [1] \"foo\""},{"path":"https://ncss-tech.github.io/aqp/reference/min.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the minimum bottom depth in a SoilProfileCollection — min,SoilProfileCollection-method","title":"Get the minimum bottom depth in a SoilProfileCollection — min,SoilProfileCollection-method","text":"Get shallowest depth description profiles SoilProfileCollection. Data missing one : bottom depth, profile ID, optional attribute omitted using complete.cases.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/min.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the minimum bottom depth in a SoilProfileCollection — min,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' min(x, v = NULL, na.rm = TRUE)"},{"path":"https://ncss-tech.github.io/aqp/reference/min.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the minimum bottom depth in a SoilProfileCollection — min,SoilProfileCollection-method","text":"x SoilProfileCollection v optional: vector horizon attribute names refine calculation na.rm remove NA? default: TRUE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/missingDataGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Data Grid — missingDataGrid","title":"Missing Data Grid — missingDataGrid","text":"Generate levelplot missing data SoilProfileCollection object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/missingDataGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Data Grid — missingDataGrid","text":"","code":"missingDataGrid(   s,   max_depth,   vars,   filter.column = NULL,   filter.regex = NULL,   cols = NULL,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/missingDataGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing Data Grid — missingDataGrid","text":"s SoilProfileCollection object max_depth integer specifying max depth analysis vars character vector column names evaluate missing data filter.column character string naming column apply filter REGEX filter.regex character string regular expression used filter horizon data analysis cols vector colors ... additional arguments passed levelplot","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/missingDataGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing Data Grid — missingDataGrid","text":"data.frame describing percentage missing data variable.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/missingDataGrid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Missing Data Grid — missingDataGrid","text":"function evaluates missing data fraction based slice-wise evaluation named variables SoilProfileCollection object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/missingDataGrid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Missing Data Grid — missingDataGrid","text":"lattice graphic printed active output device.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/missingDataGrid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Missing Data Grid — missingDataGrid","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/missingDataGrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing Data Grid — missingDataGrid","text":"","code":"# 10 random profiles set.seed(10101) s <- lapply(as.character(1:10), random_profile) s <- do.call('rbind', s)  # randomly sprinkle some missing data s[sample(nrow(s), 5), 'p1'] <- NA s[sample(nrow(s), 5), 'p2'] <- NA s[sample(nrow(s), 5), 'p3'] <- NA  # set all p4 and p5 attributes of `soil 1' to NA s[which(s$id == '1'), 'p5'] <- NA s[which(s$id == '1'), 'p4'] <- NA  # upgrade to SPC depths(s) <- id ~ top + bottom  # plot missing data via slicing + levelplot missingDataGrid(   s,   max_depth = 100,   vars = c('p1', 'p2', 'p3', 'p4', 'p5'),   main='Missing Data Fraction' ) #> $fig  #>  #> $summary #>    id p1 p2 p3  p4  p5 #> 1   1 17  0 17 100 100 #> 2  10  0  0 20   0   0 #> 3   2  0 40 20   0   0 #> 4   3  0 33 67   0   0 #> 5   4 20  0  0   0   0 #> 6   5  0 20  0   0   0 #> 7   6  0 33  0   0   0 #> 8   7 67  0  0   0   0 #> 9   8  0  0  0   0   0 #> 10  9 33  0  0   0   0 #>"},{"path":"https://ncss-tech.github.io/aqp/reference/mixMunsell.html","id":null,"dir":"Reference","previous_headings":"","what":"Mix Munsell Colors via Spectral Library — mixMunsell","title":"Mix Munsell Colors via Spectral Library — mixMunsell","text":"Simulate mixing colors Munsell notation, similar way mixtures pigments operate.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mixMunsell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mix Munsell Colors via Spectral Library — mixMunsell","text":"","code":"mixMunsell(   x,   w = rep(1, times = length(x))/length(x),   mixingMethod = c(\"exact\", \"reference\", \"estimate\", \"adaptive\"),   n = 1,   keepMixedSpec = FALSE,   distThreshold = 0.025,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/mixMunsell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mix Munsell Colors via Spectral Library — mixMunsell","text":"x vector colors Munsell notation w vector proportions, can sum number mixingMethod approach used simulate mixture: exact: simulate subtractive mixture pigments, color conversion via CIE1931 color-matching functions (see details) reference: simulate subtractive mixture pigments, selecting n closest reference spectra munsell.spectra.wide (requires gower package) estimate: closest Munsell chip weighted mean CIELAB coordinates (fastest) adaptive: use exact method possible, falling-back estimate (weighted mean CIELAB coordinates) otherwise n number closest matching color chips (mixingMethod = reference ) keepMixedSpec keep weighted geometric mean spectra, final result list (mixingMethod = reference ) distThreshold spectral distance used compute scaledDistance, default value based analysis spectral distances associated adjacent Munsell color chips. argument used  mixingMethod = 'reference'. ... additional arguments spec2Munsell","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mixMunsell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mix Munsell Colors via Spectral Library — mixMunsell","text":"data.frame closest matching Munsell color(s): munsell: Munsell notation n-closest spectra distance: spectral (Gower) distance n-closest spectra scaledDistance: spectral distance scaled distThreshold mixingMethod: method used mixture keepMixedSpec = TRUE list: mixed: data.frame containing elements spec: spectra 1st closest match","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mixMunsell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mix Munsell Colors via Spectral Library — mixMunsell","text":"See expanded tutorial examples. accurate simulation pigment mixtures (\"subtractive\" color mixtures) incredibly complex due factors easily measured controlled: pigment solubility, pigment particle size distribution, water content, substrate composition, physical obstruction name . said, possible simulate reasonable, subtractive color mixtures given reference spectra library (350-800nm) assumptions pigment qualities lighting. purposes estimating mixture soil colors (pigments ) can relax assumptions assume standard light source. missing piece spectral library Munsell chips color books. Thankfully, Scott Burns outlined entire process, Paul Centore provided Munsell color chip reflectance spectra library (http://www.munsellcolourscienceforpainters.com). estimation subtractive mixture soil colors can proceed follows: look associated spectra color x compute weighted (w argument) geometric mean spectra convert spectral mixture closest Munsell color via: search closest n matching spectra reference library (mixtureMethod = 'reference') direct conversion spectra closest Munsell color via spec2Munsell() (mixtureMethod = 'exact') suggest resulting Munsell chip(s) best candidate simulated mixture Key assumptions include: similar particle size distribution similar mineralogy (.e. pigmentation qualities) similar water content. purposes estimating (example) \"mixed soil color within top 18cm soil\" assumptions usually valid. , estimates ultimately \"snapped\" nearest chip need approach accuracy paint-matching systems. message printed scaledDistance larger 1.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mixMunsell.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mix Munsell Colors via Spectral Library — mixMunsell","text":"Marcus, R.T. (1998). Measurement Color. K. Nassau (Ed.), Color Science, Art, Technology (pp. 32-96). North-Holland. inspiration / calculations based work Scott Burns related discussion Stack Overflow spectral library source: http://www.munsellcolourscienceforpainters.com/MunsellResources/SpectralReflectancesOf2007MunsellBookOfColorGlossy.txt","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/mixMunsell.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mix Munsell Colors via Spectral Library — mixMunsell","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mollic.thickness.requirement.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the minimum thickness requirement for Mollic epipedon — mollic.thickness.requirement","title":"Calculate the minimum thickness requirement for Mollic epipedon — mollic.thickness.requirement","text":"Utilize horizon depths, designations textures profile estimate thickness requirement Mollic Umbric epipedon, per criterion 6 U.S. Keys Soil Taxonomy (12th Edition).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mollic.thickness.requirement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the minimum thickness requirement for Mollic epipedon — mollic.thickness.requirement","text":"","code":"mollic.thickness.requirement(   p,   hzdesgn = hzdesgnname(p, required = TRUE),   texcl.attr = hztexclname(p, required = TRUE),   clay.attr = hzmetaname(p, \"clay\", required = TRUE),   truncate = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/reference/mollic.thickness.requirement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the minimum thickness requirement for Mollic epipedon — mollic.thickness.requirement","text":"p single-profile SoilProfileCollection. hzdesgn Column horizon table containing designations. Default: guessHzDesgnName(p) texcl.attr Column horizon table containing texture classes. Default: guessHzTexClName(p) clay.attr Column horizon table containing clay contents. Default: guessHzAttrName(p, 'clay', c('total','_r')) truncate sliding scale (Criterion 6C) results truncated 18 25cm interval? (Experimental; Default: TRUE)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mollic.thickness.requirement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the minimum thickness requirement for Mollic epipedon — mollic.thickness.requirement","text":"unit length numeric vector containing Mollic Umbric epipedon minimum thickness requirement.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mollic.thickness.requirement.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate the minimum thickness requirement for Mollic epipedon — mollic.thickness.requirement","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mollic.thickness.requirement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the minimum thickness requirement for Mollic epipedon — mollic.thickness.requirement","text":"","code":"# construct a fake profile spc <- data.frame(id=1, taxsubgrp = \"Lithic Haploxeralfs\",                   hzname   = c(\"A\",\"AB\",\"Bt\",\"BCt\",\"R\"),                   hzdept   = c(0,  20, 32, 42,  49),                   hzdepb   = c(20, 32, 42, 49, 200),                   prop     = c(18, 22, 28, 24,  NA),                   texcl    = c(\"l\",\"l\",\"cl\", \"l\",\"br\"),                   d_value  = c(5,   5,  5,  6,  NA),                   m_value  = c(2.5, 3,  3,  4,  NA),                   m_chroma = c(2,   3,  4,  4,  NA))  # promote to SoilProfileCollection depths(spc) <- id ~ hzdept + hzdepb hzdesgnname(spc) <- 'hzname' hztexclname(spc) <- 'texcl'  # print results in table data.frame(id = spc[[idname(spc)]],            thickness_req = mollic.thickness.requirement(spc, clay.attr='prop'),            thickness_req_nobound = mollic.thickness.requirement(spc,                                         clay.attr='prop', truncate=FALSE)) #>   id thickness_req thickness_req_nobound #> 1  1            18              16.33333"},{"path":"https://ncss-tech.github.io/aqp/reference/mu_confusion_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Map unit confusion matrix and other classification measures — mu_confusion_matrix","title":"Map unit confusion matrix and other classification measures — mu_confusion_matrix","text":"function reverse engineers confusion matrix classification measures soil map unit component percentages (.e. composition) area (.e. acres).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mu_confusion_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map unit confusion matrix and other classification measures — mu_confusion_matrix","text":"","code":"mu_confusion_matrix(   x,   mapunit = \"nationalmusym\",   cophase = \"coiid\",   comppct = \"comppct_r\",   muacres = \"muacres\" )"},{"path":"https://ncss-tech.github.io/aqp/reference/mu_confusion_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map unit confusion matrix and other classification measures — mu_confusion_matrix","text":"x data.frame mapunit character column name containing mapunit identifier (e.g. nationalmusym) cophase character column name containing soil component phase identifier (e.g. coiid paste(compname, localphase)) comppct character column name containing component percent (e.g. comppct_r) muacres character column name containing total area mapunit (e.g. muacres)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mu_confusion_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map unit confusion matrix and other classification measures — mu_confusion_matrix","text":"list confusion matrix, overall purity (OP) (.e. overall accuracy), map unit purity (MP) (.e. user accuracy), class representation (CR) (.e. producer accuracy), Shannon entropy (E). measure names selected consistent alternative terms proposed Lark (1995) Brus (2011).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mu_confusion_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map unit confusion matrix and other classification measures — mu_confusion_matrix","text":"mu_confusion_matrix several common statistical measures used gauge accuracy categorical maps. measures typically estimated soil surveys can inferred map unit’s soil component composition percentages size (.e. acres). general, overall purity accuracy (OP) related map unit kind (e.g. consociations vs complexes). several reasons, “true” accuracies unknown, values interpreted Bayesian prior estimates. However, likely estimates optimistic derived external validation. Existing future digital soil mapping products used validate optimistic current OA estimates .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mu_confusion_matrix.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Map unit confusion matrix and other classification measures — mu_confusion_matrix","text":"Brus DJ, Kempen B, Heuvelink GBM. 2011. Sampling validation digital soil maps. European Journal Soil Science. 62(3):394–407. doi:10.1111/j.1365-2389.2011.01364.x Lark RM. 1995. Components accuracy maps special reference discriminant analysis remote sensor data. International Journal Remote Sensing. 16(8):1461–1480. doi:10.1080/01431169508954488","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/mu_confusion_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Map unit confusion matrix and other classification measures — mu_confusion_matrix","text":"Stephen Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mu_confusion_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map unit confusion matrix and other classification measures — mu_confusion_matrix","text":"","code":"# example data mu <- rbind(     data.frame(mapunit = \"A\", cophase = c(\"Alpha\", \"Beta\"), comppct = c(90, 10), muacres = 100),     data.frame(mapunit = \"B\", cophase = c(\"Beta\", \"Alpha\"), comppct = c(70, 30), muacres = 1000)     )  mu_confusion_matrix(mu, mapunit = \"mapunit\", cophase = \"cophase\", comppct = \"comppct\") #> $confusion_matrix #>         component phase #> map unit Alpha Beta #>        A    90   10 #>        B   300  700 #>  #> $overall_purity #> [1] 0.7181818 #>  #> $map_purity #>   A   B  #> 0.9 0.7  #>  #> $class_representation #>     Alpha      Beta  #> 0.7692308 0.9859155  #>  #> $shannon_entropy #>         A         B  #> 0.4689956 0.8812909  #>"},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.html","id":null,"dir":"Reference","previous_headings":"","what":"Munsell to sRGB Lookup Table for Common Soil Colors — munsell","title":"Munsell to sRGB Lookup Table for Common Soil Colors — munsell","text":"lookup table interpolated Munsell color chips common soil colors.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Munsell to sRGB Lookup Table for Common Soil Colors — munsell","text":"","code":"data(munsell)"},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Munsell to sRGB Lookup Table for Common Soil Colors — munsell","text":"data.frame 8825 rows. hue: Munsell Hue, upper case value: Munsell Value chroma: Munsell Chroma r: sRGB \"red\" value (0-1) g: sRGB \"green\" value (0-1) b: sRGB \"blue\" value (0-1) L: CIELAB \"L\" coordinate : CIELAB \"\" coordinate B: CIELAB \"B\" coordinate","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Munsell to sRGB Lookup Table for Common Soil Colors — munsell","text":"Color chip XYZ values: https://www.rit.edu/science/munsell-color-science-lab-educational-resources#munsell-renotation-data","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Munsell to sRGB Lookup Table for Common Soil Colors — munsell","text":"See munsell2rgb conversion examples. Values referenced D65 standard illuminant.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Munsell to sRGB Lookup Table for Common Soil Colors — munsell","text":"Color conversion equations http://www.brucelindbloom.com/index.html?ColorCalcHelp.html Methods used generate table http://dx.doi.org/10.1016/j.cageo.2012.10.020","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Munsell to sRGB Lookup Table for Common Soil Colors — munsell","text":"","code":"data(munsell)"},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.spectra.html","id":null,"dir":"Reference","previous_headings":"","what":"Spectral Library of Munsell Colors — munsell.spectra","title":"Spectral Library of Munsell Colors — munsell.spectra","text":"original database \"SpectralReflectancesOf2007MunsellBookOfColorGlossy.txt\" provided Paul Centore downloaded July, 2020. Reflectance values odd chroma 8.5-value chips interpolated adjacent chips. See aqp/misc/utils/Munsell/ entire set processing steps. Munsell value typically ranges 2-9, chroma 1-12. Ranges vary hue. Run aqp:::.summarizeMunsellSpectraRanges() detailed listing hue. original database contains following description: file contains spectral reflectance measurements X-Rite's 2007 Munsell Book Color (Glossy Finish).  measurements made 2012 ColorMunki spectrophotometer.  first column Munsell name.  remaining columns give reflectance values 380 nm 730 nm, steps 10 nm.  reflectance value 0 (indicating light wavelength reflected) 1 (indicating light wavelength reflected).  Occasionally entry slightly greater 1.  likely cause random variability, entries can adjusted 1 negligible loss. , 1485 colour samples measured.  Researchers invited analyze data file.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.spectra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spectral Library of Munsell Colors — munsell.spectra","text":"","code":"data(munsell.spectra)"},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.spectra.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spectral Library of Munsell Colors — munsell.spectra","text":"data frame 89496 rows 10 variables: munsell munsell color hue hue component value value component chroma chroma component wavelength wavelength (nm) reflectance reflectance","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell.spectra.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spectral Library of Munsell Colors — munsell.spectra","text":"Centore, Paul. Colour Tools Painters. http://www.munsellcolourscienceforpainters.com/.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","title":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","text":"Color conversion based look-table common soil colors.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","text":"","code":"munsell2rgb(   the_hue,   the_value,   the_chroma,   alpha = 1,   maxColorValue = 1,   return_triplets = FALSE,   returnLAB = FALSE )"},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","text":"the_hue vector one hues, upper-case (e.g. '10YR') the_value vector one values (e.g. '4') the_chroma vector one chromas (e.g. '6'), may NA neutral hues alpha numeric, transparency setting used return_triplets = FALSE returnLAB = FALSE maxColorValue maximum sRGB color value, typically 1 (see rgb) return_triplets logical, return sRGB coordinates (range 0-1) instead standard hex notation sRGB (e.g. '#8080B') returnLAB logical, return CIELAB coordinates (D65 illuminant)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","text":"vector R colors returned length input data. return_triplets = TRUE /returnLAB = TRUE, data.frame (sample length input) returned.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2rgb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","text":"function vectorized without recycling: .e. length argument must . functions pad output NA NA present inputs. Neutral hues approximated greyscale shades ranging 20\\ Gley soil colors missing chroma correctly interpreted. Consider using chroma 1. Non-standard Munsell notation (e.g. '7.9YR 2.7/2.0') can matched (nearest-neighbor, interpolation) closest color within munsell sRGB/CIELAB look-table via getClosestMunsellChip(). accurate estimate sRGB values non-standard notation can achieved munsellinterpol package. See examples .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2rgb.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","text":"Care taken using resulting sRGB values; close Munsell counterparts, vary based monitor ambient lighting conditions. Also, value used maxColorValue affect brightness colors. Th default value (1) usually give acceptable results, can adjusted force colors closer user thinks look like.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2rgb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","text":"http://www.brucelindbloom.com/index.html?ColorCalcHelp.html https://www.munsellcolourscienceforpainters.com/MunsellAndKubelkaMunkToolbox/MunsellAndKubelkaMunkToolbox.html https://www.rit.edu/science/munsell-color-lab","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2rgb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2rgb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Munsell Color Notation to other Color Space Coordinates (sRGB and CIELAB) — munsell2rgb","text":"","code":"# neutral hues (N) can be defined with chroma of 0 or NA  g <- expand.grid(hue = 'N', value = 2:8, chroma = 0, stringsAsFactors = FALSE) (m <- munsell2rgb(g$hue, g$value, g$chroma)) #> [1] \"#080808FF\" \"#101111FF\" \"#1B1C1CFF\" \"#313233FF\" \"#464848FF\" \"#686A6AFF\" #> [7] \"#A3A4A2FF\" soilPalette(m)   # back-transform to Munsell notation col2Munsell(t(col2rgb(m)) / 255) #>   hue value chroma      sigma #> 1   N     2      0 0.07161962 #> 2   N     3      0 0.16006468 #> 3   N     4      0 0.17996207 #> 4   N     5      0 0.51062566 #> 5   N     6      0 0.28213437 #> 6   N     7      0 0.25003053 #> 7   N     8      0 0.24994119   # basic example d <- expand.grid(hue = '10YR', value = 2:8, chroma = 1:8, stringsAsFactors = FALSE) d$color <- with(d, munsell2rgb(hue, value, chroma))  # similar to the 10YR color book page plot(value ~ chroma, data = d, col = d$color, pch = 15, cex = 3, las = 1)   # multiple pages of hue: hues <- c('2.5YR', '5YR', '7.5YR', '10YR') d <- expand.grid(   hue = hues,    value = c(2, 2.5, 3:8),    chroma = seq(2, 8, by = 2),    stringsAsFactors = FALSE ) # convert Munsell -> sRGB d$color <- with(d, munsell2rgb(hue, value, chroma))  # extract CIELAB coordinates with(d, munsell2rgb(hue, value, chroma, returnLAB = TRUE)) #>            L         A         B #> 1   19.63435  8.581829  6.904671 #> 2   19.63885  7.218216  8.403958 #> 3   19.64309  5.604564  9.796024 #> 4   19.64643  3.925689 10.809552 #> 5   24.89202  8.410534  7.646258 #> 6   24.89612  7.009457  8.945819 #> 7   24.89989  5.467088 10.119765 #> 8   24.90306  3.689869 10.988233 #> 9   30.24227  8.783403  8.562698 #> 10  30.24668  7.318196  9.973034 #> 11  30.25023  5.874147 11.071239 #> 12  30.25386  3.867632 12.070734 #> 13  40.90023  8.235530  8.747398 #> 14  40.90522  7.006269 10.414699 #> 15  40.90911  5.752651 11.670108 #> 16  40.91415  3.659798 13.219944 #> 17  51.37662  7.220215  8.329886 #> 18  51.38134  6.195770  9.884295 #> 19  51.38519  5.025516 11.093351 #> 20  51.39026  3.226903 12.657859 #> 21  61.55559  7.055791  8.489930 #> 22  61.56052  5.986150 10.084287 #> 23  61.56487  4.806467 11.464174 #> 24  61.57020  2.890643 13.064617 #> 25  71.52228  6.481745  8.033863 #> 26  71.52792  5.630443  9.918369 #> 27  71.53294  4.413734 11.519080 #> 28  71.53859  2.505424 13.215844 #> 29  81.31030  5.613064  7.304378 #> 30  81.31713  4.987175  9.651318 #> 31  81.32297  3.855037 11.558159 #> 32  81.32918  2.070366 13.480465 #> 33  19.64320 16.391230 14.123930 #> 34  19.65139 13.732554 17.743790 #> 35  19.65828 10.648231 20.853492 #> 36  19.66376  7.728635 23.220158 #> 37  24.90262 15.783824 15.321719 #> 38  24.90967 12.985037 18.058428 #> 39  24.91585 10.010190 20.491240 #> 40  24.92105  6.991035 22.505398 #> 41  30.25418 16.138556 16.739853 #> 42  30.26102 13.393855 19.324502 #> 43  30.26716 10.607618 21.731190 #> 44  30.27276  7.273108 23.752644 #> 45  40.91452 15.782924 17.510382 #> 46  40.92266 13.374274 20.724075 #> 47  40.92954 10.805412 23.453600 #> 48  40.93614  7.334691 25.847593 #> 49  51.39198 14.333047 16.864441 #> 50  51.40058 12.018702 20.083427 #> 51  51.40723  9.846558 22.590705 #> 52  51.41491  6.589534 25.398280 #> 53  61.57189 13.690371 16.996966 #> 54  61.58009 11.528729 19.945124 #> 55  61.58706  9.311893 22.449645 #> 56  61.59545  5.767040 25.325825 #> 57  71.54012 13.238373 16.932398 #> 58  71.54902 11.071643 20.081274 #> 59  71.55664  8.819834 22.780058 #> 60  71.56566  5.281695 25.841769 #> 61  81.33182 13.190982 17.676192 #> 62  81.34062 10.726767 20.638174 #> 63  81.34837  7.988800 23.176378 #> 64  81.35684  4.585239 25.939244 #> 65  19.64874 23.420666 21.687107 #> 66  19.66004 19.647377 27.500456 #> 67  19.73185 15.623392 28.738487 #> 68  19.79708 11.789189 28.633575 #> 69  24.91028 22.815065 23.861975 #> 70  24.91984 18.817894 29.078197 #> 71  24.92784 14.420955 33.317690 #> 72  25.22832 11.151767 34.944238 #> 73  30.26315 23.129287 25.729721 #> 74  30.27183 19.090733 29.870090 #> 75  30.27909 14.773612 33.318109 #> 76  30.28562 10.361073 36.593382 #> 77  40.92522 22.256649 26.131415 #> 78  40.93482 18.627498 30.507177 #> 79  40.94267 14.898862 34.145885 #> 80  40.95021 10.310876 37.495125 #> 81  51.40546 21.384963 26.254448 #> 82  51.41626 18.006017 31.010246 #> 83  51.42469 14.593435 34.763714 #> 84  51.43370  9.917916 38.688899 #> 85  61.58607 20.615644 26.080886 #> 86  61.59752 17.174317 30.795043 #> 87  61.60622 13.648026 34.297745 #> 88  61.61595  9.051354 38.275584 #> 89  71.55583 20.140978 26.292548 #> 90  71.56736 16.607714 30.760717 #> 91  71.57697 12.952131 34.483628 #> 92  71.58730  8.082088 38.408434 #> 93  81.34757 19.819579 26.715162 #> 94  81.35909 16.136678 30.953382 #> 95  81.36893 12.375018 34.579266 #> 96  81.37960  7.391318 38.424483 #> 97  19.65210 31.118561 29.410615 #> 98  19.81961 26.279610 29.415106 #> 99  19.92242 19.930878 29.199660 #> 100 19.97208 15.075890 29.012675 #> 101 24.91543 29.770402 34.068302 #> 102 25.01114 24.706093 35.595907 #> 103 25.35137 19.551422 35.621473 #> 104 25.40544 14.573993 35.352392 #> 105 30.26917 29.247934 35.554849 #> 106 30.28636 23.775732 41.036601 #> 107 30.35855 18.464558 40.657519 #> 108 30.41422 13.475181 40.307211 #> 109 40.93352 28.554701 35.597727 #> 110 40.94366 23.432865 40.801167 #> 111 40.95230 18.262399 45.524719 #> 112 40.96436 12.702250 49.234842 #> 113 51.41617 28.185376 36.205381 #> 114 51.42787 23.397650 42.094789 #> 115 51.43710 18.487946 46.754196 #> 116 51.44600 12.600851 51.144217 #> 117 61.59727 27.053411 35.071997 #> 118 61.61079 22.541829 41.537982 #> 119 61.62093 17.728209 46.269434 #> 120 61.63119 11.810282 51.060399 #> 121 71.56842 26.519167 35.398310 #> 122 71.58155 21.631230 40.941049 #> 123 71.59281 16.781903 45.899666 #> 124 71.60386 10.863836 50.707770 #> 125 79.86302 21.472639 34.493193 #> 126 80.52058 18.542815 41.446228 #> 127 81.24207 15.968356 46.766651 #> 128 81.39866 10.183410 51.339891  # plot: note that we are setting panel order from red --> yellow library(lattice)  xyplot(   value ~ factor(chroma) | factor(hue, levels = hues),   main = \"Common Soil Colors\", layout = c(4, 1), scales = list(alternating = 1),   strip = strip.custom(bg = grey(0.85)),   data = d, as.table = TRUE, subscripts = TRUE,   xlab = 'Chroma', ylab = 'Value',   panel = function(x, y, subscripts, ...) {     panel.xyplot(x, y, pch = 15, cex = 4, col = d$color[subscripts])   } )    # convert a non-standard color to closest \"chip\" in `munsell` look-up table getClosestMunsellChip('7.9YR 2.7/2.0', convertColors = FALSE) #> [1] \"7.5YR 2.5/2\"  # convert directly to hex notation of sRGB getClosestMunsellChip('7.9YR 2.7/2.0') #> [1] \"#48382CFF\""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2spc-SoilProfileCollection-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Munsell Hue, Value, Chroma converted to sRGB & CIELAB into a SoilProfileCollection — munsell2spc,SoilProfileCollection-method","title":"Merge Munsell Hue, Value, Chroma converted to sRGB & CIELAB into a SoilProfileCollection — munsell2spc,SoilProfileCollection-method","text":"Convert Munsell hue, value chroma sRGB (rgb_R, rgb_G, rgb_B) CIELAB (lab_L, lab_A, lab_B) color coordinates using munsell2rgb. converted values stored horizons() slot unless .spc FALSE, case results combined profile horizon ID columns returned data.frame subclass used SPC.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2spc-SoilProfileCollection-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Munsell Hue, Value, Chroma converted to sRGB & CIELAB into a SoilProfileCollection — munsell2spc,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' munsell2spc(   object,   hue = \"hue\",   value = \"value\",   chroma = \"chroma\",   .data = NULL,   as.spc = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2spc-SoilProfileCollection-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Munsell Hue, Value, Chroma converted to sRGB & CIELAB into a SoilProfileCollection — munsell2spc,SoilProfileCollection-method","text":"object SoilProfileCollection hue Column name containing numeric hue values. Default: \"hue\" value Column name containing numeric value values. Default: \"value\" chroma Column name containing numeric chroma values. Default: \"chroma\" .data Optional: character vector equal length number horizons (containing Munsell notation), column name horizon data data.frame containing three columns (names specified hue, value, chroma) .spc Return data.frame-like object ID columns?","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2spc-SoilProfileCollection-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Munsell Hue, Value, Chroma converted to sRGB & CIELAB into a SoilProfileCollection — munsell2spc,SoilProfileCollection-method","text":"SoilProfileCollection data.frame-like object","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/munsell2spc-SoilProfileCollection-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Munsell Hue, Value, Chroma converted to sRGB & CIELAB into a SoilProfileCollection — munsell2spc,SoilProfileCollection-method","text":"","code":"data(sp3) depths(sp3) <- id ~ top + bottom  # inspect input data horizons(sp3)[,c(\"hue\",\"value\",\"chroma\")] #>      hue value chroma #> 1   10YR     5      3 #> 2   10YR     6      4 #> 3   10YR     6      4 #> 4  7.5YR     6      6 #> 5  7.5YR     6      5 #> 6   10YR     5      3 #> 7   10YR     6      3 #> 8   10YR     6      3 #> 9   2.5Y     6      4 #> 10   5YR     4      4 #> 11   5YR     5      6 #> 12   5YR     4      6 #> 13   5YR     4      6 #> 14 2.5YR     4      6 #> 15  10YR     5      4 #> 16 2.5YR     3      6 #> 17 7.5YR     5      4 #> 18   5YR     5      6 #> 19   5YR     5      6 #> 20   5YR     4      6 #> 21  10YR     5      4 #> 22  10YR     5      3 #> 23 7.5YR     5      6 #> 24   5YR     5      6 #> 25   5YR     5      5 #> 26 7.5YR     4      4 #> 27 2.5YR     4      3 #> 28 7.5YR     4      4 #> 29   5YR     5      6 #> 30   5YR     5      6 #> 31   5YR     5      7 #> 32  10YR     4      3 #> 33  10YR     6      3 #> 34  10YR     6      5 #> 35  10YR     5      2 #> 36  10YR     5      2 #> 37  10YR     5      2 #> 38  10YR     6      3 #> 39  10YR     5      2 #> 40  10YR     5      2 #> 41  2.5Y     5      2 #> 42  2.5Y     6      3 #> 43  10YR     4      2 #> 44  10YR     6      2 #> 45  10YR     6      3 #> 46  2.5Y     7      2  # do color conversions to sRGB and LAB, join into horizon data sp3 <- munsell2spc(sp3)  # plot rgb \"R\" coordinate by horizon plot(sp3, color = \"rgb_R\")   # plot lab \"A\" coordinate by horizon plot(sp3, color = \"lab_A\")   # note that `lab_A` values do not exactly match the original `A` values # this is because `lab_A` was computed from the (field determined) Munsell color notation, # while `A` was directly measured in the lab by colorimeter plot(sp3$A, sp3$lab_A, xlab = 'Measured', ylab = 'Converted from Field Observed Munsell')"},{"path":"https://ncss-tech.github.io/aqp/reference/munsellHuePosition.html","id":null,"dir":"Reference","previous_headings":"","what":"Munsell Hue Position Reference — munsellHuePosition","title":"Munsell Hue Position Reference — munsellHuePosition","text":"Position data 40 standard Munsell hues (neutral). Data include angular positions (compass-style, origin [x = 0, y = 1], CW rotation) Cartesian coordinates unit circle.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsellHuePosition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Munsell Hue Position Reference — munsellHuePosition","text":"","code":"data(munsellHuePosition)"},{"path":"https://ncss-tech.github.io/aqp/reference/munsellHuePosition.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Munsell Hue Position Reference — munsellHuePosition","text":"object class data.frame 41 rows 4 columns.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/munsellHuePosition.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Munsell Hue Position Reference — munsellHuePosition","text":"Munsell book color. 1976. Macbeth, Division Kollmorgen Corp., Baltimore, MD.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mutate_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a SPC (by profile) with a set of expressions — mutate_profile","title":"Transform a SPC (by profile) with a set of expressions — mutate_profile","text":"mutate_profile() function used transforming SoilProfileCollections. expression applied site horizon level attributes individual profiles. distinguishes function transform, applied values collection, regardless profile came .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mutate_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a SPC (by profile) with a set of expressions — mutate_profile","text":"","code":"mutate_profile(object, ..., col_names = NULL, horizon_level = NULL)  mutate_profile_raw(object, expr, col_names = NULL, horizon_level = NULL)"},{"path":"https://ncss-tech.github.io/aqp/reference/mutate_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a SPC (by profile) with a set of expressions — mutate_profile","text":"object SoilProfileCollection ... set comma-delimited R expressions resolve transformation applied single profile e.g mutate_profile(hzdept = max(hzdept) - hzdept) col_names character. Optional column names. match number expressions .... horizon_level logical. TRUE results expressions added SoilProfileCollection's horizon slot, FALSE results added site slot. NULL (default) results stored site horizon slot based number rows slot compared length result calculated first last profile collection. expr list expressions terms column names site horizon table object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mutate_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a SPC (by profile) with a set of expressions — mutate_profile","text":"SoilProfileCollection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mutate_profile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform a SPC (by profile) with a set of expressions — mutate_profile","text":"length expression's result matches number horizons, result stored horizon-level variable. result length 1, stored site-level variable. ambiguous case first last profile one horizon, results stored horizon slot default. force results site slot use horizon_level = FALSE.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mutate_profile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform a SPC (by profile) with a set of expressions — mutate_profile","text":"Andrew G. Brown.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/mutate_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform a SPC (by profile) with a set of expressions — mutate_profile","text":"","code":"data(sp4) depths(sp4) <- id ~ top + bottom  mutate_profile(sp4, clay_wtd_average = weighted.mean(clay, bottom - top)) #> SoilProfileCollection with 10 profiles and 30 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 16 - 49 cm #>  #> ----- Horizons (6 / 30 rows  |  10 / 14 columns) ----- #>      id hzID top bottom name   K   Mg  Ca CEC_7 ex_Ca_to_Mg #>  colusa    1   0      3    A 0.3 25.7 9.0  23.0        0.35 #>  colusa    2   3      8  ABt 0.2 23.7 5.6  21.4        0.23 #>  colusa    3   8     30  Bt1 0.1 23.2 1.9  23.7        0.08 #>  colusa    4  30     42  Bt2 0.1 44.3 0.3  43.0        0.01 #>   glenn    5   0      9    A 0.2 21.9 4.4  18.8        0.20 #>   glenn    6   9     34   Bt 0.3 18.9 4.5  27.5        0.20 #> [... more horizons ...] #>  #> ----- Sites (6 / 10 rows  |  2 / 2 columns) ----- #>         id clay_wtd_average #>     colusa         37.19048 #>      glenn         31.61765 #>      kings         21.90000 #>   mariposa         30.32653 #>  mendocino         21.93333 #>       napa         16.40000 #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY]  data(jacobs2000)  set.seed(123)  ## col_names allows for column names to be calculated x <- mutate_profile(jacobs2000, bottom - top / sum(bottom - top),                     col_names = paste0(\"relthk\", floor(runif(1, 0, 100)))) x$relthk28 #>  [1]  18.00000  42.91549  78.79812 129.62911 152.38967 155.28169 212.26761 #>  [8]  18.00000  45.91549  83.78404 121.60563 144.42723 212.31925  15.00000 #> [15]  24.91429  63.85714  83.63429 111.52000 164.36000 174.05714  20.00000 #> [22]  52.90148  78.73892 129.61084 164.35961 184.18719 202.08867  28.00000 #> [29]  60.84699 108.66667 134.40437 182.26230  18.00000  45.89286  75.72619 #> [36] 103.54762 118.38095 167.29167  15.00000  40.90132  47.73026  60.68421 #> [43]  90.59868 131.40132 139.13158 151.07895  # mutate_profile_raw allows for lists of expressions to be evaluated master_desgn <- c(\"O\", \"A\", \"E\", \"B\", \"C\", \"R\", \"L\", \"M\") thk_names <- paste0(\"thk_\", master_desgn)  # calculate thickness for each horizon x$thk <- x$bottom - x$top  ## construct an arbitrary number of expressions using variable inputs ops <- lapply(master_desgn, function(x) {   substitute(sum(thk[grepl(PATTERN, name)], na.rm = TRUE), list(PATTERN = x)) }) names(ops) <- thk_names  # do mutation y <- mutate_profile_raw(x, ops)  site(y)[c(idname(y), thk_names)] #>     id thk_O thk_A thk_E thk_B thk_C thk_R thk_L thk_M #> 1 92-1     0    18    25   113    60     0     0     0 #> 2 92-2     0    18    28    99    68     0     0     0 #> 3 92-3     0    25    49   111     0     0     0     0 #> 4 92-4     0    20     0     0   183     0     0     0 #> 5 92-5     0    28    81    26    48     0     0     0 #> 6 92-6     0    46    86    64     0     0     0     0 #> 7 92-7     0    15    97    28    12     0     0     0"},{"path":"https://ncss-tech.github.io/aqp/reference/names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get names of columns in site and horizons table — names,SoilProfileCollection-method","title":"Get names of columns in site and horizons table — names,SoilProfileCollection-method","text":"Get names columns site horizons table SoilProfileCollection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get names of columns in site and horizons table — names,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' names(x)"},{"path":"https://ncss-tech.github.io/aqp/reference/names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get names of columns in site and horizons table — names,SoilProfileCollection-method","text":"x SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/nrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the number of horizons in a SoilProfileCollection — nrow,SoilProfileCollection-method","title":"Get the number of horizons in a SoilProfileCollection — nrow,SoilProfileCollection-method","text":"Get number horizons SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/nrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the number of horizons in a SoilProfileCollection — nrow,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' nrow(x)"},{"path":"https://ncss-tech.github.io/aqp/reference/nrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the number of horizons in a SoilProfileCollection — nrow,SoilProfileCollection-method","text":"x SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/osd.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Output from soilDB::fetchOSD() — osd","title":"Example Output from soilDB::fetchOSD() — osd","text":"example SoilProfileCollection object created soilDB::fetchOSD(), derived Cecil, Appling, Bonneau Official Series Descriptions.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/osd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Output from soilDB::fetchOSD() — osd","text":"","code":"data(osd)"},{"path":"https://ncss-tech.github.io/aqp/reference/osd.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Output from soilDB::fetchOSD() — osd","text":"SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/overlapMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Overlap within a Sequence — findOverlap","title":"Find Overlap within a Sequence — findOverlap","text":"Establish elements within vector horizontal positions overlap beyond given threshold Desc.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/overlapMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Overlap within a Sequence — findOverlap","text":"","code":"findOverlap(x, thresh)  overlapMetrics(x, thresh)"},{"path":"https://ncss-tech.github.io/aqp/reference/overlapMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Overlap within a Sequence — findOverlap","text":"x vector relative horizontal positions, one profile thresh threshold defining \"overlap\", typically < 1 @return list: idx: unique index overlapping elements x ov: normalized overlap (see details)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/overlapMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Overlap within a Sequence — findOverlap","text":"unique index affected (overlapping) elements x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/overlapMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Overlap within a Sequence — findOverlap","text":"","code":"x <- c(1, 2, 3, 3.4, 3.5, 5, 6, 10)  findOverlap(x, thresh = 0.5) #> Warning: This function is deprecated, please use the `overLapMetrics()` function instead. #> [1] 3 4 5   x <- c(1, 2, 3, 3.4, 3.5, 5, 6, 10)  overlapMetrics(x, thresh = 0.5) #> $idx #> [1] 3 4 5 #>  #> $ov #> [1] 0.125 #>"},{"path":"https://ncss-tech.github.io/aqp/reference/panel.depth_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Lattice Panel Function for Soil Profiles — panel.depth_function","title":"Lattice Panel Function for Soil Profiles — panel.depth_function","text":"Panel function plotting grouped soil property data, along upper lower estimates uncertainty. function can used replace panel.superpose plotting depth function data. requested, contributing fraction data printed using colors color corresponding depth function lines unless single color value given via cf.col. function able apply transformations (typically log = 10) applied scales argument xyplot  upper/lower bounds. manually applied. See examples.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/panel.depth_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lattice Panel Function for Soil Profiles — panel.depth_function","text":"","code":"panel.depth_function(   x,   y,   id,   upper = NA,   lower = NA,   subscripts = NULL,   groups = NULL,   sync.colors = FALSE,   cf = NA,   cf.col = NA,   cf.interval = 20,   ... )  prepanel.depth_function(   x,   y,   upper = NA,   lower = NA,   subscripts,   groups = NULL,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/panel.depth_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lattice Panel Function for Soil Profiles — panel.depth_function","text":"x x values (generated calling lattice function) y y values (generated calling lattice function) id vector id labels, length x y–required plotting segments (see Details section) upper vector upper confidence envelope values lower vector lower confidence envelope values subscripts paneling indices (generated calling lattice function) groups grouping data (generated calling lattice function) sync.colors optionally sync fill color within region bounded (lower–upper) line colors cf optionally annotate contributing fraction data regular depth intervals see slab cf.col optional color contributing fraction values, typically used override line color cf.interval number depth units space printed contributing fraction values ... arguments lower-level lattice plotting functions, see ","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/panel.depth_function.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lattice Panel Function for Soil Profiles — panel.depth_function","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/panel.depth_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lattice Panel Function for Soil Profiles — panel.depth_function","text":"","code":"library(lattice) data(sp1)  # 1. plotting mechanism for step-functions derived from soil profile data xyplot(   cbind(top, bottom) ~ prop,   data = sp1,   id = sp1$id,   panel = panel.depth_function,   ylim = c(250, -10),   scales = list(y = list(tick.number = 10)),   xlab = 'Property',   ylab = 'Depth (cm)',   main = 'panel.depth_function() demo' )   # 1.1 include groups argument to leverage lattice styling framework sp1$group <- factor(sp1$group, labels = c('Group 1', 'Group2'))  xyplot(   cbind(top, bottom) ~ prop,   groups = group,   data = sp1,   id = sp1$id,   panel = panel.depth_function,   ylim = c(250, -10),   scales = list(y = list(tick.number = 10)),   xlab = 'Property',   ylab = 'Depth (cm)',   main = 'panel.depth_function() demo',   auto.key = list(     columns = 2,     points = FALSE,     lines = TRUE   ),   par.settings = list(superpose.line = list(col = c(     'Orange', 'RoyalBlue'   ))) )    # more complex examples, using step functions with grouped data # better looking figures with less customization via tactile package if(requireNamespace('tactile')) {      library(data.table)   library(lattice)   library(tactile)      # example data   data(sp6)      # a single profile   x <- sp6[1:5, ]      # wide -> long format   x.long <- data.table::melt(     data.table::data.table(x),      id.vars = c('id', 'top', 'bottom'),      measure.vars = c('sand', 'silt', 'clay')   )      # (optional) convert back to data.frame   x.long <- as.data.frame(x.long)      # three variables sharing a common axis   # factor levels set by melt()   xyplot(     cbind(top, bottom) ~ value | id,     groups = variable,     data = x.long,     id = x.long$id,     ylim = c(200, -5), xlim = c(10, 60),     scales = list(alternating = 1, y = list(tick.number = 10)),     par.settings = tactile.theme(superpose.line = list(lwd = 2)),     xlab = 'Sand, Silt, Clay (%)',     ylab = 'Depth (cm)',     panel = panel.depth_function,     auto.key = list(columns = 3, lines = TRUE, points = FALSE),     asp = 1.5   )         # all profiles   x <- sp6      # wide -> long format   x.long <- data.table::melt(     data.table::data.table(x),      id.vars = c('id', 'top', 'bottom'),      measure.vars = c('sand', 'silt', 'clay')   )      # (optional) convert back to data.frame   x.long <- as.data.frame(x.long)      # three variables sharing a common axis   # factor levels set by melt()   xyplot(     cbind(top, bottom) ~ value | id,     groups = variable,     data = x.long,     id = x.long$id,     ylim = c(200, -5), xlim = c(0, 70),     scales = list(alternating = 1, y = list(tick.number = 10)),     par.settings = tactile.theme(superpose.line = list(lwd = 2)),     xlab = 'Sand, Silt, Clay (%)',     ylab = 'Depth (cm)',     panel = panel.depth_function,     auto.key = list(columns = 3, lines = TRUE, points = FALSE),     as.table = TRUE   )      xyplot(     cbind(top, bottom) ~ value,     groups = variable,     data = x.long,     id = x.long$id,     ylim = c(200, -5), xlim = c(0, 70),     scales = list(alternating = 1, y = list(tick.number = 10)),     par.settings = tactile.theme(superpose.line = list(lwd = 2)),     xlab = 'Sand, Silt, Clay (%)',     ylab = 'Depth (cm)',     panel = panel.depth_function,     auto.key = list(columns = 3, lines = TRUE, points = FALSE),     as.table = TRUE   )      xyplot(     cbind(top, bottom) ~ value | variable,     groups = variable,     data = x.long,     id = x.long$id,     ylim = c(200, -5), xlim = c(0, 70),     scales = list(alternating = 1, y = list(tick.number = 10)),     par.settings = tactile.theme(superpose.line = list(lwd = 2)),     xlab = 'Sand, Silt, Clay (%)',     ylab = 'Depth (cm)',     panel = panel.depth_function,     auto.key = list(columns = 3, lines = TRUE, points = FALSE),     as.table = TRUE   )         xyplot(     cbind(top, bottom) ~ value | variable,     data = x.long,     id = x.long$id,     ylim = c(200, -5), xlim = c(0, 70),     scales = list(alternating = 1, y = list(tick.number = 10)),     par.settings = tactile.theme(superpose.line = list(lwd = 2)),     xlab = 'Sand, Silt, Clay (%)',     ylab = 'Depth (cm)',     panel = panel.depth_function,     auto.key = list(columns = 3, lines = TRUE, points = FALSE),     as.table = TRUE   )       }"},{"path":"https://ncss-tech.github.io/aqp/reference/parseMunsell.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse Munsell Color Notation — parseMunsell","title":"Parse Munsell Color Notation — parseMunsell","text":"Split Munsell color notation \"hue\", \"value\", \"chroma\", optional conversion sRGB hex notation, sRGB coordinates, CIELAB coordinates. Conversion performed munsell2rgb().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/parseMunsell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse Munsell Color Notation — parseMunsell","text":"","code":"parseMunsell(munsellColor, convertColors = TRUE, delim = NA, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/parseMunsell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse Munsell Color Notation — parseMunsell","text":"munsellColor character vector Munsell colors (e.g. c('10YR 3/4', '5YR 4/6')) convertColors logical, convert colors sRGB hex notation, sRGB coordinates, CIELAB coordinates delim optional, specify type delimiter used value chroma parts Munsell code. default \":\", \",:, \"'\", \"/\" supported. ... additional arguments munsell2rgb()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/parseMunsell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse Munsell Color Notation — parseMunsell","text":"data.frame object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/parseMunsell.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse Munsell Color Notation — parseMunsell","text":"P. Roudier D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/parseMunsell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse Munsell Color Notation — parseMunsell","text":"","code":"# just sRGB parseMunsell(\"10YR 3/5\", return_triplets = TRUE) #>           r         g          b #> 1 0.3754983 0.2555129 0.09093377  # sRGB + CIELAB (D65 illuminant) parseMunsell(\"10YR 3/5\", return_triplets = TRUE, returnLAB = TRUE) #>           r         g          b        L        A        B #> 1 0.3754983 0.2555129 0.09093377 30.27986 8.888747 29.95071  # CIELAB only parseMunsell(\"10YR 3/5\", return_triplets = FALSE, returnLAB = TRUE) #>          L        A        B #> 1 30.27986 8.888747 29.95071  # neutral hue # note chroma encoded as '0' parseMunsell('N 3/', convertColors = FALSE) #>   hue value chroma #> 1   N     3      0"},{"path":"https://ncss-tech.github.io/aqp/reference/pbindlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine a list of SoilProfileCollection objects — pbindlist","title":"Combine a list of SoilProfileCollection objects — pbindlist","text":"See combine(...) connotative short-hand method require SoilProfileCollection list. Profiles sorted based character sorting profile ID.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/pbindlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine a list of SoilProfileCollection objects — pbindlist","text":"","code":"pbindlist(l, new.idname = NULL, verbose = TRUE)"},{"path":"https://ncss-tech.github.io/aqp/reference/pbindlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine a list of SoilProfileCollection objects — pbindlist","text":"l list SoilProfileCollection objects new.idname Optional: character referring new column name put unique profile IDs ; default: NULL attempt existing idname first element verbose Produce warnings messages regarding results? default: TRUE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/pbindlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine a list of SoilProfileCollection objects — pbindlist","text":"SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/pbindlist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine a list of SoilProfileCollection objects — pbindlist","text":"Input data must share common depth unit, spatial data present, common CRS coordinate names. case non-conformal @idname /@depthcols, first SoilProfileCollection used template. one subsequent list elements non-unique values site level attribute name, ID name second list element attempted, . Non-conforming spatial data dropped final result (returns default empty SpatialPoints).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/pbindlist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine a list of SoilProfileCollection objects — pbindlist","text":"D.E. Beaudette .G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/pbindlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine a list of SoilProfileCollection objects — pbindlist","text":"","code":"# example data data(sp2, package = 'aqp') depths(sp2) <- id ~ top + bottom site(sp2) <- ~ surface  # copy pieces x <- sp2[1:5, ] y <- sp2[6:10, ]  # reset IDs and combine profile_id(y) <- sprintf(\"%s-copy\", profile_id(y))  # this should work z <- pbindlist(list(x, y))  # check plot(z)"},{"path":"https://ncss-tech.github.io/aqp/reference/perturb.html","id":null,"dir":"Reference","previous_headings":"","what":"Perturb soil horizon depths using boundary distinctness — perturb","title":"Perturb soil horizon depths using boundary distinctness — perturb","text":"\"Perturbs\" boundary horizons thickness horizons using standard deviation specified horizon-level attribute. selected using either boundary.attr thickness.attr specify column name. boundary standard deviation corresponds roughly concept \"horizon boundary distinctness.\" contrast, horizon thickness standard deviation corresponds roughly \"variation horizon thickness\" may determined several similar profiles particular layer \"common.\"","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/perturb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perturb soil horizon depths using boundary distinctness — perturb","text":"","code":"perturb(   p,   n = 100,   id = NULL,   thickness.attr = NULL,   boundary.attr = NULL,   min.thickness = 1,   max.depth = NULL,   new.idname = \"pID\" )"},{"path":"https://ncss-tech.github.io/aqp/reference/perturb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perturb soil horizon depths using boundary distinctness — perturb","text":"p SoilProfileCollection n Number new profiles generate (default: 100) per profile p id vector profile IDs length equal (n). Overrides use seq_len(n) default profile ID values. thickness.attr Horizon variance attribute containing numeric \"standard deviations\" reflecting horizon thickness boundary.attr Horizon variance attribute containing numeric \"standard deviations\" reflecting boundary transition distinctness min.thickness Minimum thickness permuted horizons (default: 1) max.depth Depth horizon depths perturbed (default: NULL) new.idname New column name contain unique profile ID (default: pID)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/perturb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perturb soil horizon depths using boundary distinctness — perturb","text":"SoilProfileCollection n realizations profile p","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/perturb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perturb soil horizon depths using boundary distinctness — perturb","text":"Imagine Normal curve mean centered vertical (depth axis) representative value (RV) horizon bottom depth thickness. Empirical Rule Normal distribution, two \"standard deviations\" \"central\" mean value represent 95% \"typical volume\" horizon boundary. perturb() can leverage semi-quantitative (ordered factor) levels boundary distinctness/topography upper lower boundary individual horizons. handy function hzDistinctnessCodeToOffset(). boundary.attr arguably easier parameterize single profile description \"Form 232\" horizon boundary distinctness classes (based vertical distance transition) conventionally recorded layer. Alternately, perturb() can parameterized using standard deviation thickness layers derived group. Say, variance parameters defined set pedons correlated particular series component, template \"seed\" profile , example, Official Series Description Representative Component Pedon.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/perturb.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perturb soil horizon depths using boundary distinctness — perturb","text":"D.E. Beaudette, .G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/perturb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perturb soil horizon depths using boundary distinctness — perturb","text":"","code":"### THICKNESS  # load sample data and convert into SoilProfileCollection data(sp3) depths(sp3) <- id ~ top + bottom  # select a profile to use as the basis for simulation s <- sp3[3,]  # reset horizon names s$name <- paste('H', seq_along(s$name), sep = '')  # simulate 25 new profiles horizons(s)$hz.sd <- 2 # constant standard deviation sim.1 <- perturb(s, n = 25, thickness.attr = \"hz.sd\")  # simulate 25 new profiles using different SD for each horizon horizons(s)$hz.sd <- c(1, 2, 5, 5, 5, 10, 3) sim.2 <- perturb(s, n = 25, thickness.attr = \"hz.sd\")  # plot par(mfrow = c(2, 1), mar = c(0, 0, 0, 0)) plot(sim.1) mtext(   'SD = 2',   side = 2,   line = -1.5,   font = 2,   cex = 0.75 ) plot(sim.2) mtext(   'SD = c(1, 2, 5, 5, 5, 10, 3)',   side = 2,   line = -1.5,   font = 2,   cex = 0.75 )   # aggregate horizonation of simulated data # note: set class_prob_mode=2 as profiles were not defined to a constant depth sim.2$name <- factor(sim.2$name) a <- slab(sim.2, ~ name, cpm=2)  # convert to long format for plotting simplicity library(data.table) a.long <- data.table::melt(data.table::as.data.table(a),                id.vars = c('top', 'bottom'),                 measure.vars = levels(sim.2$name))  # plot horizon probabilities derived from simulated data # dashed lines are the original horizon boundaries library(lattice)  xyplot(   top ~ value,   groups = variable,   data = a.long,   subset = value > 0,   ylim = c(100,-5),   type = c('l', 'g'),   asp = 1.5,   ylab = 'Depth (cm)',   xlab = 'Probability',   auto.key = list(     columns = 4,     lines = TRUE,     points = FALSE   ),   panel = function(...) {     panel.xyplot(...)     panel.abline(h = s$top, lty = 2, lwd = 2)   } )   ### BOUNDARIES  # example with sp1 (using boundary distinctness) data(\"sp1\") depths(sp1) <- id ~ top + bottom  # specify \"standard deviation\" for boundary thickness #   consider a normal curve centered at boundary RV depth # lookup table: ~maximum thickness of boundary distinctness classes, divided by 3 bound.lut <- c('V'=0.5,'A'=2,'C'=5,'G'=15,'D'=45) / 3  ## V          A          C          G          D ## 0.1666667  0.6666667  1.6666667  5.0000000 15.0000000  sp1$bound_sd <- bound.lut[sp1$bound_distinct]  # hold any NA boundary distinctness constant sp1$bound_sd[is.na(sp1$bound_sd)] <- 0  quantile(sp1$bound_sd, na.rm = TRUE) #>        0%       25%       50%       75%      100%  #> 0.0000000 0.0000000 0.6666667 0.6666667 1.6666667  p <- sp1[3]  # assume boundary sd is 1/12 midpoint of horizon depth # (i.e. general relationship: SD increases (less well known) with depth) sp1 <- transform(sp1, midpt = (bottom - top) / 2 + top, bound_sd = midpt / 12) quantile(sp1$bound_sd) #>          0%         25%         50%         75%        100%  #>  0.08333333  0.92708333  3.75000000  9.25000000 19.41666667   perturb(p, boundary.attr = \"bound_sd\", n = 10) #> SoilProfileCollection with 10 profiles and 50 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 64 - 70 cm #>  #> ----- Horizons (6 / 50 rows  |  10 / 20 columns) ----- #>       id hzID top bottom group bound_distinct bound_topography name texture #>  P003-01    1   0      2     2              C                W Oa/A      SL #>  P003-01    2   2     15     2              G                S   AB     SCL #>  P003-01    3  15     34     2              G                S   BA     SCL #>  P003-01    4  34     54     2              C                S  Bt1  GRVSCL #>  P003-01    5  54     67     2              G                S  Bt2    GRVC #>  P003-02    6   0      2     2              C                W Oa/A      SL #>  prop #>    14 #>    18 #>    22 #>    30 #>    50 #>    14 #> [... more horizons ...] #>  #> ----- Sites (6 / 10 rows  |  2 / 2 columns) ----- #>       id .oldID #>  P003-01   P003 #>  P003-02   P003 #>  P003-03   P003 #>  P003-04   P003 #>  P003-05   P003 #>  P003-06   P003 #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY]   ### Custom IDs  ids <- sprintf(\"%s-%03d\", profile_id(p), 1:10)  perturb(p, boundary.attr = \"bound_sd\", id = ids) #> SoilProfileCollection with 10 profiles and 50 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 65 - 69 cm #>  #> ----- Horizons (6 / 50 rows  |  10 / 20 columns) ----- #>        id hzID top bottom group bound_distinct bound_topography name texture #>  P003-001    1   0      2     2              C                W Oa/A      SL #>  P003-001    2   2     14     2              G                S   AB     SCL #>  P003-001    3  14     36     2              G                S   BA     SCL #>  P003-001    4  36     52     2              C                S  Bt1  GRVSCL #>  P003-001    5  52     68     2              G                S  Bt2    GRVC #>  P003-002    6   0      3     2              C                W Oa/A      SL #>  prop #>    14 #>    18 #>    22 #>    30 #>    50 #>    14 #> [... more horizons ...] #>  #> ----- Sites (6 / 10 rows  |  2 / 2 columns) ----- #>        id .oldID #>  P003-001   P003 #>  P003-002   P003 #>  P003-003   P003 #>  P003-004   P003 #>  P003-005   P003 #>  P003-006   P003 #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY]"},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorMixture.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Spectral Mixing of Munsell Colors — plotColorMixture","title":"Visualize Spectral Mixing of Munsell Colors — plotColorMixture","text":"Lattice visualization demonstrating subtractive mixtures colors Munsell notation associated spectra.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorMixture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Spectral Mixing of Munsell Colors — plotColorMixture","text":"","code":"plotColorMixture(   x,   w = rep(1, times = length(x))/length(x),   mixingMethod = c(\"exact\", \"reference\"),   n = 1,   swatch.cex = 1.5,   label.cex = 0.85,   showMixedSpec = FALSE,   overlapFix = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorMixture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Spectral Mixing of Munsell Colors — plotColorMixture","text":"x vector colors Munsell notation, contain duplicates w vector weights, can sum number mixingMethod approach used simulate mixture: exact: simulate subtractive mixture pigments, color conversion via CIE1931 color-matching functions (see mixMunsell()) reference  : simulate subtractive mixture pigments, selecting n closest reference spectra, requires gower package n number closest mixture candidates mixingMethod = 'reference' (see mixMunsell()), results can hard interpret n > 2 swatch.cex scaling factor color swatch rectangle width height, relative label.cex, typically 1 3 label.cex scaling factor swatch labels showMixedSpec show weighted geometric mean (mixed) spectra dotted line (mixingMethod = 'reference') overlapFix attempt \"fix\" overlapping chip labels via fixOverlap(), using method = 'E'","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorMixture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Spectral Mixing of Munsell Colors — plotColorMixture","text":"lattice graphics object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorMixture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Spectral Mixing of Munsell Colors — plotColorMixture","text":"present, names attribute x used figure legend. See expanded tutorial examples.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorMixture.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize Spectral Mixing of Munsell Colors — plotColorMixture","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorQuantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Color Quantiles — plotColorQuantiles","title":"Visualize Color Quantiles — plotColorQuantiles","text":"function creates visualization output colorQuantiles using lattice graphics.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorQuantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Color Quantiles — plotColorQuantiles","text":"","code":"plotColorQuantiles(res, pt.cex = 7, lab.cex = 0.66)"},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorQuantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Color Quantiles — plotColorQuantiles","text":"res list returned colorQuantiles pt.cex scaling factor color chips lab.cex chip label scaling factor","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorQuantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Color Quantiles — plotColorQuantiles","text":"lattice graphics object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorQuantiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Color Quantiles — plotColorQuantiles","text":"Marginal percentiles L1 median CIELAB values colorQuantiles() combined single plot, arranged panels according L, , B coordinates. Munsell \"chips\" (colors labels) based closest Munsell color found via col2Munsell().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotColorQuantiles.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize Color Quantiles — plotColorQuantiles","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotMultipleSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Multiple SoilProfileCollection Objects — plotMultipleSPC","title":"Plot Multiple SoilProfileCollection Objects — plotMultipleSPC","text":"Plot Multiple SoilProfileCollection Objects","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotMultipleSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Multiple SoilProfileCollection Objects — plotMultipleSPC","text":"","code":"plotMultipleSPC(   spc.list,   group.labels,   args = rep(list(NA), times = length(spc.list)),   merged.legend = NULL,   merged.colors = c(\"#5E4FA2\", \"#3288BD\", \"#66C2A5\", \"#ABDDA4\", \"#E6F598\", \"#FEE08B\",     \"#FDAE61\", \"#F46D43\", \"#D53E4F\", \"#9E0142\"),   merged.legend.title = merged.legend,   arrow.offset = 2,   bracket.base.depth = 95,   label.offset = 2,   label.cex = 0.75,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/plotMultipleSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Multiple SoilProfileCollection Objects — plotMultipleSPC","text":"spc.list list SoilProfileCollection objects group.labels vector group labels, one SoilProfileCollection object args list arguments passed plotSPC, one SoilProfileCollection object merged.legend name horizon level attribute create thematic sketches merged legend merged.colors vector colors used create thematic sketches shared horizon level attribute merged.legend.title legend title arrow.offset vertical offset depth base start / end profiles group bracket arrows bracket.base.depth baseline depth used group brackets label.offset vertical offset group labels baseline label.cex label size ... additional arguments first call plotSPC","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotMultipleSPC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Multiple SoilProfileCollection Objects — plotMultipleSPC","text":"Combine multiple SoilProfileCollection objects single profile sketch, annotated groups. See examples usage.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotMultipleSPC.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot Multiple SoilProfileCollection Objects — plotMultipleSPC","text":"thematic sketches, use merged.legend argument instead color argument plotSPC","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/plotMultipleSPC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Multiple SoilProfileCollection Objects — plotMultipleSPC","text":"D.E. Beaudette Ben Marshall","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotMultipleSPC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Multiple SoilProfileCollection Objects — plotMultipleSPC","text":"","code":"## ## Simple Example ##  # using default arguments to plotSPC()  # load sample data data(sp3) data(sp4)  # promote to SoilProfileCollection depths(sp3) <- id ~ top + bottom depths(sp4) <- id ~ top + bottom  # combine into a list spc.list <- list(sp3, sp4)  # argument list arg.list <- list(   list(name='name', id.style='top'),   list(name='name', id.style='side') )  # plot multiple SPC objects,  # with list of named arguments for each call to plotSPC par(mar=c(1,1,3,3)) plotMultipleSPC(   spc.list,    group.labels = c('Collection 1', 'Collection 2'),   args = arg.list,    bracket.base.depth = 120, label.cex = 1 )   # specify a different max.depth plotMultipleSPC(   spc.list,    group.labels = c('Collection 1', 'Collection 2'),   args = arg.list,    bracket.base.depth = 120, label.cex = 1,   max.depth = 250 )     ## ## Merged Legend Example ##  # merged legend based on hz attribute 'clay'  # reset sample data data(sp3) data(sp4)  # promote to SoilProfileCollection depths(sp3) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing. depths(sp4) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing.  # combine into a list spc.list <- list(sp3, sp4)  # argument list arg.list <- list(   list(name='name', id.style='top'),   list(name='name', id.style='side') )   par(mar=c(1,1,3,3)) plotMultipleSPC(   spc.list,    group.labels = c('Collection 1', 'Collection 2'),   args = arg.list,    label.cex = 1,    merged.legend = 'clay', merged.legend.title = 'Clay (%)' )    ## ## Complex Merged Legend Example ##  # create a merged legend from \"clay\" in sp4 and jacobs2000 # use \"soil_color\" from sp3  # reset sample data data(sp3) data(sp4) data(jacobs2000)  # promote to SoilProfileCollection depths(sp3) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing. depths(sp4) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing.  # remove 'clay' column from sp3 sp3$clay <- NULL  # combine into a list spc.list <- list(sp3, sp4, jacobs2000)  # try some variations on the default arguments # `clay` is missing in the first SPC, safe to specify another column for colors arg.list <- list(   list(color = 'soil_color', id.style='top', name = NA, width = 0.3, hz.depths = TRUE),   list(name='name', id.style='side', name.style = 'center-center'),   list(name='name', id.style='side', name.style = 'left-center', hz.depths = TRUE) )  par(mar=c(1,1,3,3)) plotMultipleSPC(   spc.list,    group.labels = c('sp3', 'sp4', 'jacobs2000'),   label.offset = 3,   args = arg.list,    merged.legend = 'clay', merged.legend.title = 'Clay (%)',   depth.axis = list(line = 0) )"},{"path":"https://ncss-tech.github.io/aqp/reference/plotProfileDendrogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot soil profiles below a dendrogram — plotProfileDendrogram","title":"Plot soil profiles below a dendrogram — plotProfileDendrogram","text":"Plot soil profiles dendrogram, using methods ape package.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotProfileDendrogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot soil profiles below a dendrogram — plotProfileDendrogram","text":"","code":"plotProfileDendrogram(   x,   clust,   rotateToProfileID = FALSE,   scaling.factor = 0.01,   width = 0.1,   y.offset = 0.1,   dend.y.scale = max(clust$height * 2, na.rm = TRUE),   dend.color = par(\"fg\"),   dend.width = 1,   dend.type = c(\"phylogram\", \"cladogram\"),   debug = FALSE,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/plotProfileDendrogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot soil profiles below a dendrogram — plotProfileDendrogram","text":"x SoilProfileCollection object clust hierarchical clustering object generated hclust, cluster::agnes, cluster::diana rotateToProfileID logical, attempt rotation dendrogram according original profile IDs, requires dendextend package scaling.factor vertical scaling profile heights (may tinker ) width scaling profile widths y.offset vertical offset top profiles dend.y.scale extent y-axis (may tinker ) dend.color dendrogram line color dend.width dendrogram line width dend.type dendrogram type, passed plot.phylo(), either \"phylogram\" \"cladogram\" debug logical, optionally print debugging data return data.frame linking structure ... additional arguments plotSPC","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotProfileDendrogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot soil profiles below a dendrogram — plotProfileDendrogram","text":"function typically called create graphical output, debug=TRUE data.frame IDs linking structure used build figure.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotProfileDendrogram.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plot soil profiles below a dendrogram — plotProfileDendrogram","text":"may tinker arguments get optimal arrangement scaling soil profiles.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plotProfileDendrogram.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot soil profiles below a dendrogram — plotProfileDendrogram","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plot_distance_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Between Individual Distance Plot — plot_distance_graph","title":"Between Individual Distance Plot — plot_distance_graph","text":"Plot pair-wise distances individuals line segments.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plot_distance_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Between Individual Distance Plot — plot_distance_graph","text":"","code":"plot_distance_graph(D, idx = 1:dim(as.matrix((D)))[1])"},{"path":"https://ncss-tech.github.io/aqp/reference/plot_distance_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Between Individual Distance Plot — plot_distance_graph","text":"D distance matrix, class 'dist' compatible class idx integer sequence defining individuals compared","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plot_distance_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Between Individual Distance Plot — plot_distance_graph","text":"value returned.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plot_distance_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Between Individual Distance Plot — plot_distance_graph","text":"default individuals plotting axis. 10 individuals, plot can become quite messy. See examples ideas.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plot_distance_graph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Between Individual Distance Plot — plot_distance_graph","text":"https://casoilresource.lawr.ucdavis.edu/","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/plot_distance_graph.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Between Individual Distance Plot — plot_distance_graph","text":"Dylan E Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/plot_distance_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Between Individual Distance Plot — plot_distance_graph","text":"","code":"data(sp2) depths(sp2) <- id ~ top + bottom d <- NCSP(   sp2,   vars = c('prop', 'field_ph', 'hue', 'value'),   maxDepth = 100,   k = 0.01 ) #> Computing dissimilarity matrices from 18 profiles #>  [0.4 Mb] #> cache: 48 | slices: 100  par(mfcol=c(3,1), mar=c(2.5,4.5,1,1)) plot_distance_graph(d, idx=1:6) plot_distance_graph(d, idx=7:12) plot_distance_graph(d, idx=12:18)"},{"path":"https://ncss-tech.github.io/aqp/reference/previewColors.html","id":null,"dir":"Reference","previous_headings":"","what":"Preview Colors — previewColors","title":"Preview Colors — previewColors","text":"Preview colors arranged according CIE2000 distances manual specification.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/previewColors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preview Colors — previewColors","text":"","code":"previewColors(   cols,   method = c(\"grid\", \"MDS\", \"manual\"),   labels = NULL,   labels.cex = 1,   col.order = NULL,   nrow = ceiling(sqrt(length(cols))),   ncol = nrow,   border.col = \"black\",   pt.cex = 2,   pt.pch = 15 )"},{"path":"https://ncss-tech.github.io/aqp/reference/previewColors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preview Colors — previewColors","text":"cols vector R colors method either \"grid\", \"MDS\", \"manual\", see details labels optional vector labels, disabled length(cols) > 5000 labels.cex scaling factor labels col.order integer vector used order colors nrow number rows used \"grid\" method ncol number columns used \"grid\" method border.col border color used \"grid\" method pt.cex point scaling factor used \"MDS\" method pt.pch point symbol used \"MDS\" method","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/previewColors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preview Colors — previewColors","text":"method = \"grid\" \"manual\", vector color order returned. method = \"MDS\", output stats::cmdscale().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/previewColors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preview Colors — previewColors","text":"Color sorting based CIE2000 distances calculated farver::compare_colour(). \"grid\" method arranges colors rectangular grid ordering based divisive hierarchical clustering pair-wise distances. Unique colors used cols contains 5,000 colors. \"MDS\" method arranges unique colors via classical multidimensional scaling (principal coordinates) via cmdscale(). Colors can manually arranged supplying vector integers col.order setting method='manual'.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/previewColors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preview Colors — previewColors","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/previewColors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preview Colors — previewColors","text":"","code":"# example data data(sp2)  # convert into SoilProfileCollection object depths(sp2) <- id ~ top + bottom  previewColors(sp2$soil_color)  previewColors(sp2$soil_color, method = 'MDS', pt.cex = 3)   # create colors using HCL space cols.hcl <- hcl(h = 0:360, c = 100, l = 50)  # grid, colors sorted by dE00 previewColors(cols.hcl)   # manual specification previewColors(cols.hcl, method = 'manual', col.order = 1:361)   # MDS previewColors(cols.hcl, method = 'MDS', pt.cex = 1)"},{"path":"https://ncss-tech.github.io/aqp/reference/profileApply.html","id":null,"dir":"Reference","previous_headings":"","what":"Iterate over profiles in a SoilProfileCollection — profileApply","title":"Iterate over profiles in a SoilProfileCollection — profileApply","text":"Iterate profiles SoilProfileCollection, calling FUN single-profile SoilProfileCollection step.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileApply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iterate over profiles in a SoilProfileCollection — profileApply","text":"","code":"# S4 method for class 'SoilProfileCollection' profileApply(   object,   FUN,   simplify = TRUE,   frameify = FALSE,   chunk.size = 100,   column.names = NULL,   APPLY.FUN = lapply,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/profileApply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iterate over profiles in a SoilProfileCollection — profileApply","text":"object SoilProfileCollection FUN function applied profile within collection simplify logical, result simplified vector? default: TRUE; see examples frameify logical, result collapsed data.frame? default: FALSE; overrides simplify argument; see examples chunk.size numeric, size \"chunks\" faster processing large SoilProfileCollection objects; default: 100 column.names character, optional character vector replace frameify-derived column names; match length colnames() FUN result; default: NULL APPLY.FUN function, optional alternate lapply()-like function processing chunks. example future.apply::future_lapply() processing chunks parallel. Default base::lapply(). ... additional arguments passed FUN","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileApply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iterate over profiles in a SoilProfileCollection — profileApply","text":"simplify TRUE, vector length nrow(object) (horizon data) length length(object) (site data). simplify FALSE, list returned. frameify TRUE, data.frame returned. attempt made identify idname /hzidname data.frame result, safely ensuring IDs preserved facilitate merging profileApply result downstream.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileApply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iterate over profiles in a SoilProfileCollection — profileApply","text":"","code":"data(sp1) depths(sp1) <- id ~ top + bottom  # estimate soil depth using horizon designations profileApply(sp1, estimateSoilDepth, name='name') #> P001 P002 P003 P004 P005 P006 P007 P008 P009  #>   89   59   67   62   68  200  233  200  240   # scale a single property 'prop' in horizon table # scaled = (x - mean(x)) / sd(x) sp1$d <- profileApply(sp1, FUN=function(x) round(scale(x$prop), 2)) plot(sp1, name='d') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   # compute depth-wise differencing by profile # note that our function expects that the column 'prop' exists f <- function(x) { c(x$prop[1], diff(x$prop)) } sp1$d <- profileApply(sp1, FUN=f) plot(sp1, name='d') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   # compute depth-wise cumulative sum by profile # note the use of an anonymous function sp1$d <- profileApply(sp1, FUN=function(x) cumsum(x$prop)) plot(sp1, name='d') #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   # compute profile-means, and save to @site # there must be some data in @site for this to work site(sp1) <- ~ group sp1$mean_prop <- profileApply(sp1, FUN=function(x) mean(x$prop, na.rm=TRUE))  # re-plot using ranks defined by computed summaries (in @site) plot(sp1, plot.order=rank(sp1$mean_prop)) #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   ## iterate over profiles, calculate on each horizon, merge into original SPC  # example data data(sp1)  # promote to SoilProfileCollection depths(sp1) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing. site(sp1) <- ~ group #> Error in eval(predvars, data, env): object 'group' not found  # calculate horizon thickness and proportional thickness # returns a data.frame result with multiple attributes per horizon thicknessFunction <- function(p) {   hz <- horizons(p)   depthnames <- horizonDepths(p)   res <- data.frame(profile_id(p), hzID(p),                     thk=(hz[[depthnames[[2]]]] - hz[[depthnames[1]]]))   res$hz_prop <- res$thk / sum(res$thk)   colnames(res) <- c(idname(p), hzidname(p), 'hz_thickness', 'hz_prop')   return(res) }  # list output option with simplify=F, list names are profile_id(sp1) list.output <- profileApply(sp1, thicknessFunction, simplify = FALSE) head(list.output) #> $P001 #>     id hzID hz_thickness    hz_prop #> 1 P001    1            2 0.02247191 #> 2 P001    2           12 0.13483146 #> 3 P001    3           35 0.39325843 #> 4 P001    4            8 0.08988764 #> 5 P001    5           32 0.35955056 #> 6 P001    6            0 0.00000000 #>  #> $P002 #>     id hzID hz_thickness    hz_prop #> 1 P002    7            5 0.08474576 #> 2 P002    8           14 0.23728814 #> 3 P002    9           14 0.23728814 #> 4 P002   10           26 0.44067797 #>  #> $P003 #>     id hzID hz_thickness    hz_prop #> 1 P003   11            2 0.02985075 #> 2 P003   12           11 0.16417910 #> 3 P003   13           22 0.32835821 #> 4 P003   14           18 0.26865672 #> 5 P003   15           14 0.20895522 #>  #> $P004 #>     id hzID hz_thickness    hz_prop #> 1 P004   16            2 0.03225806 #> 2 P004   17           11 0.17741935 #> 3 P004   18           19 0.30645161 #> 4 P004   19           11 0.17741935 #> 5 P004   20           19 0.30645161 #>  #> $P005 #>     id hzID hz_thickness    hz_prop #> 1 P005   21            5 0.07352941 #> 2 P005   22           25 0.36764706 #> 3 P005   23           15 0.22058824 #> 4 P005   24           23 0.33823529 #>  #> $P006 #>      id hzID hz_thickness hz_prop #> 1  P006   25            6   0.030 #> 2  P006   26           11   0.055 #> 3  P006   27           32   0.160 #> 4  P006   28           14   0.070 #> 5  P006   29           27   0.135 #> 6  P006   30           40   0.200 #> 7  P006   31           20   0.100 #> 8  P006   32           10   0.050 #> 9  P006   33           10   0.050 #> 10 P006   34           30   0.150 #>   # data.frame output option with frameify=TRUE df.output <- profileApply(sp1, thicknessFunction, frameify = TRUE) head(df.output) #>     id hzID hz_thickness    hz_prop #> 1 P001    1            2 0.02247191 #> 2 P001    2           12 0.13483146 #> 3 P001    3           35 0.39325843 #> 4 P001    4            8 0.08988764 #> 5 P001    5           32 0.35955056 #> 6 P001    6            0 0.00000000  # since df.output contains idname(sp1) and hzidname(sp1), # it can safely be merged by a left-join via horizons<- setter horizons(sp1) <- df.output  plot(density(sp1$hz_thickness, na.rm=TRUE), main=\"Density plot of Horizon Thickness\")   ## iterate over profiles, subsetting horizon data  # example data data(sp1)  # promote to SoilProfileCollection depths(sp1) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing. site(sp1) <- ~ group #> Error in eval(predvars, data, env): object 'group' not found  # make some fake site data related to a depth of some importance sp1$dep <- profileApply(sp1, function(i) {round(rnorm(n=1, mean=mean(i$top)))})  # custom function for subsetting horizon data, by profile # keep horizons with lower boundary < site-level attribute 'dep' fun <- function(i) {   # extract horizons   h <- horizons(i)   # make an expression to subset horizons   exp <- paste('bottom < ', i$dep, sep='')   # subset horizons, and write-back into current SPC   slot(i, 'horizons') <- subset(h, subset=eval(parse(text=exp)))   # return modified SPC   return(i) }  # list of modified SoilProfileCollection objects l <- profileApply(sp1, fun, simplify=FALSE)  # re-combine list of SoilProfileCollection objects into a single SoilProfileCollection sp1.sub <- pbindlist(l)  # graphically check par(mfrow=c(2,1), mar=c(0,0,1,0)) plot(sp1) #> [P001:6] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths() points(1:length(sp1), sp1$dep, col='red', pch=7) plot(sp1.sub)"},{"path":"https://ncss-tech.github.io/aqp/reference/profileGroupLabels.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Profile Group Labels — profileGroupLabels","title":"Soil Profile Group Labels — profileGroupLabels","text":"Labels groups soil profiles within soil profile sketches. See examples ideas.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileGroupLabels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Profile Group Labels — profileGroupLabels","text":"","code":"profileGroupLabels(   x0,   x1,   labels,   y0 = 100,   y1 = 98,   label.offset = 2,   label.cex = 0.75 )"},{"path":"https://ncss-tech.github.io/aqp/reference/profileGroupLabels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soil Profile Group Labels — profileGroupLabels","text":"x0 integer indices first profile within group x1 integer indices last profile within group labels vector group labels y0 baseline depth used group brackets y1 depth used start end markers group brackets (see examples) label.offset vertical offset group labels baseline label.cex label size","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileGroupLabels.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Soil Profile Group Labels — profileGroupLabels","text":"function typically called convenience function plotMultipleSPC.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/profileGroupLabels.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Soil Profile Group Labels — profileGroupLabels","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileGroupLabels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Profile Group Labels — profileGroupLabels","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # load sample data data(sp3) data(sp4)  # convert soil colors sp3$h <- NA ; sp3$s <- NA ; sp3$v <- NA sp3.rgb <- with(sp3, munsell2rgb(hue, value, chroma, return_triplets=TRUE)) sp3[, c('h','s','v')] <- t(with(sp3.rgb, rgb2hsv(r, g, b, maxColorValue=1)))  # promote to SoilProfileCollection depths(sp3) <- id ~ top + bottom depths(sp4) <- id ~ top + bottom  # combine into a list spc.list <- list(sp3, sp4)  # compute group lengths and start/stop locations n.groups <- length(spc.list) spc.lengths <- sapply(spc.list, length) n.pedons <- sum(spc.lengths) group.starts <- c(1, 1 + cumsum(spc.lengths[-n.groups])) group.ends <- cumsum(spc.lengths)  # determine depths of first / last profile in each group yy <- unlist(sapply(spc.list, function(i) profileApply(i, max))) tick.heights <- yy[c(group.starts, group.ends)] + 2  # plot 2 SoilProfileCollection objects on the same axis par(mar=c(1,1,1,1)) plotSPC(sp3, n = n.pedons) plotSPC(sp4, add = TRUE, x.idx.offset = group.ends[1],  depth.axis = FALSE, id.style = 'side')  # annotate groups profileGroupLabels(x0 = group.starts, x1 = group.ends, labels=c('Collection 1', 'Collection 2'), y0=120, y1=tick.heights)"},{"path":"https://ncss-tech.github.io/aqp/reference/profileInformationIndex.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Profile Information Index — profileInformationIndex","title":"Soil Profile Information Index — profileInformationIndex","text":"simple index \"information\" content associated individuals SoilProfileCollection object. Information content quantified number bytes compression via memCompress().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileInformationIndex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Profile Information Index — profileInformationIndex","text":"","code":"profileInformationIndex(   x,   vars,   method = c(\"joint\", \"individual\"),   baseline = FALSE,   numericDigits = 8,   padNA = FALSE,   scaleNumeric = FALSE,   compression = \"gzip\" )"},{"path":"https://ncss-tech.github.io/aqp/reference/profileInformationIndex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soil Profile Information Index — profileInformationIndex","text":"x SoilProfileCollection object vars character vector site horizon level attributes consider method character, 'individual' 'joint' complexity baseline logical, compute ratio \"baseline\" information content, see details numericDigits integer, number significant digits retain numeric -> character conversion padNA logical, pad depths max(x), supplied dice(fill = padNA) scaleNumeric logical, scale() numeric variable, causing \"profile information\" vary based profiles collection compression character, compression method used memCompress(): 'gzip', 'bzip2', 'xz', 'none'","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileInformationIndex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Soil Profile Information Index — profileInformationIndex","text":"numeric vector length length(x) order, suitable direct assignment new site-level attribute","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileInformationIndex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Profile Information Index — profileInformationIndex","text":"Information content via compression (gzip) central assumption behind function: values associated simple soil profile horizons little variation horizons (isotropic depth-functions) compress much smaller size complex profile (many horizons, strong anisotropy). Information content evaluated profile time, site horizon level attribute specified vars. baseline argument invokes comparison simplest possible representation depth-function: numeric: replication mean value match number horizons non-NA values character factor: replication frequent value match number horizons non-NA values ratios computed \"simple\" baseline represent something like \"information gain\". Larger baseline ratios suggest complexity (information) associated soil profile's depth-functions. Alternatively, total quantity information (bytes) can determined setting baseline = FALSE.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileInformationIndex.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Soil Profile Information Index — profileInformationIndex","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profileInformationIndex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Profile Information Index — profileInformationIndex","text":"","code":"# single horizon, constant value p1 <- data.frame(id = 1, top = 0, bottom = 100, p = 5, name = 'H')  # multiple horizons, constant value p2 <- data.frame(   id = 2, top = c(0, 10, 20, 30, 40, 50),   bottom = c(10, 20, 30, 40, 50, 100),   p = rep(5, times = 6),   name = c('A1', 'A2', 'Bw', 'Bt1', 'Bt2', 'C') )  # multiple horizons, random values p3 <- data.frame(   id = 3, top = c(0, 10, 20, 30, 40, 50),   bottom = c(10, 20, 30, 40, 50, 100),   p = c(1, 5, 10, 35, 6, 2),   name = c('A1', 'A2', 'Bw', 'Bt1', 'Bt2', 'C') )  # multiple horizons, mostly NA p4 <- data.frame(   id = 4, top = c(0, 10, 20, 30, 40, 50),   bottom = c(10, 20, 30, 40, 50, 100),   p = c(1, NA, NA, NA, NA, NA),   name = c('A1', 'A2', 'Bw', 'Bt1', 'Bt2', 'C') )  # shallower version of p1 p5 <- data.frame(id = 5, top = 0, bottom = 50, p = 5, name = 'H')  # combine and upgrade to SPC z <- rbind(p1, p2, p3, p4, p5) depths(z) <- id ~ top + bottom hzdesgnname(z) <- 'name'  z <- fillHzGaps(z)  # visual check par(mar = c(1, 0, 3, 3)) plotSPC(z, color = 'p', name.style = 'center-center', cex.names = 0.8, max.depth = 110)  # factor version of horizon name z$fname <- factor(z$name)  vars <- c('p', 'name') # result is total bytes pi <- profileInformationIndex(z, vars = vars, method = 'joint', baseline = FALSE)  text(x = 1:5, y = 105, labels = pi, cex = 0.85) mtext('Profile Information Index (bytes)', side = 1, line = -1)"},{"path":"https://ncss-tech.github.io/aqp/reference/profile_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Set profile IDs — profile_id<-","title":"Set profile IDs — profile_id<-","text":"Set vector containing profile IDs Get set vector profile IDs","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/profile_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set profile IDs — profile_id<-","text":"","code":"# S4 method for class 'SoilProfileCollection' profile_id(object) <- value  # S4 method for class 'SoilProfileCollection' profile_id(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/profile_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set profile IDs — profile_id<-","text":"object SoilProfileCollection value unique vector equal length number profiles length(object)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/quickSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly Assemble a SoilProfileCollection — quickSPC","title":"Quickly Assemble a SoilProfileCollection — quickSPC","text":"Quickly assemble single-profile, SoilProfileCollection object two possible templates. function useful shortcut creating theoretical SoilProfileCollection objects testing demonstrative purposes.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/quickSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly Assemble a SoilProfileCollection — quickSPC","text":"","code":"quickSPC(   x,   id = \"id\",   d = \"depths\",   n = \"name\",   m = \"soil_color\",   interval = 10 )"},{"path":"https://ncss-tech.github.io/aqp/reference/quickSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly Assemble a SoilProfileCollection — quickSPC","text":"x either list character vector, see Details Examples id character, specified x list, name ID list element d character, specified x list, name depths list element n character, specified x list, name horizon name list element m character, specified x list, name list element containing Munsell color notation interval, numeric, typically integer specified using character templates mode 2. See Details.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/quickSPC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly Assemble a SoilProfileCollection — quickSPC","text":"SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/quickSPC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quickly Assemble a SoilProfileCollection — quickSPC","text":"list template single SPC allows full specification ID, horizon designation, bottom depths, arbitrary number horizon-level attributes. compact notation used profile ID (single value) horizon depths (bottom depths, assuming datum 0). Horizon designation additional data (e.g. clay content) specified vectors equal length, matching number horizons profile. character template can provided one several formats: '-Bt1-Bt2-Bt3-Cr-R' 'ApAp|AA|E|BhsBhs|Bw1Bw1|CCCCC' Format 1 interpreted horizon sequence delimited '-' newline character (\\n). Random integer thickness assigned horizons, profile ID created via digest::digest(..., algo = 'xxhash32'). Iteration templates format automatic x character vector length > 1. Format 2 interpreted horizon sequence delimited '|'. Horizon thickness proportional replication horizon designation scaled interval argument. Profile ID created via digest::digest(..., algo = 'xxhash32'). Iteration templates format automatic x character vector length > 1. Explicit naming profile IDs can accomplished specifying ID via prefix, \"ID:-Bt1-Bt2-Cr-R\" \"ID:ApAp|AA|E|BhsBhs|Bw1Bw1|CCCCC\". Labels specified \":\" interpreted profile ID. labels optional specified must unique within x. Single-horizon profile templates must include trailing horizon delimiter: '-', '\\n', '|' depending format.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/quickSPC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly Assemble a SoilProfileCollection — quickSPC","text":"","code":"# list-based template x <- list( id = 'P1', depths = c(25, 33, 100, 150), name = c('A', 'Bw', 'Bt', 'Cr'), clay = c(12, 15, 22, 25), soil_color = c('10YR 3/3', '10YR 4/4', '10YR 4/6', '5G 6/2') )  s <- quickSPC(x) plotSPC(s, name.style = 'center-center', cex.names = 1)   # character template, mode 1 # horizon thickness is generated at random (uniform [5,20]) x <- 'A-Bt1-Bt2-Bt3-Cr-R'  s <- quickSPC(x) plotSPC(s, name.style = 'center-center', cex.names = 1)    # multiple templates x <- c( 'A-Bt1-Bt2-Bt3-Cr-R',  'A-C1-C2-C3-C4-Ab',  'Ap-A-A/E-E-Bhs-Cr' )  # this interface is vectorized  s <- quickSPC(x) plotSPC(s, name.style = 'center-center', cex.names = 1)    # optionally specify profile IDs using \"ID:\" prefix x <- c( 'P1:A-Bt1-Bt2-Bt3-Cr-R', 'P2:A-C1-C2-C3-C4-Ab', 'P3:Ap-A-A/E-E-Bhs-Cr' )  s <- quickSPC(x) plotSPC(s, name.style = 'center-center', cex.names = 1)    # optionally specify: # horizon bottom depths in cm # soil color in Munsell notation x <- c( '1. simple:Oe-A-E-Bhs', '2. full:Oe,10,10YR 2/2-A,20,10YR 3/3-E,30,2.5Y 8/2-Bhs,60,7.5YR 4/6' )  s <- quickSPC(x) plotSPC(s, name.style = 'center-center', cex.names = 1)   # use newline character as delimiter, more compact x <- 'Oe,10,10YR 2/2 A,20,10YR 3/3 E,30,2.5Y 8/2 Bhs,60,7.5YR 4/6 BC,125,7.5YR 6/4 C,150,10YR 6/2'  plotSPC(quickSPC(x), name.style = 'center-center', cex.names = 1)    # character template, mode 2 # horizon thickness is proportional to replication of  # horizon designation and scaled by 'interval' argument # default of 10 depth units # e.g. A horizon is 3 * 10 = 30 depth units thick. x <- c(   'AAA|BwBwBwBw|CCCCCCC|CdCdCdCd',   'ApAp|AA|E|BhsBhs|Bw1Bw1|CCCCC',   'A|Bt1Bt1Bt1|Bt2Bt2Bt2|Bt3|Cr|RRRRR'   )  # each horizon label is '10' depth-units (default) s <- quickSPC(x) plotSPC(s, name.style = 'center-center',          cex.names = 1, depth.axis = FALSE,          hz.depths = TRUE )   # each horizon label is '5' depth-units s <- quickSPC(x, interval = 5) plotSPC(s, name.style = 'center-center',          cex.names = 1, depth.axis = FALSE,          hz.depths = TRUE )   # optionally specify some / all profile IDs with \"ID:\" prefix x <- c(   'P1:AAA|BwBwBwBw|CCCCCCC|CdCdCdCd',   'P2:ApAp|AA|E|BhsBhs|Bw1Bw1|CCCCC',   'A|Bt1Bt1Bt1|Bt2Bt2Bt2|Bt3|Cr|RRRRR'   )  s <- quickSPC(x) plotSPC(s, name.style = 'center-center',          cex.names = 1, depth.axis = FALSE,          hz.depths = TRUE )    # make a NODATA profile, with a random hash ID #  note the use of trailing horizon delimiter #  note the use of NA soil color field x <- 'NODATA,150,NA-' s <- quickSPC(x) plotSPC(s, name.style = 'center-center',          cex.names = 1, depth.axis = FALSE,          hz.depths = TRUE)"},{"path":"https://ncss-tech.github.io/aqp/reference/random_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Profile — random_profile","title":"Random Profile — random_profile","text":"Generate random soil profile according set criteria, correlated depth trends. random walk method produces profiles considerable variation horizons based values normal distribution seeded means standard deviations drawn uniform distribution [0, 10]. logistic power peak (LPP) function can used generate random soil property depth functions sharply peaked. LPP parameters can hard-coded using optional arguments: \"lpp.\", \"lpp.b\", \"lpp.u\", \"lpp.d\", \"lpp.e\". Amplitude peak controlled (\"lpp.+ \"lpp.b\"), depth peak \"lpp.u\", abruptness \"lpp.d\" \"lpp.e\". description method outlined (Brenton et al, 2011). Simulated horizon distinctness codes based USDA-NCSS field description methods. Simulated distinctness codes constrained according horizon thickness, .e. gradual boundary (+/- 5cm) simulated horizons thinner 3x vertical distance rp() function convenient wrapper function, requesting simulated SoilProfileCollection specified size.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/random_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Profile — random_profile","text":"","code":"random_profile(   id,   n = c(3, 4, 5, 6),   min_thick = 5,   max_thick = 30,   n_prop = 5,   exact = FALSE,   method = \"random_walk\",   HzDistinctSim = FALSE,   SPC = FALSE,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/random_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Profile — random_profile","text":"id character numeric id used profile n vector possible number horizons, exact number horizons (see ) min_thick minimum thickness criteria simulated horizon max_thick maximum thickness criteria simulated horizon n_prop number simulated soil properties (columns returned dataframe) exact exact number requested horizons generated? (defaults FALSE) method named method used synthesize depth function ('random_walk' 'LPP'), see details HzDistinctSim optionally simulate horizon boundary distinctness codes SPC result SoilProfileCollection object, otherwise data.frame object ... additional parameters passed-LPP .lpp) function","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/random_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Profile — random_profile","text":"data.frame SoilProfileCollection object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/random_profile.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Random Profile — random_profile","text":"See examples ideas simulating several profiles .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/random_profile.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random Profile — random_profile","text":"Myers, D. B.; Kitchen, N. R.; Sudduth, K. .; Miles, R. J.; Sadler, E. J. & Grunwald, S. Peak functions modeling high resolution soil profile data Geoderma, 2011, 166, 74-83.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/random_profile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Random Profile — random_profile","text":"Dylan E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/random_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Profile — random_profile","text":"","code":"# generate 10 random profiles, result is a list of SoilProfileCollection objects d <- lapply(1:10, random_profile, SPC=TRUE)  # combine d <- combine(d)  # plot opar <- par(mar=c(0,0,3,2)) plotSPC(d, color='p1', name='name', cex.names=0.75)  par(opar)  # simulate horizon boundary distinctness codes: d <- lapply(1:10, random_profile, SPC=TRUE, HzDistinctSim=TRUE) d <- combine(d)  d$HzD <- hzDistinctnessCodeToOffset(d$HzDistinctCode)  opar <- par(mar=c(0,0,3,2)) plotSPC(d, name='name', color='p1', hz.distinctness.offset='HzD')  par(opar)   # depth functions are generated using the LPP function opar <- par(mfrow=c(2,1), mar=c(0,0,3,0))  # generate data d.1 <- lapply(1:10, random_profile, SPC=TRUE, n=c(6, 7, 8), n_prop=1, method='LPP') d.1 <- combine(d.1)  # plot plotSPC(d.1, name='name', color='p1', col.label = 'LPP Defaults')   # do this again, this time set all of the LPP parameters d.2 <- lapply(1:10, random_profile, SPC=TRUE, n=c(6, 7, 8), n_prop=1, method='LPP',            lpp.a=5, lpp.b=10, lpp.d=5, lpp.e=5, lpp.u=25) d.2 <- combine(d.2)  # plot plotSPC(d.2, name='name', color='p1', col.label = 'Custom LPP Parameters')    # reset plotting defaults par(opar)    # try plotting the LPP-derived simulated data # aggregated over all profiles a <- slab(d.2, fm= ~ p1) a$mid <- with(a, (top + bottom) / 2)  library(lattice) (p1 <- xyplot(mid ~ p.q50, data=a,               lower=a$p.q25, upper=a$p.q75, ylim=c(150,-5), alpha=0.5,               panel=panel.depth_function, prepanel=prepanel.depth_function,               cf=a$contributing_fraction, xlab='Simulated Data', ylab='Depth',               main='LPP(a=5, b=10, d=5, e=5, u=25)',               par.settings=list(superpose.line=list(col='black', lwd=2)) ))   # optionally add original data as step-functions if(require(latticeExtra)) {   h <- horizons(d.2)   p1 + as.layer(xyplot(top ~ p1, groups=id, data=h,                        horizontal=TRUE, type='S',                        par.settings=list(superpose.line=list(col='blue', lwd=1, lty=2)))) } #> Loading required package: latticeExtra"},{"path":"https://ncss-tech.github.io/aqp/reference/reaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert pH to/from Reaction Classes — ph_to_rxnclass","title":"Convert pH to/from Reaction Classes — ph_to_rxnclass","text":"Convert pH /Reaction Classes","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert pH to/from Reaction Classes — ph_to_rxnclass","text":"","code":"ph_to_rxnclass(x, halfclass = FALSE, as.is = FALSE, droplevels = TRUE)  rxnclass_to_ph(x, halfclass = FALSE, digits = 2, simplify = TRUE)  ReactionClassLevels(halfclass = FALSE, as.is = FALSE)"},{"path":"https://ncss-tech.github.io/aqp/reference/reaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert pH to/from Reaction Classes — ph_to_rxnclass","text":"x input pH values (numeric; ph_to_rxnclass()) reaction classes (character; rxnclass_to_ph()) halfclass Split standard classes half higher resolution? Default: FALSE .logical. character vectors converted factors? Default: FALSE droplevels logical. Drop unused levels factors? Default: FALSE digits Number digits decimal place; Default: 2. Used rxnclass_to_ph() simplify Simplify list result numeric vector length result 1? Default: TRUE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert pH to/from Reaction Classes — ph_to_rxnclass","text":"ph_to_rxnclass(): vector reaction classes corresponding numeric input x; .=FALSE ordered factor using ReactionClassLevels() rxnclass_to_ph(): list data.frame objects containing high/low values reaction class 1:1 input; simplify=TRUE input  data.frame. ReactionClassLevels(): ordered factor containing descriptive terms reaction classes","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert pH to/from Reaction Classes — ph_to_rxnclass","text":"","code":"ph_to_rxnclass(6.2) #> [1] slightly acid #> Levels: slightly acid rxnclass_to_ph(\"slightly acid\") #>   pH_low pH_high #> 1   6.05    6.55  rxnclass_to_ph(list(c(\"Slightly Acid\", NA, \"Moderately Acid\"),                     c(\"Slightly Acid\", NA, \"Strongly Acid\")), simplify = FALSE) #> [[1]] #>   pH_low pH_high #> 1   5.55    6.55 #>  #> [[2]] #>   pH_low pH_high #> 1   5.05    6.55 #>  ReactionClassLevels() #>  [1] ultra acid             extremely acid         very strongly acid     #>  [4] strongly acid          moderately acid        slightly acid          #>  [7] neutral                slightly alkaline      moderately alkaline    #> [10] strongly alkaline      very strongly alkaline #> 11 Levels: ultra acid < extremely acid < ... < very strongly alkaline"},{"path":"https://ncss-tech.github.io/aqp/reference/reactionclass.html","id":null,"dir":"Reference","previous_headings":"","what":"pH Reaction Classes — reactionclass","title":"pH Reaction Classes — reactionclass","text":"Levels pH (reaction) classes including descriptive name, range low high pH","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reactionclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pH Reaction Classes — reactionclass","text":"","code":"data(reactionclass)"},{"path":"https://ncss-tech.github.io/aqp/reference/reactionclass.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pH Reaction Classes — reactionclass","text":"object class data.frame 11 rows 3 columns.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reactionclass.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"pH Reaction Classes — reactionclass","text":"Soil Science Division Staff. (2017) Soil Survey Manual. C. Ditzler, K. Scheffe, H.C. Monger (eds.). USDA Handbook 18. Government Printing Office, Washington, D.C.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rebuildSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Rebuild a SoilProfileCollection object — rebuildSPC","title":"Rebuild a SoilProfileCollection object — rebuildSPC","text":"Rebuild SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rebuildSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rebuild a SoilProfileCollection object — rebuildSPC","text":"","code":"rebuildSPC(x)"},{"path":"https://ncss-tech.github.io/aqp/reference/rebuildSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rebuild a SoilProfileCollection object — rebuildSPC","text":"x SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rebuildSPC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rebuild a SoilProfileCollection object — rebuildSPC","text":"valid SoilProfileCollection object. valid SoilProfileCollection object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rebuildSPC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rebuild a SoilProfileCollection object — rebuildSPC","text":"Attempt rebuilding SoilProfileCollection object splitting components re-assembling. Likely used fix outdated SoilProfileCollection objects missing slots.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/rebuildSPC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rebuild a SoilProfileCollection object — rebuildSPC","text":"D.E. Beaudette D.E. Beaudette, .G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reduceSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Select a subset of columns from a SoilProfileCollection — reduceSPC","title":"Select a subset of columns from a SoilProfileCollection — reduceSPC","text":"Reduce number columns SoilProfileCollection minimal set plus additional selected columns. Optional metadata columns included set. minimum profile ID, horizon top bottom depths, horizon ID included. Horizon designation horizon texture class column names included metadata attributes set. See details.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reduceSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select a subset of columns from a SoilProfileCollection — reduceSPC","text":"","code":"reduceSPC(p, column_names = NULL)"},{"path":"https://ncss-tech.github.io/aqp/reference/reduceSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select a subset of columns from a SoilProfileCollection — reduceSPC","text":"p SoilProfileCollection column_names set additional columns include result","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reduceSPC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select a subset of columns from a SoilProfileCollection — reduceSPC","text":"SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reduceSPC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select a subset of columns from a SoilProfileCollection — reduceSPC","text":"Minimum column names included (column_names = NULL) idname(p), horizonDepths(p), hzidname(p) Optional column names included (metadata set) hzdesgnname(p), hztexclname(p), GHL(p)","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/reorderHorizons.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-order corrupted horizon data — reorderHorizons","title":"Re-order corrupted horizon data — reorderHorizons","text":"method made available primarily repair horizon data corrupted relative order time SoilProfileCollection construction. option specify target order, update corresponding metadata entry tracking original order. Use functionality risk.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reorderHorizons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-order corrupted horizon data — reorderHorizons","text":"","code":"# S4 method for class 'SoilProfileCollection' reorderHorizons(object, target.order = NULL)"},{"path":"https://ncss-tech.github.io/aqp/reference/reorderHorizons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-order corrupted horizon data — reorderHorizons","text":"object SoilProfileCollection target.order numeric vector equal length object. Default value NULL restores internal order collection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/reorderHorizons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-order corrupted horizon data — reorderHorizons","text":"SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/repairMissingHzDepths.html","id":null,"dir":"Reference","previous_headings":"","what":"Repair Problematic Lower Horizon Depths — repairMissingHzDepths","title":"Repair Problematic Lower Horizon Depths — repairMissingHzDepths","text":"Attempt simple repair horizon bottom depths presence NA, cases horizon shares common top bottom depth. situations common pedon description \"contact\" (Cd, Cr, R, etc.) described without lower depth.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/repairMissingHzDepths.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repair Problematic Lower Horizon Depths — repairMissingHzDepths","text":"","code":"repairMissingHzDepths(x, adj = 10, max.depth = 200)"},{"path":"https://ncss-tech.github.io/aqp/reference/repairMissingHzDepths.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repair Problematic Lower Horizon Depths — repairMissingHzDepths","text":"x SoilProfileCollection adj vertical offset applied \"repair\" missing bottom depths top bottom depth equal bottom depth missing. (NA use max.depth) max.depth adj NA, resulting offset sum exceeds max.depth, max.depth used.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/repairMissingHzDepths.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repair Problematic Lower Horizon Depths — repairMissingHzDepths","text":"SoilProfileCollection new (logical) horizon-level attribute .repaired marking affected horizons","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/repairMissingHzDepths.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Repair Problematic Lower Horizon Depths — repairMissingHzDepths","text":"repair applied deepest horizon within profile identified getLastHorizonID, well bottom depths horizon horizon . Horizon bottom depths adjusted adding adj (non-NA). resulting value exceeds max.depth, max.depth value returned (NA).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/repairMissingHzDepths.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repair Problematic Lower Horizon Depths — repairMissingHzDepths","text":"","code":"h <- data.frame( id = c(1, 1, 1, 2, 2, 2, 2, 3, 3), top = c(0:2, 0:3, 0:1) * 10, bottom = c(rep(NA_integer_, 7), c(10, 99)) )  # NA depths result in warnings suppressWarnings({   depths(h) <- id ~ top + bottom })  # inspect data before repairs plotSPC(h) #> [1:3] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths() #> [2:4] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()   g <- repairMissingHzDepths(h)  # all depth logic now valid all(checkHzDepthLogic(g)$valid) #> [1] TRUE  # inspect plotSPC(g)   # no adj, max.depth only f <- repairMissingHzDepths(h, adj = NA, max.depth = 200) all(checkHzDepthLogic(f)$valid) #> [1] TRUE plotSPC(f)   # max.depth defaults to max(x) if too small f$bottom[c(3,7)] <- NA d <- repairMissingHzDepths(f, adj = NA, max.depth = 20) #> Using max.depth = 99 all(checkHzDepthLogic(d)$valid) #> [1] TRUE plotSPC(d)"},{"path":"https://ncss-tech.github.io/aqp/reference/replaceHorizons.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace Data in Horizon Slot — replaceHorizons<-","title":"Replace Data in Horizon Slot — replaceHorizons<-","text":"Replaces horizon data new data.frame object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/replaceHorizons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace Data in Horizon Slot — replaceHorizons<-","text":"","code":"# S4 method for class 'SoilProfileCollection' replaceHorizons(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/replaceHorizons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace Data in Horizon Slot — replaceHorizons<-","text":"object SoilProfileCollection value object inheriting data.frame","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/replaceHorizons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace Data in Horizon Slot — replaceHorizons<-","text":"","code":"# load test data data(sp2)  # promote to SPC depths(sp2) <- id ~ top + bottom  # one profile p <- sp2[1,]  # 23 variables in horizon data length(horizonNames(sp2)) #> [1] 23  # remove all but essential ones replaceHorizons(p) <- horizons(p)[,c(idname(p), hzidname(p), horizonDepths(p))]  # inspect result (a clean slate) horizons(p) #>      id hzID top bottom #> 1 hon-1    1   0     12 #> 2 hon-1    2  12     16 #> 3 hon-1    3  16     25 #> 4 hon-1    4  25     49 #> 5 hon-1    5  49     85 #> 6 hon-1    6  85     95 #> 7 hon-1    7  95    122 #> 8 hon-1    8 122    140 #> 9 hon-1    9 140    170"},{"path":"https://ncss-tech.github.io/aqp/reference/restrictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or Set Restriction data in a SoilProfileCollection — restrictions,SoilProfileCollection-method","title":"Get or Set Restriction data in a SoilProfileCollection — restrictions,SoilProfileCollection-method","text":"Restrictions describe root-limiting features soil. single profile may multiple restrictions. restrictions() (get method): Get restriction data SoilProfileCollection. restrictions<- (set method): Set restriction data SoilProfileCollection. profile ID column object (idname(object)) must present replacement value object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/restrictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or Set Restriction data in a SoilProfileCollection — restrictions,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' restrictions(object)  # S4 method for class 'SoilProfileCollection' restrictions(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/restrictions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or Set Restriction data in a SoilProfileCollection — restrictions,SoilProfileCollection-method","text":"object SoilProfileCollection value data.frame object containing least column name idname(object)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/restrictions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or Set Restriction data in a SoilProfileCollection — restrictions,SoilProfileCollection-method","text":"","code":"# load test data data(sp2)  # promote to SPC depths(sp2) <- id ~ top + bottom  # assign abrupt textural change to a profile newdata <- data.frame(id = c(\"hon-21\"),                       restrkind = \"abrupt textural change\",                       restrdep = 46)  # do left join restrictions(sp2) <- newdata  # inspect site table: newvalue TRUE only for horizons #  with top depth equal to zero restrictions(sp2) #>       id              restrkind restrdep #> 1 hon-21 abrupt textural change       46"},{"path":"https://ncss-tech.github.io/aqp/reference/rgb2munsell.html","id":null,"dir":"Reference","previous_headings":"","what":"sRGB to Munsell Color Conversion — rgb2munsell","title":"sRGB to Munsell Color Conversion — rgb2munsell","text":"Convert sRGB color coordinates closest n Munsell chips munsell lookup table. function replaced col2Munsell() aqp 2.1.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rgb2munsell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"sRGB to Munsell Color Conversion — rgb2munsell","text":"","code":"rgb2munsell(color, colorSpace = c(\"CIE2000\", \"LAB\", \"sRGB\"), nClosest = 1)"},{"path":"https://ncss-tech.github.io/aqp/reference/rgb2munsell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"sRGB to Munsell Color Conversion — rgb2munsell","text":"color data.frame matrix object containing sRGB coordinates range (0,1) colorSpace distance metric (colorspace) use finding closest chip: CIE2000 accurate requires farver >= 2.0.3, Euclidean distance CIELAB close second, Euclidean distance sRGB accurate used demonstration purposes. nClosest number closest Munsell colors return (valid range 1-20)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rgb2munsell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"sRGB to Munsell Color Conversion — rgb2munsell","text":"(NA-padded) data.frame containing hue, value, chroma, distance (dE00 colorSpace = 'CIE2000', Euclidean distance otherwise) nearest matching color.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rgb2munsell.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"sRGB to Munsell Color Conversion — rgb2munsell","text":"function fully vectorized pad output NA-records NA present color.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rgb2munsell.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"sRGB to Munsell Color Conversion — rgb2munsell","text":"http://ncss-tech.github.io/AQP/ http://www.brucelindbloom.com/index.html?ColorCalcHelp.html http://www.munsellcolourscienceforpainters.com/MunsellAndKubelkaMunkToolbox/MunsellAndKubelkaMunkToolbox.html http://www.cis.rit.edu/mcsl/online/munsell.php","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rgb2munsell.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sRGB to Munsell Color Conversion — rgb2munsell","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rgb2munsell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"sRGB to Munsell Color Conversion — rgb2munsell","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # Munsell notation to sRGB triplets [0-1]  color <- munsell2rgb(   the_hue = c('10YR', '2.5YR', '5YR'),    the_value = c(3, 5, 2.5),    the_chroma = c(5, 6, 2),    return_triplets = TRUE )  # result is a data.frame color #>           r         g          b #> 1 0.3754983 0.2555129 0.09093377 #> 2 0.6613729 0.4212891 0.30856225 #> 3 0.2897926 0.2154340 0.18009210  # back-transform sRGB -> closest Munsell color # sigma is the dE00 color contrast metric rgb2munsell(color) #> rgb2munsell() will be deprecated in aqp 2.1, please use col2Munsell() instead. #>     hue value chroma        sigma #> 1  10YR   3.0      5 4.410418e-14 #> 2 2.5YR   5.0      6 2.796756e-15 #> 3   5YR   2.5      2 3.177668e-14"},{"path":"https://ncss-tech.github.io/aqp/reference/rowley2019.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Morphologic, Geochemical, and Mineralogy Data from Rowley et al. 2019. — rowley2019","title":"Soil Morphologic, Geochemical, and Mineralogy Data from Rowley et al. 2019. — rowley2019","text":"Data Table 1 Supplementary Tables 1 2 \"cascading influence calcium carbonate biogeochemistry pedogenic trajectories subalpine soils, Switzerland\".","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rowley2019.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Morphologic, Geochemical, and Mineralogy Data from Rowley et al. 2019. — rowley2019","text":"","code":"data(rowley2019)"},{"path":"https://ncss-tech.github.io/aqp/reference/rowley2019.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil Morphologic, Geochemical, and Mineralogy Data from Rowley et al. 2019. — rowley2019","text":"SoilProfileCollection object: site-level attributes id profile ID group profile group horizon-level attributes sample_id sample ID name horizon name pH pH Al_exch cmol(+) / kg, exchangeable Al Ca_exch cmol(+) / kg, exchangeable Ca CEC_sum cmol(+) / kg, cation exchange capacity calculated sum exchangeable cations, including H+ Ca_exch_saturation percent Al_exch_saturation percent TON percent, total nitrogen SOC percent, soil organic carbon C_to_N carbon nitrogen ratio Alo g/kg, oxalate-extractable Al Feo g/kg, oxalate-extractable Fe Ald g/kg, dithionite-extractable Al Fed g/kg, dithionite-extractable Fe Feo_Fed Fe_o Fe_d ratio id profile ID top horizon top (cm) bottom horizon bottom (cm) Al g/kg x-ray fluorescence Ca g/kg x-ray fluorescence Cr g/kg x-ray fluorescence Fe g/kg x-ray fluorescence K g/kg x-ray fluorescence Mg g/kg x-ray fluorescence Mn g/kg x-ray fluorescence Na g/kg x-ray fluorescence Ni g/kg x-ray fluorescence P g/kg x-ray fluorescence Si g/kg x-ray fluorescence Ti g/kg x-ray fluorescence Phyllosilicates percent x-ray diffraction spectra Quartz percent x-ray diffraction spectra K_Feldspar percent x-ray diffraction spectra Na_Plagioclase percent x-ray diffraction spectra Goethite percent x-ray diffraction spectra Unidentified percent x-ray diffraction spectra CCE_Total percent CCE_Reactive percent Reactive_carbonate percent Sand percent <2um Silt percent 2-50um Clay percent 50-2000um CaH2O Milliq ex: grams Ca per kilogram dry soil (g kg-1) Ca2MKCl 2M KCl: grams Ca per kilogram dry soil (g kg-1) CaNa2EDTA 0.05 M Na2EDTA: grams Ca per kilogram dry soil (g kg-1) CaCuCl2 0.5 M CuCl2: grams Ca per kilogram dry soil (g kg-1) hzID horizon ID","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rowley2019.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soil Morphologic, Geochemical, and Mineralogy Data from Rowley et al. 2019. — rowley2019","text":"Mike C. Rowley, Stephanie Grand, Thierry Adatte, Eric P. Verrecchia, Cascading influence calcium carbonate biogeochemistry pedogenic trajectories subalpine soils), Switzerland, Geoderma, 2019, 114065, ISSN 0016-7061, doi:10.1016/j.geoderma.2019.114065 .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rowley2019.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Morphologic, Geochemical, and Mineralogy Data from Rowley et al. 2019. — rowley2019","text":"","code":"library(lattice)  # load data data('rowley2019')  # check first 5 rows and 10 columns of horizon data horizons(rowley2019)[1:5, 1:10] #>   sample_id name  pH Al_exch Ca_exch CEC_sum Ca_exch_saturation #> 1      B1.1  Ah1 6.3       0    23.2    23.7               97.6 #> 2      B1.2  Ah2 6.4       0    23.0    23.4               98.4 #> 3      B1.3  ABh 6.3       0    20.3    20.6               98.5 #> 4      B1.4   Bh 6.4       0    16.9    17.2               98.4 #> 5      B1.5   B1 6.4       0    15.2    15.5               98.3 #>   Al_exch_saturation TON SOC #> 1                  0 0.8 7.7 #> 2                  0 0.8 6.8 #> 3                  0 0.6 5.3 #> 4                  0 0.5 4.3 #> 5                  0 0.4 3.4  # check site data site(rowley2019) #>   id          group #> 1 B1 CaCO3-bearing  #> 2 B2 CaCO3-bearing  #> 3 B3 CaCO3-bearing  #> 4 F1     CaCO3-free #> 5 F2     CaCO3-free #> 6 F3     CaCO3-free  # graphical summary par(mar=c(1,1,3,1)) plotSPC(rowley2019, color='Feo_Fed', name='name', cex.names=0.85)   plotSPC(rowley2019, color='Ca_exch', name='name', cex.names=0.85)  # grouped plot groupedProfilePlot(rowley2019, groups = 'group', color='Ca_exch', name='name', cex.names=0.85, group.name.offset = -10)   # aggregate over 1cm slices, for select properties a <- slab(rowley2019, group ~ Reactive_carbonate + Ca_exch + pH + K_Feldspar + Na_Plagioclase + Al)  # plot styling tps <- list(superpose.line=list(lwd=2, col=c('royalblue', 'firebrick')))  # make the figure xyplot(top ~ p.q50 | variable, data=a, ylab='Depth', groups=group,        main='', as.table=TRUE,        xlab='median bounded by 25th and 75th percentiles',        lower=a$p.q25, upper=a$p.q75, ylim=c(55,-5),        panel=panel.depth_function,        prepanel=prepanel.depth_function,        cf=a$contributing_fraction,        alpha=0.33, sync.colors=TRUE,        scales=list(x=list(relation='free', alternating=1)),        par.settings=tps,        auto.key=list(columns=2, lines=TRUE, points=FALSE),        strip=strip.custom(bg=grey(0.9)) )"},{"path":"https://ncss-tech.github.io/aqp/reference/rp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a SoilProfileCollection of random profiles — rp","title":"Generate a SoilProfileCollection of random profiles — rp","text":"function provides convenient abstraction lapply(), random_profile(), combine() typically used together create SoilProfileCollection object >1 soil profiles. rp() creates zero-padded integer IDs logical sorting indexing profiles. complex IDs additional flexibility, see random_profile(). See random_profile() possible arguments.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a SoilProfileCollection of random profiles — rp","text":"","code":"rp(size, prefix = NULL, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/rp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a SoilProfileCollection of random profiles — rp","text":"size integer, number requested profiles prefix prefix added zero-padded, integer IDs ... additional arguments random_profile()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a SoilProfileCollection of random profiles — rp","text":"SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/rp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a SoilProfileCollection of random profiles — rp","text":"","code":"# generate a SoilProfileCollection object with 10 profiles # using 0-padded, integer IDs for intuitive sorting spc <- rp(10, method = 'LPP') plotSPC(spc, color = 'p1')   # apply a prefix to the IDs spc <- rp(10, prefix = 'A-', method = 'LPP') plotSPC(spc, color = 'p1')"},{"path":"https://ncss-tech.github.io/aqp/reference/shannonEntropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Shannon Entropy — shannonEntropy","title":"Shannon Entropy — shannonEntropy","text":"simple implementation Shannon entropy.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/shannonEntropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shannon Entropy — shannonEntropy","text":"","code":"shannonEntropy(x, b = 2)"},{"path":"https://ncss-tech.github.io/aqp/reference/shannonEntropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shannon Entropy — shannonEntropy","text":"x vector probabilities (0,1), must sum 1, contain NA b logarithm base","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/shannonEntropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shannon Entropy — shannonEntropy","text":"single numeric value.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/shannonEntropy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shannon Entropy — shannonEntropy","text":"0s automatically removed na.rm = TRUE, (0 * log(0) = Nan)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/shannonEntropy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Shannon Entropy — shannonEntropy","text":"b = length(x) result normalized Shannon entropy (Kempen et al, 2009).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/shannonEntropy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Shannon Entropy — shannonEntropy","text":"Kempen, Bas, Dick J. Brus, Gerard B.M. Heuvelink, Jetse J. Stoorvogel. 2009. \"Updating 1:50,000 Dutch Soil Map Using Legacy Soil Data: Multinominal Logistic Regression Approach.\" Geoderma 151: 311-26. doi:10.1016/j.geoderma.2009.04.023 Shannon, Claude E. (July-October 1948). \"Mathematical Theory Communication\". Bell System Technical Journal. 27 (3): 379-423. doi:10.1002/j.1538-7305.1948.tb01338.x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/shannonEntropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shannon Entropy — shannonEntropy","text":"","code":"# a very simple example p <- c(0.25, 0.25, 0.4, 0.05, 0.05)  shannonEntropy(p) #> [1] 1.960964"},{"path":"https://ncss-tech.github.io/aqp/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"SoilProfileCollection show method — show","title":"SoilProfileCollection show method — show","text":"Pretty output method SoilProfileCollection objects. default method limits output 10 columns 6 rows site horizon tables respectively. aqp environment option can set increase number columns shown default: options(.aqp.show.n.cols = 100), .character(): Character Representation SoilProfileCollection Object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SoilProfileCollection show method — show","text":"","code":"# S4 method for class 'SoilProfileCollection' show(object)  # S4 method for class 'SoilProfileCollection' as.character(x, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoilProfileCollection show method — show","text":"object SoilProfileCollection x SoilProfileCollection ... additional arguments (used)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/show.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SoilProfileCollection show method — show","text":"","code":"# load a SoilProfileCollection data(sp5)  # use the show() method show(sp5) #> SoilProfileCollection with 296 profiles and 1539 horizons #> profile ID: soil  |  horizon ID: hzID  #> Depth range: 70 - 841 cm #>  #> ----- Horizons (6 / 1539 rows  |  10 / 19 columns) ----- #>    soil hzID top bottom name sand silt clay  R25  G25 #>   soil1    1   0      8   H1 32.3 10.9 52.8 0.41 0.38 #>   soil1    2   8     25   H2 29.0 11.2 58.2 0.31 0.28 #>   soil1    3  25     55   H3 34.9 11.6 51.9 0.31 0.28 #>   soil1    4  55    100   H4 38.2 10.9 49.7 0.31 0.28 #>   soil1    5 100    267   H5 32.2 10.8 55.6 0.55 0.46 #>  soil10    6   0     10   H1 25.2 14.4 58.4 0.43 0.37 #> [... more horizons ...] #>  #> ----- Sites (6 / 296 rows  |  1 / 1 columns) ----- #>     soil #>    soil1 #>   soil10 #>  soil100 #>  soil101 #>  soil102 #>  soil103 #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY]  # which is same as this (in the console) sp5 #> SoilProfileCollection with 296 profiles and 1539 horizons #> profile ID: soil  |  horizon ID: hzID  #> Depth range: 70 - 841 cm #>  #> ----- Horizons (6 / 1539 rows  |  10 / 19 columns) ----- #>    soil hzID top bottom name sand silt clay  R25  G25 #>   soil1    1   0      8   H1 32.3 10.9 52.8 0.41 0.38 #>   soil1    2   8     25   H2 29.0 11.2 58.2 0.31 0.28 #>   soil1    3  25     55   H3 34.9 11.6 51.9 0.31 0.28 #>   soil1    4  55    100   H4 38.2 10.9 49.7 0.31 0.28 #>   soil1    5 100    267   H5 32.2 10.8 55.6 0.55 0.46 #>  soil10    6   0     10   H1 25.2 14.4 58.4 0.43 0.37 #> [... more horizons ...] #>  #> ----- Sites (6 / 296 rows  |  1 / 1 columns) ----- #>     soil #>    soil1 #>   soil10 #>  soil100 #>  soil101 #>  soil102 #>  soil103 #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY]"},{"path":"https://ncss-tech.github.io/aqp/reference/sierraTransect.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Physical and Chemical Data Related to Studies in the Sierra Nevada Mountains, CA, USA. — sierraTransect","title":"Soil Physical and Chemical Data Related to Studies in the Sierra Nevada Mountains, CA, USA. — sierraTransect","text":"Soil physical chemical data associated two bio-climatic sequences (granitic andesitic parent material) western flank Sierra Nevada mountains.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sierraTransect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Physical and Chemical Data Related to Studies in the Sierra Nevada Mountains, CA, USA. — sierraTransect","text":"","code":"data(sierraTransect)"},{"path":"https://ncss-tech.github.io/aqp/reference/sierraTransect.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil Physical and Chemical Data Related to Studies in the Sierra Nevada Mountains, CA, USA. — sierraTransect","text":"object class SoilProfileCollection length 14.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sierraTransect.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soil Physical and Chemical Data Related to Studies in the Sierra Nevada Mountains, CA, USA. — sierraTransect","text":"Original manuscripts personal communication authors.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sierraTransect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Physical and Chemical Data Related to Studies in the Sierra Nevada Mountains, CA, USA. — sierraTransect","text":"data assembled Dahlgren et al. (1997) Rasmussen et al. (2007), permission granted lead authors, D.E. Beaudette.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sierraTransect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soil Physical and Chemical Data Related to Studies in the Sierra Nevada Mountains, CA, USA. — sierraTransect","text":"R.. Dahlgren, J.L. Boettinger, G.L. Huntington, R.G. Amundson. Soil development along elevational transect western Sierra Nevada, California, Geoderma, Volume 78, Issues 3–4, 1997, Pages 207-236. Rasmussen, C., Matsuyama, N., Dahlgren, R.., Southard, R.J. Brauer, N. (2007), Soil Genesis Mineral Transformation Across Environmental Gradient Andesitic Lahar. Soil Sci. Soc. . J., 71: 225-237.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sierraTransect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Physical and Chemical Data Related to Studies in the Sierra Nevada Mountains, CA, USA. — sierraTransect","text":"","code":"data(sierraTransect)  # tighter margins op <- par(mar=c(0,0,0,0))  # quick sketch plotSPC(sierraTransect, name.style = 'center-center', width=0.3)   # split by transect par(mar=c(0,0,1,1)) groupedProfilePlot( sierraTransect, groups='transect', group.name.offset = -15, width=0.3, name.style='center-center' )   # thematic groupedProfilePlot( sierraTransect, groups='transect', group.name.offset = -15, width=0.3, name.style='center-center', color='Fe_o_to_Fe_d' )   # horizon boundary viz sierraTransect$hzd <- hzDistinctnessCodeToOffset(substr(sierraTransect$hz_boundary, 0, 1))  groupedProfilePlot( sierraTransect, groups='transect', group.name.offset = -15, width=0.3, name.style='center-center', color='Fe_o_to_Fe_d', hz.distinctness.offset='hzd')    # split transects g <- subset(sierraTransect, transect == 'Granite') a <- subset(sierraTransect, transect == 'Andesite')  g.order <- order(g$elev) a.order <- order(a$elev)  # order (left -> right) by elevation par(mar=c(2,0,0,2), mfrow=c(2,1)) plot(g, width=0.3, name.style='center-center', cex.names=0.75, plot.order=g.order) axis(1, at=1:length(g), labels=g$elev[g.order], line=-1.5)  plot(a, width=0.3, name.style='center-center', cex.names=0.75, plot.order=a.order) axis(1, at=1:length(a), labels=a$elev[a.order], line=-1.5)    par(op)"},{"path":"https://ncss-tech.github.io/aqp/reference/sim.html","id":null,"dir":"Reference","previous_headings":"","what":"DEPRECATED Simulate Soil Profiles — sim","title":"DEPRECATED Simulate Soil Profiles — sim","text":"Simulate collection soil profiles based horizonation single soil profile. Now deprecated: use perturb() perturbations horizon thicknesses boundaries.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DEPRECATED Simulate Soil Profiles — sim","text":"","code":"sim(x, n = 1, iterations = 25, hz.sd = 2, min.thick = 2)"},{"path":"https://ncss-tech.github.io/aqp/reference/sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DEPRECATED Simulate Soil Profiles — sim","text":"x SoilProfileCollection object containing single profile draw simulated data n number requested simulations iterations sampling iterations used determine horizon thickness hz.sd standard deviation used simulate horizon thickness, can vector must divide evenly number horizons found x min.thick minimum horizon thickness allowed simulation results","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DEPRECATED Simulate Soil Profiles — sim","text":"SoilProfileCollection object n simulated profiles, containing number horizons data x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DEPRECATED Simulate Soil Profiles — sim","text":"function generates collection simulated soil profiles based horizon thickness data associated single \"template\" profile. Simulation based sampling family Gaussian distribution means defined \"template\" profile standard deviation defined user.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/sim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DEPRECATED Simulate Soil Profiles — sim","text":"D. E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DEPRECATED Simulate Soil Profiles — sim","text":"","code":"# please see documentation for perturb() for examples #  the sim() function calls perturb() internally"},{"path":"https://ncss-tech.github.io/aqp/reference/simulateColor.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Soil Colors — simulateColor","title":"Simulate Soil Colors — simulateColor","text":"Simulate plausible soil colors based several possible parameterization \"range characteristics\" (RIC). Soil color RIC can specified list parameters: soil color proportions, output aggregateColor() – method = 'proportions' likely Munsell color, CIE2000 threshold, vector acceptable hues – method = 'dE00' data.frame Munsell hue, value, chroma representing observed soil colors – method = 'mvnorm'","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/simulateColor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Soil Colors — simulateColor","text":"","code":"simulateColor(   method = c(\"dE00\", \"proportions\", \"mvnorm\"),   n,   parameters,   SPC = NULL )"},{"path":"https://ncss-tech.github.io/aqp/reference/simulateColor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Soil Colors — simulateColor","text":"method simulation method, see details n number simulated colors per group parameters list, format depends method: proportions: output aggregateColor() dE00: formatted list(m = '7.5YR 3/3', thresh = 5, hues = c('7.5YR')) mvnorm: formatted list(hvc = x) m single representative Munsell chip, thresh threshold specified CIE2000 color contrast (dE00), hues vector allowed Munsell hues, x data.frame representing columns Munsell hue, value, chroma least 3 rows. SPC SoilProfileCollection, attempt modify SPC simulated colors","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/simulateColor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Soil Colors — simulateColor","text":"list, unless SPC specified, SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/simulateColor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Soil Colors — simulateColor","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/simulateColor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Soil Colors — simulateColor","text":"","code":"# restrict examples to 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  # m: representative or most likely color # thresh: dE00 threshold # hues: allowed Munsell hues p <- list(   'A' = list(m = '7.5YR 3/3', thresh = 5, hues = c('7.5YR')),   'BA' = list(m = '7.5YR 4/4', thresh = 8, hues = c('7.5YR')),   'Bt1' = list(m = '7.5YR 4/4', thresh = 8, hues = c('5YR', '7.5YR')),   'Bt2' = list(m = '5YR 4/5', thresh = 8, hues = c('5YR', '7.5YR')),   'Bt3' = list(m = '10YR 4/6', thresh = 10, hues = c('10YR', '7.5YR')),   'Cr' = list(m = '2.5G 6/2', thresh = 15, hues = c('2.5G', '2.5GY', '2.5BG')) )  # simulate (cols <- simulateColor(method = 'dE00', n = 10, parameters = p)) #> $A #>  [1] \"7.5YR 3/3\"   \"7.5YR 3/3\"   \"7.5YR 2.5/3\" \"7.5YR 3/4\"   \"7.5YR 2.5/3\" #>  [6] \"7.5YR 2.5/4\" \"7.5YR 3/2\"   \"7.5YR 3/3\"   \"7.5YR 2.5/4\" \"7.5YR 2.5/4\" #>  #> $BA #>  [1] \"7.5YR 4/5\" \"7.5YR 4/4\" \"7.5YR 4/5\" \"7.5YR 4/6\" \"7.5YR 4/4\" \"7.5YR 4/5\" #>  [7] \"7.5YR 4/2\" \"7.5YR 4/4\" \"7.5YR 4/4\" \"7.5YR 4/4\" #>  #> $Bt1 #>  [1] \"7.5YR 4/4\" \"5YR 4/4\"   \"7.5YR 4/4\" \"5YR 4/5\"   \"5YR 4/2\"   \"5YR 4/5\"   #>  [7] \"7.5YR 4/4\" \"5YR 4/3\"   \"5YR 4/3\"   \"7.5YR 4/4\" #>  #> $Bt2 #>  [1] \"5YR 4/6\"   \"5YR 4/5\"   \"5YR 4/3\"   \"7.5YR 4/5\" \"7.5YR 4/6\" \"5YR 4/5\"   #>  [7] \"5YR 4/5\"   \"7.5YR 4/3\" \"5YR 4/5\"   \"7.5YR 4/5\" #>  #> $Bt3 #>  [1] \"7.5YR 3/7\"  \"10YR 4/5\"   \"7.5YR 3/6\"  \"10YR 4/6\"   \"10YR 4/5\"   #>  [6] \"10YR 4/5\"   \"10YR 3/10\"  \"7.5YR 3/7\"  \"7.5YR 4/11\" \"10YR 4/5\"   #>  #> $Cr #>  [1] \"2.5GY 6/1\" \"2.5G 6/3\"  \"2.5BG 5/1\" \"2.5GY 7/2\" \"2.5G 7/1\"  \"2.5BG 5/3\" #>  [7] \"2.5GY 7/1\" \"2.5BG 5/1\" \"2.5GY 6/3\" \"2.5GY 6/2\" #>   # preview previewColors(parseMunsell(unlist(cols)), method = 'MDS')   # another example, this time using a larger dE00 threshold p <- list(   'A' = list(m = '7.5YR 3/3', thresh = 20, hues = c('10YR', '7.5YR', '5YR')) )  # simulate set.seed(54654) cols <- simulateColor(method = 'dE00', n = 200, parameters = p)  # flatten cols <- unlist(cols)  # tabulate, sort: most frequent color should be 7.5YR 3/3 sort(table(cols), decreasing = TRUE) #> cols #>   7.5YR 3/3  10YR 2.5/2   7.5YR 3/4 7.5YR 2.5/6     5YR 3/3 7.5YR 2.5/4  #>          17           6           6           5           4           4  #>    10YR 2/3    10YR 2/6    10YR 3/3    10YR 3/7    10YR 4/7   5YR 2.5/4  #>           3           3           3           3           3           3  #>   5YR 2.5/5   5YR 2.5/8     5YR 2/7     5YR 3/4     5YR 3/7 7.5YR 2.5/2  #>           3           3           3           3           3           3  #> 7.5YR 2.5/3   7.5YR 3/5  7.5YR 4/14  10YR 2.5/4  10YR 2.5/6  10YR 2.5/7  #>           3           3           3           2           2           2  #>    10YR 2/4    10YR 3/2    10YR 3/5    10YR 4/1    10YR 4/6   5YR 2.5/2  #>           2           2           2           2           2           2  #>   5YR 2.5/3     5YR 2/1     5YR 2/2     5YR 2/4     5YR 2/8    5YR 3/11  #>           2           2           2           2           2           2  #>     5YR 3/2     5YR 3/6     5YR 4/2     5YR 5/2     5YR 5/5 7.5YR 2.5/1  #>           2           2           2           2           2           2  #> 7.5YR 2.5/5 7.5YR 2.5/7   7.5YR 2/2   7.5YR 2/3   7.5YR 3/1   7.5YR 3/2  #>           2           2           2           2           2           2  #>   7.5YR 3/6   7.5YR 3/7   7.5YR 4/5   7.5YR 5/3    10YR 1/1    10YR 1/2  #>           2           2           2           2           1           1  #>    10YR 1/3    10YR 1/4  10YR 2.5/1  10YR 2.5/5    10YR 2/2    10YR 2/5  #>           1           1           1           1           1           1  #>    10YR 2/7    10YR 3/1    10YR 3/4   10YR 4/12    10YR 4/2    10YR 4/5  #>           1           1           1           1           1           1  #>    10YR 4/9    10YR 5/3     5YR 1/2   5YR 2.5/1  5YR 2.5/10   5YR 2.5/6  #>           1           1           1           1           1           1  #>   5YR 2.5/7    5YR 2/10     5YR 2/3     5YR 2/5     5YR 2/6     5YR 2/9  #>           1           1           1           1           1           1  #>     5YR 3/1     5YR 3/5     5YR 4/1    5YR 4/10    5YR 4/11    5YR 4/13  #>           1           1           1           1           1           1  #>     5YR 4/7     5YR 4/9     5YR 5/3     5YR 5/4   7.5YR 1/2   7.5YR 1/3  #>           1           1           1           1           1           1  #>   7.5YR 1/4 7.5YR 2.5/8   7.5YR 2/4   7.5YR 2/6   7.5YR 2/8   7.5YR 3/9  #>           1           1           1           1           1           1  #>   7.5YR 4/1  7.5YR 4/11   7.5YR 4/3   7.5YR 4/8   7.5YR 4/9   7.5YR 5/2  #>           1           1           1           1           1           1  #>   7.5YR 5/4  #>           1   # review colors previewColors(parseMunsell(cols))   # what does a dE00 threshold look like on 3 pages of hue? contrastChart('7.5YR 3/3', hues = c('10YR', '7.5YR', '5YR'), thresh = 20)"},{"path":"https://ncss-tech.github.io/aqp/reference/singlebracket.html","id":null,"dir":"Reference","previous_headings":"","what":"Matrix/data.frame-like access to profiles and horizons in a SoilProfileCollection — [,SoilProfileCollection-method","title":"Matrix/data.frame-like access to profiles and horizons in a SoilProfileCollection — [,SoilProfileCollection-method","text":"can access contents SoilProfileCollection profile horizon \"index\", j, respectively: spc[, j, ...]. Subset operations propagated slots (diagnostics spatial) result removal sites collection. refers profile position within collection. default order based C SORT order variable specified unique profile ID time object construction. Note ID variable numeric, sorted character. j refers horizon \"slice\" index. index useful either ) working slice'd SoilProfileCollection b) working single-profile collections. j returns layer specified index positions profiles collection. ... area specify expression evaluated subset. Currently supported .LAST (last horizon profile): return last horizon profile. uses ignores regular j index. .FIRST (first horizon profile): return last horizon profile. uses ignores regular j index. .HZID (horizon index): return horizon indices corresponding +j+... (\"k\") constraints .NHZ (number horizons): return number horizons profiles resulting +j+... (\"k\") constraints","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/singlebracket.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matrix/data.frame-like access to profiles and horizons in a SoilProfileCollection — [,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' x[i, j, ..., drop = TRUE]"},{"path":"https://ncss-tech.github.io/aqp/reference/singlebracket.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matrix/data.frame-like access to profiles and horizons in a SoilProfileCollection — [,SoilProfileCollection-method","text":"x SoilProfileCollection numeric logical value denoting profile indices select subset j numeric logical value denoting horizon indices select subset ... non-standard expressions evaluate subset drop Default: TRUE. drop=FALSE placeholder horizons (profile ID values NA) created specified j index results removal horizons.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/site.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve site data from SoilProfileCollection — site,SoilProfileCollection-method","title":"Retrieve site data from SoilProfileCollection — site,SoilProfileCollection-method","text":"Get site data SoilProfileCollection. Result returned data.frame class used initially construct SoilProfileCollection. two options available via site<- setter. first \"normalization\" formula interface, whereby one specifies attribute constant horizons within profiles promoted site-level variable: site(spc) <- ~ horizonvariable second creation site data external data.frame via merge (LEFT JOIN). must one -named columns (least matching data) left right hand side facilitate join: site(spc) <- newdata","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/site.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve site data from SoilProfileCollection — site,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' site(object)  site(object) <- value"},{"path":"https://ncss-tech.github.io/aqp/reference/site.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve site data from SoilProfileCollection — site,SoilProfileCollection-method","text":"object SoilProfileCollection value formula object inheriting data.frame","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/site.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve site data from SoilProfileCollection — site,SoilProfileCollection-method","text":"","code":"# load test data data(sp2)  # promote to SPC depths(sp2) <- id ~ top + bottom  # normalize a horizon-level attribute to site site(sp2) <- ~ surface  # inspect site table site(sp2) #>        id         surface #> 1   hon-1        holocene #> 2  hon-10   lower modesto #> 3  hon-11   lower modesto #> 4  hon-13   upper modesto #> 5  hon-14   upper modesto #> 6  hon-17 lower riverbank #> 7  hon-18 lower riverbank #> 8  hon-19 lower riverbank #> 9   hon-2        holocene #> 10 hon-20 lower riverbank #> 11 hon-21    lower laguna #> 12 hon-22    lower laguna #> 13  hon-3        holocene #> 14  hon-4        holocene #> 15  hon-5   upper modesto #> 16  hon-6   upper modesto #> 17  hon-7   upper modesto #> 18  hon-8   upper modesto  # make some data: classify two geomorphic surfaces with numeric value newdata <- data.frame(surface = c(\"holocene\",                                   \"lower riverbank\"),                       newvalue = c(1,2))  # do left join based on newly-normalized \"surface\" attribute site(sp2) <- newdata  # inspect site table: holocene & lower riverbank have values site(sp2) #>            surface     id newvalue #> 1         holocene  hon-1        1 #> 2    lower modesto hon-10       NA #> 3    lower modesto hon-11       NA #> 4    upper modesto hon-13       NA #> 5    upper modesto hon-14       NA #> 6  lower riverbank hon-17        2 #> 7  lower riverbank hon-18        2 #> 8  lower riverbank hon-19        2 #> 9         holocene  hon-2        1 #> 10 lower riverbank hon-20        2 #> 11    lower laguna hon-21       NA #> 12    lower laguna hon-22       NA #> 13        holocene  hon-3        1 #> 14        holocene  hon-4        1 #> 15   upper modesto  hon-5       NA #> 16   upper modesto  hon-6       NA #> 17   upper modesto  hon-7       NA #> 18   upper modesto  hon-8       NA"},{"path":"https://ncss-tech.github.io/aqp/reference/siteNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Set site column names — siteNames<-","title":"Set site column names — siteNames<-","text":"Set site column names Get names columns site table.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/siteNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set site column names — siteNames<-","text":"","code":"# S4 method for class 'SoilProfileCollection' siteNames(object) <- value  # S4 method for class 'SoilProfileCollection' siteNames(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/siteNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set site column names — siteNames<-","text":"object SoilProfileCollection value unique vector equal length number columns site: length(siteNames(object))","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":null,"dir":"Reference","previous_headings":"","what":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"Aggregate soil properties along user-defined slabs, optionally within groups.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"","code":"# S4 method for class 'SoilProfileCollection' slab(   object,   fm,   slab.structure = 1,   strict = FALSE,   byhz = TRUE,   slab.fun = slab_function(method = \"numeric\"),   cpm = 1,   weights = NULL,   ... )  slab_function(   method = c(\"numeric\", \"factor\", \"hd\", \"weighted.numeric\", \"weighted.factor\", \"fast\") )"},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"object SoilProfileCollection fm formula: either groups ~ var1 + var2 + var3 named variables aggregated within groups' named variables aggregated across entire collection  ~ var1 + var2 + var3. groupsis factor must containNA` slab.structure user-defined slab thickness (defined integer), user-defined structure (numeric vector). See details . strict logical: horizons strictly checked self-consistency? byhz logical: horizons whole profiles removed logic checks strict? Default TRUE removes offending horizons, FALSE removes whole profiles one illogical horizons. slab.fun Function used process 'slab' data, ideally returning vector names attribute. Defaults wrapper function around stats::quantile(). See details. cpm Strategy normalizing slice-wise probabilities, dividing either: number profiles data current slice (cpm=1), number profiles collection (cpm=2). Mode 1 values always sum contributing fraction, mode 2 values always sum 1. weights Column name containing site-level weights ... arguments passed slab.fun method one \"numeric\", \"factor\", \"hd\", \"weighted.numeric\", \"weighted.factor\", \"fast\"","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"Output returned long format, slice-wise aggregates returned combination grouping level (optional), variable described fm argument, depth-wise 'slab'. Aggregation numeric variables, using default slab function: variable names variables included call slab. groupname name grouping variable provided, otherwise fake grouping variable named '.profiles'. p.q5 slice-wise 5th percentile. p.q25 slice-wise 25th percentile p.q50 slice-wise 50th percentile (median) p.q75 slice-wise 75th percentile p.q95 slice-wise 95th percentile top slab top boundary. bottom slab bottom boundary. contributing_fraction fraction profiles contributing aggregate value, ranges 1/n_profiles 1. single factor variable used, slice-wise probabilities level factor returned : variable names variables included call slab. groupname name grouping variable provided, otherwise fake grouping variable named '.profiles'. slice-wise probability level B slice-wise probability level B list()  n slice-wise probability level n top slab top boundary. bottom slab bottom boundary. contributing_fraction fraction profiles contributing aggregate value, ranges 1/n_profiles 1. slab_function(): return aggregation function based method argument","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"Multiple continuous variables single categorical (factor) variable can aggregated within call slab. Basic error checking performed make sure top bottom horizon boundaries make sense. User-defined aggregate functions (slab.fun) return named vector results. new, named column appear results slab every named element vector returned slab.fun. See examples simple example slab function computes mean, mean-1SD mean+1SD. default slab function wraps stats::quantile Hmisc package, requires least 2 observations per chunk. Note group factor must contain NAs. slab() uses dice() \"resample\" profiles 1cm slices depth 0 max(x) (slab.structure[2], defined). Sometimes slab used conveniently re-arrange data vs. aggregate. performed specifying identity slab.fun. See examples beflow demonstration functionality. default slab.fun changed 2019-10-30 wrapper around Hmisc::hdquantile wrapper around stats::quantile. See examples simple way switch HD quantile estimator. Execution time scales linearly (slower) total number profiles object, exponentially (faster) number profiles / group increased. slab slice much faster require less memory input data either numeric character. several possible ways define slabs, using slab.structure: single integer e.g. 10: data aggregated regular sequence 10-unit thickness slabs vector 2 integers e.g. c(50, 60): data aggregated depths spanning 50–60 units vector 3 integers e.g. c(0, 5, 10, 50, 100): data aggregated depths spanning 0–5, 5–10, 10–50, 50–100 units slab_function(): default \"numeric\" aggregation method \"fast\" numeric (quantile) method. Additional methods include \"factor\" categorical data, \"hd\" use Harrell-Davis Distribution-Free Quantile Estimator Hmisc package, \"weighted\" use weighted quantile method Hmisc package","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"Arguments slab changed aqp 1.5 (2012-12-29) part code clean-optimization. Calculation weighted-summaries broken aqp 1.2-6 (2012-06-26), removed aqp 1.5 (2012-12-29).  slab replaced previously defined soil.slot.multiple function aqp 0.98-8.58 (2011-12-21).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"data = \"SoilProfileCollection\" Typical usage, input SoilProfileCollection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"D.E. Beaudette, P. Roudier, .T. O'Geen, Algorithms quantitative pedology: toolkit soil scientists, Computers & Geosciences, Volume 52, March 2013, Pages 258-268, 10.1016/j.cageo.2012.10.020. Harrell FE, Davis CE (1982): new distribution-free quantile estimator. Biometrika 69:635-640.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slab-Wise Aggregation of SoilProfileCollection Objects — slab","text":"","code":"## ## basic examples ## library(lattice) library(grid) library(data.table)  # load sample data, upgrade to SoilProfileCollection data(sp1) depths(sp1) <- id ~ top + bottom  hzdesgnname(sp1) <- \"name\"  # aggregate entire collection with two different segment sizes a <- slab(sp1, fm = ~ prop) #> horizons with zero thickness have been omitted from results b <- slab(sp1, fm = ~ prop, slab.structure=5) #> horizons with zero thickness have been omitted from results  # check output str(a) #> 'data.frame':\t240 obs. of  10 variables: #>  $ variable             : Factor w/ 1 level \"prop\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ all.profiles         : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ p.q5                 : num  0 0 0 0.4 0.4 0.4 1.4 1.4 1.4 1.4 ... #>  $ p.q25                : num  0 0 1 1 1 3 3 3 3 3 ... #>  $ p.q50                : num  3 3 3 5 5 5 5 5 5 5 ... #>  $ p.q75                : num  8 8 7 7 7 7 7 7 7 7 ... #>  $ p.q95                : num  13.6 13.6 14 14 14 16.4 16.4 16.4 16.4 16.4 ... #>  $ contributing_fraction: num  1 1 1 1 1 1 1 1 1 1 ... #>  $ top                  : int  0 1 2 3 4 5 6 7 8 9 ... #>  $ bottom               : int  1 2 3 4 5 6 7 8 9 10 ...  # stack into long format ab <- make.groups(a, b) ab$which <- factor(ab$which, levels=c('a','b'), labels=c('1-cm Interval', '5-cm Interval'))  # plot median and IQR # custom plotting function for uncertainty viz. xyplot(top ~ p.q50 | which, data=ab, ylab='Depth',        xlab='median bounded by 25th and 75th percentiles',        lower=ab$p.q25, upper=ab$p.q75, ylim=c(250,-5),        panel=panel.depth_function,        prepanel=prepanel.depth_function,        cf=ab$contributing_fraction,        alpha=0.5,        layout=c(2,1), scales=list(x=list(alternating=1))        )    ### ### re-arrange data / no aggregation ###  # load sample data, upgrade to SoilProfileCollection data(sp1) depths(sp1) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing.  # arrange data by ID a <- slab(sp1, fm = id ~ prop, slab.fun=identity) #> horizons with zero thickness have been omitted from results  # convert id to a factor for plotting a$id <- factor(a$id)  # check output str(a) #> 'data.frame':\t2160 obs. of  6 variables: #>  $ variable             : Factor w/ 1 level \"prop\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ id                   : Factor w/ 9 levels \"P001\",\"P002\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ value                : int  13 13 7 7 7 7 7 7 7 7 ... #>  $ contributing_fraction: num  1 1 1 1 1 1 1 1 1 1 ... #>  $ top                  : int  0 1 2 3 4 5 6 7 8 9 ... #>  $ bottom               : int  1 2 3 4 5 6 7 8 9 10 ...  # plot via step function xyplot(top ~ value | id, data=a, ylab='Depth',        ylim=c(250, -5), as.table=TRUE,        panel=panel.depth_function,        prepanel=prepanel.depth_function,        scales=list(x=list(alternating=1)) )   ## ## categorical variable example ##  data(sp1) depths(sp1) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing.  # normalize horizon names: result is a factor sp1$name <- generalize.hz(   sp1$name,   new = c('O','A','B','C'),   pat = c('O', '^A','^B','C')   )  # compute slice-wise probability so that it sums to contributing fraction, from 0-150 a <- slab(sp1, fm= ~ name, cpm=1, slab.structure=0:150) #> horizons with zero thickness have been omitted from results  # convert wide -> long for plotting # result is a data.table # genhz factor levels are set by order in `measure.vars` a.long <- data.table::melt(   data.table::as.data.table(a),   id.vars = c('top','bottom'),   measure.vars = c('O', 'A', 'B', 'C'),   )   # plot horizon type proportions using panels xyplot(top ~ value | variable,        data = a.long, subset=value > 0,        col = 1, lwd = 2,        xlab = 'Class Probability',        ylab = 'Depth (cm)',        strip = strip.custom(bg = grey(0.85)),        scales = list(x = list(alternating = FALSE)),        ylim = c(150, -5), type=c('S','g'),        horizontal = TRUE, layout = c(4,1)        )   # again, this time using groups xyplot(top ~ value,        data = a.long,        groups = variable,        subset = value > 0,        ylim = c(150, -5),        type = c('S','g'),        horizontal = TRUE,        asp = 2,        lwd = 2,        auto.key = list(          lines = TRUE,          points = FALSE,          cex = 0.8,          columns = 1,          space = 'right'        ) )   # adjust probability to size of collection, from 0-150 a.1 <- slab(sp1, fm= ~ name, cpm = 2, slab.structure = 0:150) #> horizons with zero thickness have been omitted from results  # convert wide -> long for plotting # result is a data.table # genhz factor levels are set by order in `measure.vars` a.1.long <- data.table::melt(   data.table::as.data.table(a.1),   id.vars = c('top','bottom'),   measure.vars = c('O','A','B','C') )  # combine aggregation from `cpm` modes 1 and 2 g <- make.groups(cmp.mode.1 = a.long, cmp.mode.2 = a.1.long)  # plot horizon type proportions xyplot(top ~ value | variable,        groups = which,        data = g, subset = value > 0,        ylim = c(240, -5),        type = c('S','g'),        horizontal = TRUE,        layout = c(4,1),        auto.key = list(lines = TRUE, points = FALSE, columns = 2),        par.settings = list(superpose.line = list(col = c(1, 2), lwd = 2)),        scales = list(alternating = 3),        xlab = 'Class Probability',        ylab = 'Depth (cm)',        strip = strip.custom(bg = grey(0.85)) )    # apply slice-wise evaluation of max probability, and assign ML-horizon at each slice gen.hz.ml <- get.ml.hz(a, c('O','A','B','C'))   if (FALSE) { # \\dontrun{ ## ## HD quantile estimator ##  library(soilDB) library(lattice) library(data.table)  # sample data data('loafercreek', package = 'soilDB')  # defaul slab.fun wraps stats::quantile() a <- slab(loafercreek, fm = ~ total_frags_pct + clay)  # use HD quantile estimator from Hmisc package instead a.HD <- slab(loafercreek, fm = ~ total_frags_pct + clay, slab.fun = aqp:::.slab.fun.numeric.HD)  # combine g <- make.groups(standard=a, HD=a.HD)  # note differences densityplot(~ p.q50 | variable, data=g, groups=which,             scales=list(relation='free', alternating=3, tick.number=10, y=list(rot=0)),             xlab='50th Percentile', pch=NA, main='Loafercreek',             auto.key=list(columns=2, points=FALSE, lines=TRUE),             par.settings=list(superpose.line=list(lwd=2, col=c('RoyalBlue', 'Orange2'))) )  # differences are slight but important xyplot(   top ~ p.q50 | variable, data=g, groups=which,   xlab='Value', ylab='Depth (cm)',   asp=1.5, main='Loafercreek',   lower=g$p.q25, upper=g$p.q75,   sync.colors=TRUE, alpha=0.25, cf=g$contributing_fraction,   ylim=c(115,-5), layout=c(2,1), scales=list(x=list(relation='free')),   par.settings=list(superpose.line=list(lwd=2, col=c('RoyalBlue', 'Orange2'))),   strip=strip.custom(bg=grey(0.85)),   panel=panel.depth_function,   prepanel=prepanel.depth_function,   auto.key=list(columns=2, lines=TRUE, points=FALSE) )  ## ## multivariate examples ## data(sp3)  # add new grouping factor sp3$group <- 'group 1' sp3$group[as.numeric(sp3$id) > 5] <- 'group 2' sp3$group <- factor(sp3$group)  # upgrade to SPC depths(sp3) <- id ~ top + bottom site(sp3) <- ~ group  # custom 'slab' function, returning mean +/- 1SD mean.and.sd <- function(values) {   m <- mean(values, na.rm=TRUE)   s <- sd(values, na.rm=TRUE)   upper <- m + s   lower <- m - s   res <- c(mean=m, lower=lower, upper=upper)   return(res) }  # aggregate several variables at once, within 'group' a <- slab(sp3, fm = group ~ L + A + B, slab.fun = mean.and.sd)  # check the results: # note that 'group' is the column containing group labels xyplot(   top ~ mean | variable, data=a, groups=group,   lower=a$lower, upper=a$upper,   sync.colors=TRUE, alpha=0.5,   cf = a$contributing_fraction,   xlab = 'Mean Bounded by +/- 1SD',   ylab = 'Depth (cm)',   ylim=c(125,-5), layout=c(3,1),   scales=list(x=list(relation='free')),   par.settings = list(superpose.line=list(lwd=2, col=c('RoyalBlue', 'Orange2'))),   panel = panel.depth_function,   prepanel = prepanel.depth_function,   strip = strip.custom(bg=grey(0.85)),   auto.key = list(columns=2, lines=TRUE, points=FALSE) )   # compare a single profile to the group-level aggregate values a.1 <- slab(sp3[1, ], fm = group ~ L + A + B, slab.fun = mean.and.sd)  # manually update the group column a.1$group <- 'profile 1'  # combine into a single data.frame: g <- rbind(a, a.1)  # plot with customized line styles xyplot(   top ~ mean | variable, data=g, groups=group, subscripts=TRUE,   lower=a$lower, upper=a$upper, ylim=c(125,-5),   layout=c(3,1), scales=list(x=list(relation='free')),   xlab = 'Mean Bounded by +/- 1SD',   ylab = 'Depth (cm)',   panel=panel.depth_function,   prepanel=prepanel.depth_function,   sync.colors = TRUE, alpha = 0.25,   par.settings = list(     superpose.line = list(       col = c('orange', 'royalblue', 'black'),       lwd = 2, lty = c(1,1,2)     )   ),   strip = strip.custom(bg=grey(0.85)),   auto.key = list(columns=3, lines=TRUE, points=FALSE) )     ## again, this time for a user-defined slab from 40-60 cm a <- slab(sp3,           fm = group ~ L + A + B,           slab.structure = c(40,60),           slab.fun = mean.and.sd )  # now we have weighted average properties (within the defined slab) # for each variable, and each group # convert long -> wide data.table::dcast(   data.table::as.data.table(a),   formula = group + top + bottom ~ variable,   value.var = 'mean' )  ## this time, compute the weighted mean of selected properties, by profile ID a <- slab(sp3,           fm = id ~ L + A + B,           slab.structure = c(40,60),           slab.fun = mean.and.sd )  # convert long -> wide data.table::dcast(   data.table::as.data.table(a),   formula = id + top + bottom ~ variable,   value.var = 'mean' )   ## aggregate the entire collection, using default slab function (hdquantile) ## note the missing left-hand side of the formula a <- slab(sp3, fm= ~ L + A + B)    ## weighted-aggregation -- NOT YET IMPLEMENTED -- # load sample data, upgrade to SoilProfileCollection data(sp1) depths(sp1) <- id ~ top + bottom  # generate pretend weights as site-level attribute set.seed(10101) sp1$site.wts <- runif(n=length(sp1), min=20, max=100) } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Slicing of SoilProfileCollection Objects — slice-methods","title":"Slicing of SoilProfileCollection Objects — slice-methods","text":"method \"slicing\" SoilProfileCollection objects constant depth intervals. Now deprecated, see [dice()].","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slicing of SoilProfileCollection Objects — slice-methods","text":"","code":"slice.fast(object, fm, top.down = TRUE, just.the.data = FALSE, strict = TRUE)  # S4 method for class 'SoilProfileCollection' slice(object, fm, top.down = TRUE, just.the.data = FALSE, strict = TRUE)  get.slice(h, id, top, bottom, vars, z, include = \"top\", strict = TRUE)"},{"path":"https://ncss-tech.github.io/aqp/reference/slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slicing of SoilProfileCollection Objects — slice-methods","text":"object SoilProfileCollection fm formula: either integer.vector ~ var1 + var2 + var3 named variables sliced according integer.vector variables sliced according integer.vector: integer.vector ~ .. top.logical, slices defined top-: 0:10 implies 0-11 depth units. just..data Logical, return just sliced data new SoilProfileCollection object. strict Check logic errors? Default: TRUE h Horizon data.frame id Profile ID top Top Depth Column Name bottom Bottom Depth Column Name vars Variables Interest z Slice Depth (index). include Either 'top' 'bottom'. Boundary include slice. Default: 'top'","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slicing of SoilProfileCollection Objects — slice-methods","text":"Either new SoilProfileCollection data sliced according fm, data.frame.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Slicing of SoilProfileCollection Objects — slice-methods","text":"default, slices defined top-: 0:10 implies 0-11 depth units.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slice.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Slicing of SoilProfileCollection Objects — slice-methods","text":"D.E. Beaudette, P. Roudier, .T. O'Geen, Algorithms quantitative pedology: toolkit soil scientists, Computers & Geosciences, Volume 52, March 2013, Pages 258-268, 10.1016/j.cageo.2012.10.020.","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/slice.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Slicing of SoilProfileCollection Objects — slice-methods","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slicing of SoilProfileCollection Objects — slice-methods","text":"","code":"library(aqp)  # simulate some data, IDs are 1:20 d <- lapply(1:20, random_profile) d <- do.call('rbind', d)  # init SoilProfileCollection object depths(d) <- id ~ top + bottom head(horizons(d)) #>   id top bottom name        p1        p2          p3        p4         p5 hzID #> 1  1   0     28   H1  9.201405 -6.835655   0.8525996  4.824201  -7.994531    1 #> 2  1  28     37   H2 15.312323 -5.353120  -3.0780103 22.126603  -5.419231    2 #> 3  1  37     64   H3 24.106495 -6.386571   2.0878183 20.331013   0.581044    3 #> 4  1  64     91   H4 19.940854 -4.466280   1.4647572 17.199065 -13.806440    4 #> 5 10   0     13   H1 14.852170 -4.626349  -3.5354367  5.675210  -1.138095    5 #> 6 10  13     34   H2 17.246366 -2.943876 -23.2641706 11.316858   5.286298    6  # generate single slice at 10 cm # output is a SoilProfileCollection object s <- dice(d, fm = 10 ~ name + p1 + p2 + p3)  # generate single slice at 10 cm, output data.frame s <- dice(d, 10 ~ name + p1 + p2 + p3, SPC = FALSE)  # generate integer slices from 0 - 26 cm # note that slices are specified by default as \"top-down\" # result is a SoilProfileCollection # e.g. the lower depth will always by top + 1 s <- dice(d, fm = 0:25 ~ name + p1 + p2 + p3) par(mar=c(0,1,0,1)) plotSPC(s)   # generate slices from 0 - 11 cm, for all variables s <- dice(d, fm = 0:10 ~ .) print(s) #> SoilProfileCollection with 20 profiles and 220 horizons #> profile ID: id  |  horizon ID: sliceID  #> Depth range: 11 - 11 cm #>  #> ----- Horizons (6 / 220 rows  |  10 / 13 columns) ----- #>  id sliceID top bottom hzID name       p1        p2        p3       p4 #>   1       1   0      1    1   H1 9.201405 -6.835655 0.8525996 4.824201 #>   1       2   1      2    1   H1 9.201405 -6.835655 0.8525996 4.824201 #>   1       3   2      3    1   H1 9.201405 -6.835655 0.8525996 4.824201 #>   1       4   3      4    1   H1 9.201405 -6.835655 0.8525996 4.824201 #>   1       5   4      5    1   H1 9.201405 -6.835655 0.8525996 4.824201 #>   1       6   5      6    1   H1 9.201405 -6.835655 0.8525996 4.824201 #> [... more horizons ...] #>  #> ----- Sites (6 / 20 rows  |  1 / 1 columns) ----- #>  id #>   1 #>  10 #>  11 #>  12 #>  13 #>  14 #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY]  # compute percent missing, for each slice, # if all vars are missing, then NA is returned d$p1[1:10] <- NA s <- dice(d, 10 ~ ., SPC = FALSE, pctMissing = TRUE) head(s) #>   hzID id top bottom name        p1         p2          p3         p4 #> 1    1  1  10     11   H1        NA -6.8356554   0.8525996   4.824201 #> 2    5 10  10     11   H1        NA -4.6263494  -3.5354367   5.675210 #> 3   11 11  10     11   H1  6.009662  1.3820162 -12.1439838 -13.858707 #> 4   15 12  10     11   H2  6.511279 -4.4183782 -25.1033888  -1.818884 #> 5   20 13  10     11   H1 10.972373 -1.6643068  -6.6952467 -10.342752 #> 6   24 14  10     11   H1  3.773004 -0.5507985   1.1623836   9.395569 #>           p5 sliceID .oldTop .oldBottom .pctMissing #> 1  -7.994531      11       0         28   0.1666667 #> 2  -1.138095     102       0         13   0.1666667 #> 3  -1.401404     208       0         27   0.0000000 #> 4  -4.632886     274       9         26   0.0000000 #> 5  -4.558176     367       0         28   0.0000000 #> 6 -14.160065     462       0         18   0.0000000  if (FALSE) { # \\dontrun{ ## ## check sliced data ##  # test that mean of 1 cm slices property is equal to the # hz-thickness weighted mean value of that property data(sp1) depths(sp1) <- id ~ top + bottom  # get the first profile sp1.sub <- sp1[which(profile_id(sp1) == 'P009'), ]  # compute hz-thickness wt. mean hz.wt.mean <- with(   horizons(sp1.sub),   sum((bottom - top) * prop) / sum(bottom - top) )  # hopefully the same value, calculated via slice() s <- dice(sp1.sub, fm = 0:max(sp1.sub) ~ prop) hz.slice.mean <- mean(s$prop, na.rm = TRUE)  # they are the same all.equal(hz.slice.mean, hz.wt.mean) } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/slicedHSD.html","id":null,"dir":"Reference","previous_headings":"","what":"Tukey's HSD Over Slices — slicedHSD","title":"Tukey's HSD Over Slices — slicedHSD","text":"Apply Tukey's HSD 1-unit depth slices.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slicedHSD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tukey's HSD Over Slices — slicedHSD","text":"","code":"slicedHSD(object, fm, conf = 0.95)"},{"path":"https://ncss-tech.github.io/aqp/reference/slicedHSD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tukey's HSD Over Slices — slicedHSD","text":"object SoilProfileCollection object fm formula describing depth sequence, horizon attribute, site (grouping) attribute. example 0:100 ~ estimated_oc | taxonname conf confidence applied TukeyHSD","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/slicedHSD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tukey's HSD Over Slices — slicedHSD","text":"D.E. Beaudette Sharon Perrone","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilColorSignature.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Profile Color Signatures — soilColorSignature","title":"Soil Profile Color Signatures — soilColorSignature","text":"Generate color signature soil profile collection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilColorSignature.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Profile Color Signatures — soilColorSignature","text":"","code":"soilColorSignature(   spc,   r = \"r\",   g = \"g\",   b = \"b\",   method = c(\"colorBucket\", \"depthSlices\", \"pam\"),   pam.k = 3,   RescaleLightnessBy = 1,   useProportions = TRUE,   pigmentNames = c(\".white.pigment\", \".red.pigment\", \".green.pigment\", \".yellow.pigment\",     \".blue.pigment\"),   apply.fun = lapply )"},{"path":"https://ncss-tech.github.io/aqp/reference/soilColorSignature.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soil Profile Color Signatures — soilColorSignature","text":"spc SoilProfileCollection object r horizon level attribute containing soil color (sRGB) red values g horizon level attribute containing soil color (sRGB) green values b horizon level attribute containing soil color (sRGB) blue values method algorithm used compute color signature, colorBucket, depthSlices, pam pam.k number classes request cluster::pam() RescaleLightnessBy rescaling factor CIE LAB L-coordinate useProportions use proportions quantities, see details pigmentNames names resulting pigment proportions quantities apply.fun function passed aqp::profileApply(APPLY.FUN) argument, can used add progress bars via pbapply::pblapply, parallel processing furrr::future_map","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilColorSignature.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Soil Profile Color Signatures — soilColorSignature","text":"colorBucket method, data.frame object containing: id column: set according idname(spc) .white.pigment: proportion quantity CIE LAB L-values .red.pigment: proportion quantity CIE LAB positive -values .green.pigment: proportion quantity CIE LAB negative -values .yellow.pigment: proportion quantity CIE LAB positive B-values .blue.pigment: proportion quantity CIE LAB negative B-values Column names can adjusted pigmentNames argument. depthSlices method ... pam method ...","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilColorSignature.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Profile Color Signatures — soilColorSignature","text":"See related tutorial.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilColorSignature.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soil Profile Color Signatures — soilColorSignature","text":"https://en.wikipedia.org/wiki/Lab_color_space","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/soilColorSignature.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Soil Profile Color Signatures — soilColorSignature","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilColorSignature.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Profile Color Signatures — soilColorSignature","text":"","code":"# trivial example, not very interesting data(sp1) depths(sp1) <- id ~ top + bottom  # convert Munsell -> sRGB triplets rgb.data <- munsell2rgb(sp1$hue, sp1$value, sp1$chroma, return_triplets = TRUE) sp1$r <- rgb.data$r sp1$g <- rgb.data$g sp1$b <- rgb.data$b  # extract color signature pig <- soilColorSignature(sp1)"},{"path":"https://ncss-tech.github.io/aqp/reference/soilPalette.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Color Palette — soilPalette","title":"Soil Color Palette — soilPalette","text":"simple function generating labeled swatches soil colors. Largely based colorspace::swatchplot.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilPalette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Color Palette — soilPalette","text":"","code":"soilPalette(   colors,   lab = colors,   lab.cex = 0.75,   dynamic.labels = TRUE,   x.inset = 0.01,   y.inset = 0.01,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/soilPalette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soil Color Palette — soilPalette","text":"colors vector hex colors (e.g. #A66E46FF) lab vector labels lab.cex character scaling labels dynamic.labels logical, adjust label colors maximum contrast via invertLabelColor x.inset horizontal adjustment labels y.inset vertical adjustment labels ... arguments colorspace::swatchplot","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilPalette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Soil Color Palette — soilPalette","text":"nothing returned, function called graphic output","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilPalette.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Soil Color Palette — soilPalette","text":"result simple figure active plotting device.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilPalette.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Soil Color Palette — soilPalette","text":"D.E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilPalette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Color Palette — soilPalette","text":"","code":"# maybe useful for teaching about soil color  par(mfrow=c(2,1), mar=c(1,1,1,1))  # demonstrate range of Munsell value m <- sprintf('10YR %s/4', 2:8) # convert to hex representation cols <- parseMunsell(m) # plot soilPalette(cols, m)  # demonstrate range of Munsell chroma m <- sprintf('10YR 4/%s', 2:8) # convert to hex representation cols <- parseMunsell(m) # plot soilPalette(cols, m)"},{"path":"https://ncss-tech.github.io/aqp/reference/soilTextureColorPal.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Texture Color Palettes — soilTextureColorPal","title":"Soil Texture Color Palettes — soilTextureColorPal","text":"Suggested color palettes USDA soil texture classes, ranked according average plant-available water holding capacity. default color mapping schema based palette used SoilWeb applications.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilTextureColorPal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Texture Color Palettes — soilTextureColorPal","text":"","code":"soilTextureColorPal(simplify = FALSE, schema = \"soilweb\")"},{"path":"https://ncss-tech.github.io/aqp/reference/soilTextureColorPal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soil Texture Color Palettes — soilTextureColorPal","text":"simplify logical, return base 12 (TRUE) full 21 (FALSE) soil texture classes schema select mapping soil texture classes, colors, currently limited 'soilweb'","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilTextureColorPal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Soil Texture Color Palettes — soilTextureColorPal","text":"data.frame soil texture class codes colors","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilTextureColorPal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Soil Texture Color Palettes — soilTextureColorPal","text":"D.E. Beaudette, Mike Walkinshaw, .T. O'Geen","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soilTextureColorPal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Texture Color Palettes — soilTextureColorPal","text":"","code":"# base 12 soil texture classes # ranked by plant available water-holding capacity d <- soilTextureColorPal(simplify = TRUE) soilPalette(d$color, lab = d$class, lab.cex = 1)   # full 21 soil texture classes # ranked by plant available water-holding capacity d <- soilTextureColorPal(simplify = FALSE) soilPalette(d$color, lab = d$class, lab.cex = 1)"},{"path":"https://ncss-tech.github.io/aqp/reference/soil_minerals.html","id":null,"dir":"Reference","previous_headings":"","what":"Munsell Colors of Common Soil Minerals — soil_minerals","title":"Munsell Colors of Common Soil Minerals — soil_minerals","text":"Munsell colors common soil minerals.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soil_minerals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Munsell Colors of Common Soil Minerals — soil_minerals","text":"","code":"data(soil_minerals)"},{"path":"https://ncss-tech.github.io/aqp/reference/soil_minerals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Munsell Colors of Common Soil Minerals — soil_minerals","text":"data frame 20 observations following 5 variables. mineral mineral name color Munsell color hue Munsell hue value Munsell value chroma Munsell chroma","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soil_minerals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Munsell Colors of Common Soil Minerals — soil_minerals","text":"Soil color properties including texture, structure, consistence used distinguish identify soil horizons (layers) group soils according soil classification system called Soil Taxonomy. Color development distribution color within soil profile part weathering. rocks containing iron manganese weather, elements oxidize. Iron forms small crystals yellow red color, organic matter decomposes black humus, manganese forms black mineral deposits. pigments paint soil (Michigan State Soil). Color also affected environment: aerobic environments produce sweeping vistas uniform subtly changing color, anaerobic (lacking oxygen), wet environments disrupt color flow complex, often intriguing patterns points accent. depth soil surface, colors usually become lighter, yellower, redder.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soil_minerals.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Munsell Colors of Common Soil Minerals — soil_minerals","text":"Lynn, W.C. Pearson, M.J., Color Soil, Science Teacher, May 2000. 2. Schwertmann, U. 1993. Relations Iron Oxides, Soil Color, Soil Formation. \"Soil Color\". SSSA Special Publication . 31, pages 51–69.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soil_minerals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Munsell Colors of Common Soil Minerals — soil_minerals","text":"","code":"if (FALSE) { # \\dontrun{  library(aqp) library(ape) library(cluster) library(farver)  # load common soil mineral colors data(soil_minerals)  # convert Munsell to R colors soil_minerals$col <- munsell2rgb(   soil_minerals$hue,    soil_minerals$value,   soil_minerals$chroma )  # make a grid for plotting n <- ceiling(sqrt(nrow(soil_minerals)))  # read from top-left to bottom-right g <- expand.grid(x=1:n, y=n:1)[1:nrow(soil_minerals),]  # convert Munsell -> sRGB -> LAB col.rgb <- munsell2rgb(   soil_minerals$hue,   soil_minerals$value,   soil_minerals$chroma,   return_triplets = TRUE )  # sRGB values expected to be in the range [0,255] col.rgb <- col.rgb * 255  # convert from sRGB -> CIE LAB col.lab <- convert_colour(   col.rgb , from = 'rgb',   to = 'lab', white_from = 'D65' )  # keep track of soil mineral names # in a way that will persist in a dist obj row.names(col.lab) <- soil_minerals$mineral  # perceptual distance via CIE dE00 d <- compare_colour(   from = col.lab,   to = col.lab,   from_space = 'lab',   to_space = 'lab',   white_from = 'D65',   method = 'CIE2000' )  # matrix -> dist d <- as.dist(d)  # divisive hierarchical clustering of LAB coordinates h <- as.hclust(diana(d)) p <- as.phylo(h)  # colors, in order based on clustering # starting from top-left min.cols <- rev(soil_minerals$col[h$order])  # mineral names, in order based on clustering # starting from top-left min.names <- rev(soil_minerals$mineral[h$order])  min.munsell <- rev(soil_minerals$color[h$order])  # plot grid of mineral names / colors layout(matrix(c(1, 2), nrow = 1), widths = c(1.25, 1))  par(mar = c(1, 0, 0, 1)) plot(g$x, g$y, pch = 15, cex = 12, axes = FALSE, xlab = '', ylab = '',      col = min.cols,       xlim = c(0.5, 5.5), ylim = c(1.5, 5.5) ) text(g$x, g$y, min.names, adj = c(0.45, 5.5), cex = 0.75, font = 2) text(g$x, g$y, min.munsell, col = invertLabelColor(min.cols), cex = 0.85, font = 2)  title(main = 'Common Soil Pigments', line = -1.75, cex.main = 2) mtext('U. Schwertmann, 1993. SSSA Special Publication no. 31, pages 51--69', side = 1,       cex = 0.75, line = -1.5)  # dendrogram + tip labels with mineral colors plot(p, cex = 0.85, label.offset = 5, font = 1) tiplabels(pch = 15, cex = 3, offset = 2, col = soil_minerals$col)  } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/soiltexture.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup tables for sand, silt, clay, texture class, and textural modifiers. — soiltexture","title":"Lookup tables for sand, silt, clay, texture class, and textural modifiers. — soiltexture","text":"list contains snapshot values generated using logic particle size estimator calculation NASIS, average values per texture class, average rock fragment values textural modifier.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/soiltexture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup tables for sand, silt, clay, texture class, and textural modifiers. — soiltexture","text":"","code":"data(soiltexture)"},{"path":"https://ncss-tech.github.io/aqp/reference/soiltexture.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lookup tables for sand, silt, clay, texture class, and textural modifiers. — soiltexture","text":"list 3 data frames. first named values contains values sand, silt clay texture class. second average values sand, silt clay per texture class. third fragvoltot low, rv high values texmod. list(\"clay\") clay percentage fine earth fraction, integer vector list(\"sand\") sand percentage fine earth fraction, integer vector list(\"silt\") silt percentage fine earth fraction, integer vector list(\"texcl\") texture class, character vector list(\"texmod\") textural modifiers, character vector","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp1.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Profile Data Example 1 — sp1","title":"Soil Profile Data Example 1 — sp1","text":"Soil profile data Pinnacles National Monument, CA.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil Profile Data Example 1 — sp1","text":"data frame 60 observations following 21 variables. group numeric vector id character vector top numeric vector bottom numeric vector bound_distinct character vector bound_topography character vector name character vector texture character vector prop numeric vector structure_grade character vector structure_size character vector structure_type character vector stickiness character vector plasticity character vector field_ph numeric vector hue character vector value numeric vector chroma numeric vector","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp1.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soil Profile Data Example 1 — sp1","text":"https://casoilresource.lawr.ucdavis.edu/","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Profile Data Example 1 — sp1","text":"","code":"data(sp1) # convert colors from Munsell to hex-encoded RGB sp1$soil_color <- with(sp1, munsell2rgb(hue, value, chroma))  # promote to SoilProfileCollection depths(sp1) <- id ~ top + bottom site(sp1) <- ~ group  # re-sample each profile into 1 cm (thick) depth slices # for the variables 'prop', 'name', 'soil_color' # result is a SoilProfileCollection object s <- dice(sp1, 0:25 ~ prop + name + soil_color) #> dropping horizons with invalid depth logic, see `metadata(x)$removed.horizons` #> filling gaps left by HzDepthLogicSubset  # plot, note slices plot(s)    # aggregate all profiles along 1 cm depth slices, # using data from column 'prop' s1 <- slab(sp1, fm= ~ prop) #> horizons with zero thickness have been omitted from results  # check median & IQR library(lattice) xyplot(top ~ p.q50 + p.q25 + p.q75, data=s1, type='S', horizontal=TRUE, col=1, lty=c(1,2,2), panel=panel.superpose, ylim=c(110,-5), asp=2)"},{"path":"https://ncss-tech.github.io/aqp/reference/sp2.html","id":null,"dir":"Reference","previous_headings":"","what":"Honcut Creek Soil Profile Data — sp2","title":"Honcut Creek Soil Profile Data — sp2","text":"collection 18 soil profiles, consisting select soil morphologic attributes, associated stratigraphic study conducted near Honcut Creek, California.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Honcut Creek Soil Profile Data — sp2","text":"data frame 154 observations following 21 variables. id profile id surface dated surface top horizon top cm bottom horizon bottom cm bound_distinct horizon lower boundary distinctness class bound_topography horizon lower boundary topography class name horizon name texture USDA soil texture class prop field-estimated clay content structure_grade soil structure grade structure_size soil structure size structure_type soil structure type stickiness stickiness plasticity plasticity field_ph field-measured pH hue Munsell hue value Munsell value chroma Munsell chroma r RGB red component g RGB green component b RGB blue component soil_color R-friendly encoding soil color","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Honcut Creek Soil Profile Data — sp2","text":"Busacca, Alan J.; Singer, Michael J.; Verosub, Kenneth L. 1989. Late Cenozoic stratigraphy Feather Yuba rivers area, California, section soil development mixed alluvium Honcut Creek. USGS Bulletin 1590-G.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Honcut Creek Soil Profile Data — sp2","text":"https://casoilresource.lawr.ucdavis.edu/","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Honcut Creek Soil Profile Data — sp2","text":"Dylan E. Beaudette","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Honcut Creek Soil Profile Data — sp2","text":"","code":"# keep examples from using more than 2 cores data.table::setDTthreads(Sys.getenv(\"OMP_THREAD_LIMIT\", unset = 2))  data(sp2)  # convert into SoilProfileCollection object depths(sp2) <- id ~ top + bottom  # transfer site-level data site(sp2) <- ~ surface  # generate a new plotting order, based on the dated surface each soil was described on p.order <- order(sp2$surface)  # plot par(mar=c(1,0,3,0)) plot(sp2, plot.order=p.order)   # setup multi-figure output par(mfrow=c(2,1), mar=c(0,0,1,0))  # truncate plot to 200 cm depth plot(sp2, plot.order=p.order, max.depth=200) abline(h=200, lty=2, lwd=2)  # compute numerical distances between profiles # based on select horizon-level properties, to a depth of 200 cm d <- NCSP(sp2, vars=c('prop','field_ph','hue'), maxDepth = 100, k = 0) #> Computing dissimilarity matrices from 18 profiles #>  [0.4 Mb] #> cache: 47 | slices: 100  # plot dendrogram with ape package: if(require(ape) & require(cluster)) { h <- diana(d) p <- as.phylo(as.hclust(h)) plot(p, cex=0.75, label.offset=0.01, font=1, direct='down', srt=90, adj=0.5, y.lim=c(-0.125, 0.5))  # add in the dated surface type via color tiplabels(col=as.numeric(sp2$surface), pch=15)  # based on distance matrix values, YMMV legend('topleft', legend=levels(sp2$surface), col=1:6, pch=15, bty='n', bg='white', cex=0.75) } #> Loading required package: ape #> Loading required package: cluster"},{"path":"https://ncss-tech.github.io/aqp/reference/sp3.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Profile Data Example 3 — sp3","title":"Soil Profile Data Example 3 — sp3","text":"Soil samples 10 soil profiles, taken Sierra Foothill Region California.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp3.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil Profile Data Example 3 — sp3","text":"data frame 46 observations following 15 variables. id soil id top horizon upper boundary (cm) bottom horizon lower boundary (cm) clay clay content cec CEC amonium acetate pH 7 ph pH 1:1 water-soil mixture tc total carbon percent hue Munsell hue (dry) value Munsell value (dry) chroma Munsell chroma (dry) mid horizon midpoint (cm) ln_tc natural log total carbon percent L color: l-coordinate, CIE-LAB colorspace (dry) color: -coordinate, CIE-LAB colorspace (dry) B color: b-coordinate, CIE-LAB colorspace (dry) name horizon name soil_color horizon color","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Profile Data Example 3 — sp3","text":"data collected support research funded Kearney Foundation Soil Science.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp3.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soil Profile Data Example 3 — sp3","text":"https://casoilresource.lawr.ucdavis.edu/","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Profile Data Example 3 — sp3","text":"","code":"## this example investigates the concept of a \"median profile\"  # required packages if (require(ape) & require(cluster)) {   data(sp3)    # generate a RGB version of soil colors   # and convert to HSV for aggregation   sp3$h <- NA   sp3$s <- NA   sp3$v <- NA   sp3.rgb <- with(sp3, munsell2rgb(hue, value, chroma, return_triplets = TRUE))    sp3[, c('h', 's', 'v')] <- t(with(sp3.rgb, rgb2hsv(r, g, b, maxColorValue = 1)))    # promote to SoilProfileCollection   depths(sp3) <- id ~ top + bottom    # aggregate across entire collection   a <- slab(sp3, fm = ~ clay + cec + ph + h + s + v, slab.structure = 10)    # check   str(a)    # convert back to wide format   library(data.table)    a.wide.q25 <- dcast(as.data.table(a), top + bottom ~ variable, value.var = c('p.q25'))   a.wide.q50 <- dcast(as.data.table(a), top + bottom ~ variable, value.var = c('p.q50'))   a.wide.q75 <- dcast(as.data.table(a), top + bottom ~ variable, value.var = c('p.q75'))    # add a new id for the 25th, 50th, and 75th percentile pedons   a.wide.q25$id <- 'Q25'   a.wide.q50$id <- 'Q50'   a.wide.q75$id <- 'Q75'    # combine original data with \"mean profile\"   vars <- c('top', 'bottom', 'id', 'clay', 'cec', 'ph', 'h', 's', 'v')   # make data.frame version of sp3   sp3.df <- as(sp3, 'data.frame')    sp3.grouped <- as.data.frame(rbind(as.data.table(horizons(sp3))[, .SD, .SDcol = vars],                                       a.wide.q25[, .SD, .SDcol = vars],                                      a.wide.q50[, .SD, .SDcol = vars],                                       a.wide.q75[, .SD, .SDcol = vars]))                                         # re-constitute the soil color from HSV triplets   # convert HSV back to standard R colors   sp3.grouped$soil_color <- with(sp3.grouped, hsv(h, s, v))    # give each horizon a name   sp3.grouped$name <- paste(     round(sp3.grouped$clay),     '/' ,     round(sp3.grouped$cec),     '/',     round(sp3.grouped$ph, 1)   )   # first promote to SoilProfileCollection depths(sp3.grouped) <- id ~ top + bottom  plot(sp3.grouped)  ## perform comparison, and convert to phylo class object ## D is rescaled to [0,] d <- NCSP(   sp3.grouped,   vars = c('clay', 'cec', 'ph'),   maxDepth = 100,   k = 0.01 )  h <- agnes(d, method = 'ward') p <- ladderize(as.phylo(as.hclust(h)))  # look at distance plot-- just the median profile plot_distance_graph(d, 12)  # similarity relative to median profile (profile #12) round(1 - (as.matrix(d)[12, ] / max(as.matrix(d)[12, ])), 2)  ## make dendrogram + soil profiles  # setup plot: note that D has a scale of [0,1] par(mar = c(1, 1, 1, 1)) p.plot <- plot(p,                cex = 0.8,                label.offset = 3,                direction = 'up',                y.lim = c(200, 0),                x.lim = c(1.25, length(sp3.grouped) + 1),                show.tip.label = FALSE)  # get the last plot geometry lastPP <- get(\"last_plot.phylo\", envir = ape::.PlotPhyloEnv)  # the original labels, and new (indexed) order of pedons in dendrogram d.labels <- attr(d, 'Labels')  new_order <- sapply(1:lastPP$Ntip,                     function(i)                       which(as.integer(lastPP$xx[1:lastPP$Ntip]) == i))  # plot the profiles, in the ordering defined by the dendrogram # with a couple fudge factors to make them fit plotSPC(   sp3.grouped,   color = \"soil_color\",   plot.order = new_order,   y.offset = max(lastPP$yy) + 10,   width = 0.1,   cex.names = 0.5,   add = TRUE ) } #> 'data.frame':\t72 obs. of  10 variables: #>  $ variable             : Factor w/ 6 levels \"clay\",\"cec\",\"ph\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ all.profiles         : num  1 1 1 1 1 1 1 1 1 1 ... #>  $ p.q5                 : num  6.55 6.39 6.39 6.39 6.39 ... #>  $ p.q25                : num  9.1 8.75 8.75 7.94 7.94 ... #>  $ p.q50                : num  14.3 14.5 14.5 15.7 15.9 ... #>  $ p.q75                : num  17.8 19.4 21.3 24.9 25.1 ... #>  $ p.q95                : num  21.7 32.3 32.3 51.4 51.4 ... #>  $ contributing_fraction: num  0.89 1 1 1 1 1 0.9 0.9 0.58 0.15 ... #>  $ top                  : int  0 10 20 30 40 50 60 70 80 90 ... #>  $ bottom               : int  10 20 30 40 50 60 70 80 90 100 ...  #> Computing dissimilarity matrices from 13 profiles #>  [0.3 Mb] #> cache: 40 | slices: 100"},{"path":"https://ncss-tech.github.io/aqp/reference/sp4.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Chemical Data from Serpentinitic Soils of California — sp4","title":"Soil Chemical Data from Serpentinitic Soils of California — sp4","text":"Soil Chemical Data Serpentinitic Soils California","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp4.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil Chemical Data from Serpentinitic Soils of California — sp4","text":"data frame 30 observations following 13 variables. id site name name horizon designation top horizon top boundary cm bottom horizon bottom boundary cm K exchangeable K c mol/kg Mg exchangeable Mg cmol/kg Ca exchangeable Ca cmol/kg CEC_7 cation exchange capacity (NH4OAc pH 7) ex_Ca_to_Mg extractable Ca:Mg ratio sand sand content weight percentage silt silt content weight percentage clay clay content weight percentage CF >2mm fraction volume percentage","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp4.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soil Chemical Data from Serpentinitic Soils of California — sp4","text":"https://www.soils.org/publications/sssaj/articles/73/6/2087","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp4.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Chemical Data from Serpentinitic Soils of California — sp4","text":"Selected soil physical chemical data (McGahan et al., 2009).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp4.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soil Chemical Data from Serpentinitic Soils of California — sp4","text":"McGahan, D.G., Southard, R.J, Claassen, V.P. 2009. Plant-Available Calcium Varies Widely Soils Serpentinite Landscapes. Soil Sci. Soc. . J. 73: 2087-2095.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp4.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Chemical Data from Serpentinitic Soils of California — sp4","text":"","code":"# load sample data set, a simple data.frame object with horizon-level data from 10 profiles library(aqp) data(sp4) str(sp4) #> 'data.frame':\t30 obs. of  13 variables: #>  $ id         : chr  \"colusa\" \"colusa\" \"colusa\" \"colusa\" ... #>  $ name       : chr  \"A\" \"ABt\" \"Bt1\" \"Bt2\" ... #>  $ top        : int  0 3 8 30 0 9 0 4 13 0 ... #>  $ bottom     : int  3 8 30 42 9 34 4 13 40 6 ... #>  $ K          : num  0.3 0.2 0.1 0.1 0.2 0.3 0.2 0.6 0.8 0.4 ... #>  $ Mg         : num  25.7 23.7 23.2 44.3 21.9 18.9 12.1 12.1 17.7 16.4 ... #>  $ Ca         : num  9 5.6 1.9 0.3 4.4 4.5 1.4 7 4.4 24.1 ... #>  $ CEC_7      : num  23 21.4 23.7 43 18.8 27.5 23.7 18 20 31.1 ... #>  $ ex_Ca_to_Mg: num  0.35 0.23 0.08 0.01 0.2 0.2 0.58 0.51 0.25 1.47 ... #>  $ sand       : int  46 42 40 27 54 49 43 36 27 43 ... #>  $ silt       : int  33 31 28 18 20 18 55 49 45 42 ... #>  $ clay       : int  21 27 32 55 25 34 3 15 27 15 ... #>  $ CF         : num  0.12 0.27 0.27 0.16 0.55 0.84 0.5 0.75 0.67 0.02 ... sp4$idbak <- sp4$id  # upgrade to SoilProfileCollection # 'id' is the name of the column containing the profile ID # 'top' is the name of the column containing horizon upper boundaries # 'bottom' is the name of the column containing horizon lower boundaries depths(sp4) <- id ~ top + bottom  # check it out class(sp4) # class name #> [1] \"SoilProfileCollection\" #> attr(,\"package\") #> [1] \"aqp\" str(sp4) # internal structure #> Formal class 'SoilProfileCollection' [package \"aqp\"] with 8 slots #>   ..@ idcol       : chr \"id\" #>   ..@ hzidcol     : chr \"hzID\" #>   ..@ depthcols   : chr [1:2] \"top\" \"bottom\" #>   ..@ metadata    :List of 6 #>   .. ..$ aqp_df_class    : chr \"data.frame\" #>   .. ..$ aqp_group_by    : chr \"\" #>   .. ..$ aqp_hzdesgn     : chr \"\" #>   .. ..$ aqp_hztexcl     : chr \"\" #>   .. ..$ depth_units     : chr \"cm\" #>   .. ..$ stringsAsFactors: logi FALSE #>   ..@ horizons    :'data.frame':\t30 obs. of  15 variables: #>   .. ..$ id         : chr [1:30] \"colusa\" \"colusa\" \"colusa\" \"colusa\" ... #>   .. ..$ name       : chr [1:30] \"A\" \"ABt\" \"Bt1\" \"Bt2\" ... #>   .. ..$ top        : int [1:30] 0 3 8 30 0 9 0 4 13 0 ... #>   .. ..$ bottom     : int [1:30] 3 8 30 42 9 34 4 13 40 3 ... #>   .. ..$ K          : num [1:30] 0.3 0.2 0.1 0.1 0.2 0.3 0.2 0.6 0.8 0.6 ... #>   .. ..$ Mg         : num [1:30] 25.7 23.7 23.2 44.3 21.9 18.9 12.1 12.1 17.7 28.3 ... #>   .. ..$ Ca         : num [1:30] 9 5.6 1.9 0.3 4.4 4.5 1.4 7 4.4 5.8 ... #>   .. ..$ CEC_7      : num [1:30] 23 21.4 23.7 43 18.8 27.5 23.7 18 20 29.3 ... #>   .. ..$ ex_Ca_to_Mg: num [1:30] 0.35 0.23 0.08 0.01 0.2 0.2 0.58 0.51 0.25 0.2 ... #>   .. ..$ sand       : int [1:30] 46 42 40 27 54 49 43 36 27 42 ... #>   .. ..$ silt       : int [1:30] 33 31 28 18 20 18 55 49 45 26 ... #>   .. ..$ clay       : int [1:30] 21 27 32 55 25 34 3 15 27 32 ... #>   .. ..$ CF         : num [1:30] 0.12 0.27 0.27 0.16 0.55 0.84 0.5 0.75 0.67 0.25 ... #>   .. ..$ idbak      : chr [1:30] \"colusa\" \"colusa\" \"colusa\" \"colusa\" ... #>   .. ..$ hzID       : chr [1:30] \"1\" \"2\" \"3\" \"4\" ... #>   ..@ site        :'data.frame':\t10 obs. of  1 variable: #>   .. ..$ id: chr [1:10] \"colusa\" \"glenn\" \"kings\" \"mariposa\" ... #>   ..@ diagnostic  :'data.frame':\t0 obs. of  0 variables #>   ..@ restrictions:'data.frame':\t0 obs. of  0 variables  # check integrity of site:horizon linkage spc_in_sync(sp4) #>   nSites relativeOrder valid #> 1   TRUE          TRUE  TRUE  # check horizon depth logic checkHzDepthLogic(sp4) #>                id valid depthLogic sameDepth missingDepth overlapOrGap #> 1          colusa  TRUE      FALSE     FALSE        FALSE        FALSE #> 2           glenn  TRUE      FALSE     FALSE        FALSE        FALSE #> 3           kings  TRUE      FALSE     FALSE        FALSE        FALSE #> 4        mariposa  TRUE      FALSE     FALSE        FALSE        FALSE #> 5       mendocino  TRUE      FALSE     FALSE        FALSE        FALSE #> 6            napa  TRUE      FALSE     FALSE        FALSE        FALSE #> 7      san benito  TRUE      FALSE     FALSE        FALSE        FALSE #> 8          shasta  TRUE      FALSE     FALSE        FALSE        FALSE #> 9  shasta-trinity  TRUE      FALSE     FALSE        FALSE        FALSE #> 10         tehama  TRUE      FALSE     FALSE        FALSE        FALSE  # inspect object properties idname(sp4) # self-explanitory #> [1] \"id\" horizonDepths(sp4) # self-explanitory #> [1] \"top\"    \"bottom\"  # you can change these: depth_units(sp4) # defaults to 'cm' #> [1] \"cm\" metadata(sp4) # not much to start with #> $aqp_df_class #> [1] \"data.frame\" #>  #> $aqp_group_by #> [1] \"\" #>  #> $aqp_hzdesgn #> [1] \"\" #>  #> $aqp_hztexcl #> [1] \"\" #>  #> $depth_units #> [1] \"cm\" #>  #> $stringsAsFactors #> [1] FALSE #>   # alter the depth unit metadata depth_units(sp4) <- 'inches' # units are really 'cm'  # more generic interface for adjusting metadata  # add attributes to metadata list metadata(sp4)$describer <- 'DGM' metadata(sp4)$date <- as.Date('2009-01-01') metadata(sp4)$citation <- 'McGahan, D.G., Southard, R.J, Claassen, V.P. 2009. Plant-Available Calcium Varies Widely in Soils on Serpentinite Landscapes. Soil Sci. Soc. Am. J. 73: 2087-2095.'  depth_units(sp4) <- 'cm' # fix depth units, back to 'cm'  # further inspection with common function overloads length(sp4) # number of profiles in the collection #> [1] 10 nrow(sp4) # number of horizons in the collection #> [1] 30 names(sp4) # column names #>     horizons1     horizons2     horizons3     horizons4     horizons5  #>          \"id\"        \"name\"         \"top\"      \"bottom\"           \"K\"  #>     horizons6     horizons7     horizons8     horizons9    horizons10  #>          \"Mg\"          \"Ca\"       \"CEC_7\" \"ex_Ca_to_Mg\"        \"sand\"  #>    horizons11    horizons12    horizons13    horizons14    horizons15  #>        \"silt\"        \"clay\"          \"CF\"       \"idbak\"        \"hzID\"  min(sp4) # shallowest profile depth in collection #> [1] 16 max(sp4) # deepest profile depth in collection #> [1] 49  # extraction of soil profile components profile_id(sp4) # vector of profile IDs #>  [1] \"colusa\"         \"glenn\"          \"kings\"          \"mariposa\"       #>  [5] \"mendocino\"      \"napa\"           \"san benito\"     \"shasta\"         #>  [9] \"shasta-trinity\" \"tehama\"         horizons(sp4) # horizon data #>                id name top bottom   K   Mg   Ca CEC_7 ex_Ca_to_Mg sand silt #> 1          colusa    A   0      3 0.3 25.7  9.0  23.0        0.35   46   33 #> 2          colusa  ABt   3      8 0.2 23.7  5.6  21.4        0.23   42   31 #> 3          colusa  Bt1   8     30 0.1 23.2  1.9  23.7        0.08   40   28 #> 4          colusa  Bt2  30     42 0.1 44.3  0.3  43.0        0.01   27   18 #> 5           glenn    A   0      9 0.2 21.9  4.4  18.8        0.20   54   20 #> 6           glenn   Bt   9     34 0.3 18.9  4.5  27.5        0.20   49   18 #> 7           kings    A   0      4 0.2 12.1  1.4  23.7        0.58   43   55 #> 8           kings  Bt1   4     13 0.6 12.1  7.0  18.0        0.51   36   49 #> 9           kings  Bt2  13     40 0.8 17.7  4.4  20.0        0.25   27   45 #> 10       mariposa    A   0      3 0.6 28.3  5.8  29.3        0.20   42   26 #> 11       mariposa  Bt1   3     14 0.4 33.7  6.2  27.9        0.18   41   34 #> 12       mariposa  Bt2  14     34 0.3 44.3  6.2  34.1        0.14   36   33 #> 13       mariposa  Bt3  34     49 0.1 78.2  4.4  43.6        0.06   36   31 #> 14      mendocino    A   0      2 0.5 12.8  2.2  19.3        0.18   57   30 #> 15      mendocino  Bt1   2      8 0.2 27.1  3.4  19.8        0.13   51   28 #> 16      mendocino  Bt2   8     30 0.2 30.5  3.7  22.9        0.12   51   26 #> 17           napa    A   0      6 0.4 16.4 24.1  31.1        1.47   43   42 #> 18           napa   Bt   6     20 0.1 16.2 21.5  27.9        1.32   54   29 #> 19     san benito    A   0      8  NA  3.0  0.7   3.1        0.24   80    8 #> 20     san benito   Bt   8     20 0.0  0.1  5.6   5.6        0.11   74    7 #> 21         shasta    A   0      3 0.3  9.7  3.5  13.2        0.36   37   49 #> 22         shasta   Bt   3     40 0.2 10.1  2.0  12.2        0.20   39   46 #> 23 shasta-trinity   A1   0      2 0.2 18.8  6.6  23.0        0.35   34   44 #> 24 shasta-trinity   A2   2      5 0.2 25.5  4.1  21.5        0.16   33   42 #> 25 shasta-trinity   AB   5     12 0.3 29.3  3.5  29.6        0.12   24   36 #> 26 shasta-trinity  Bt1  12     23 0.2 30.3  1.5  26.5        0.05   20   29 #> 27 shasta-trinity  Bt2  23     40 0.1 64.9  0.8  48.7        0.01   11   22 #> 28         tehama    A   0      3 0.4 12.4 16.3  40.2        1.31   57   19 #> 29         tehama  Bt1   3      7 0.5 20.2 16.5  32.7        0.82   55   20 #> 30         tehama  Bt2   7     16 0.2 27.7 13.7  30.0        0.50   51   17 #>    clay   CF          idbak hzID #> 1    21 0.12         colusa    1 #> 2    27 0.27         colusa    2 #> 3    32 0.27         colusa    3 #> 4    55 0.16         colusa    4 #> 5    25 0.55          glenn    5 #> 6    34 0.84          glenn    6 #> 7     3 0.50          kings    7 #> 8    15 0.75          kings    8 #> 9    27 0.67          kings    9 #> 10   32 0.25       mariposa   10 #> 11   25 0.38       mariposa   11 #> 12   31 0.71       mariposa   12 #> 13   33 0.67       mariposa   13 #> 14   13 0.16      mendocino   14 #> 15   21 0.14      mendocino   15 #> 16   23 0.80      mendocino   16 #> 17   15 0.02           napa   17 #> 18   17 0.07           napa   18 #> 19   12 0.43     san benito   19 #> 20   19 0.60     san benito   20 #> 21   14 0.78         shasta   21 #> 22   14 0.88         shasta   22 #> 23   22 0.17 shasta-trinity   23 #> 24   25 0.13 shasta-trinity   24 #> 25   40 0.09 shasta-trinity   25 #> 26   51 0.05 shasta-trinity   26 #> 27   67 0.05 shasta-trinity   27 #> 28   24 0.43         tehama   28 #> 29   25 0.10         tehama   29 #> 30   32 0.34         tehama   30  # extraction of specific horizon attributes sp4$clay # vector of clay content #>  [1] 21 27 32 55 25 34  3 15 27 32 25 31 33 13 21 23 15 17 12 19 14 14 22 25 40 #> [26] 51 67 24 25 32  # subsetting SoilProfileCollection objects sp4[1, ] # first profile in the collection #> SoilProfileCollection with 1 profiles and 4 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 42 - 42 cm #>  #> ----- Horizons (4 / 4 rows  |  10 / 15 columns) ----- #>      id hzID top bottom name   K   Mg  Ca CEC_7 ex_Ca_to_Mg #>  colusa    1   0      3    A 0.3 25.7 9.0  23.0        0.35 #>  colusa    2   3      8  ABt 0.2 23.7 5.6  21.4        0.23 #>  colusa    3   8     30  Bt1 0.1 23.2 1.9  23.7        0.08 #>  colusa    4  30     42  Bt2 0.1 44.3 0.3  43.0        0.01 #>  #> ----- Sites (1 / 1 rows  |  1 / 1 columns) ----- #>      id #>  colusa #>  #> Spatial Data: #> [EMPTY] sp4[, 1] # first horizon from each profile #> SoilProfileCollection with 10 profiles and 10 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 2 - 9 cm #>  #> ----- Horizons (6 / 10 rows  |  10 / 15 columns) ----- #>         id hzID top bottom name   K   Mg   Ca CEC_7 ex_Ca_to_Mg #>     colusa    1   0      3    A 0.3 25.7  9.0  23.0        0.35 #>      glenn    5   0      9    A 0.2 21.9  4.4  18.8        0.20 #>      kings    7   0      4    A 0.2 12.1  1.4  23.7        0.58 #>   mariposa   10   0      3    A 0.6 28.3  5.8  29.3        0.20 #>  mendocino   14   0      2    A 0.5 12.8  2.2  19.3        0.18 #>       napa   17   0      6    A 0.4 16.4 24.1  31.1        1.47 #> [... more horizons ...] #>  #> ----- Sites (6 / 10 rows  |  1 / 1 columns) ----- #>         id #>     colusa #>      glenn #>      kings #>   mariposa #>  mendocino #>       napa #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY]  # basic plot method, highly customizable: see manual page ?plotSPC plot(sp4) # inspect plotting area, very simple to overlay graphical elements abline(v=1:length(sp4), lty=3, col='blue') # profiles are centered at integers, from 1 to length(obj) axis(1, line=-1.5, at=1:10, cex.axis=0.75, font=4, col='blue', lwd=2) # y-axis is based on profile depths axis(2, line=-1, at=pretty(1:max(sp4)), cex.axis=0.75, font=4, las=1, col='blue', lwd=2)    # symbolize soil properties via color par(mar=c(0,0,4,0)) plot(sp4, color='clay')  plot(sp4, color='CF')   # apply a function to each profile, returning a single value per profile, # in the same order as profile_id(sp4) soil.depths <- profileApply(sp4, max) # recall that max() gives the depth of a soil profile  # check that the order is correct all.equal(names(soil.depths), profile_id(sp4)) #> [1] TRUE  # a vector of values that is the same length as the number of profiles # can be stored into site-level data sp4$depth <- soil.depths # check: looks good max(sp4[1, ]) == sp4$depth[1] #> [1] TRUE  # extract site-level data site(sp4) # as a data.frame #>                id depth #> 1          colusa    42 #> 2           glenn    34 #> 3           kings    40 #> 4        mariposa    49 #> 5       mendocino    30 #> 6            napa    20 #> 7      san benito    20 #> 8          shasta    40 #> 9  shasta-trinity    40 #> 10         tehama    16 sp4$depth # specific columns as a vector #>  [1] 42 34 40 49 30 20 20 40 40 16  # use site-level data to alter plotting order new.order <- order(sp4$depth) # the result is an index of rank par(mar=c(0,0,0,0)) plot(sp4, plot.order=new.order)   # deconstruct SoilProfileCollection into a data.frame, with horizon+site data as(sp4, 'data.frame') #>                id name top bottom   K   Mg   Ca CEC_7 ex_Ca_to_Mg sand silt #> 1          colusa    A   0      3 0.3 25.7  9.0  23.0        0.35   46   33 #> 2          colusa  ABt   3      8 0.2 23.7  5.6  21.4        0.23   42   31 #> 3          colusa  Bt1   8     30 0.1 23.2  1.9  23.7        0.08   40   28 #> 4          colusa  Bt2  30     42 0.1 44.3  0.3  43.0        0.01   27   18 #> 5           glenn    A   0      9 0.2 21.9  4.4  18.8        0.20   54   20 #> 6           glenn   Bt   9     34 0.3 18.9  4.5  27.5        0.20   49   18 #> 7           kings    A   0      4 0.2 12.1  1.4  23.7        0.58   43   55 #> 8           kings  Bt1   4     13 0.6 12.1  7.0  18.0        0.51   36   49 #> 9           kings  Bt2  13     40 0.8 17.7  4.4  20.0        0.25   27   45 #> 10       mariposa    A   0      3 0.6 28.3  5.8  29.3        0.20   42   26 #> 11       mariposa  Bt1   3     14 0.4 33.7  6.2  27.9        0.18   41   34 #> 12       mariposa  Bt2  14     34 0.3 44.3  6.2  34.1        0.14   36   33 #> 13       mariposa  Bt3  34     49 0.1 78.2  4.4  43.6        0.06   36   31 #> 14      mendocino    A   0      2 0.5 12.8  2.2  19.3        0.18   57   30 #> 15      mendocino  Bt1   2      8 0.2 27.1  3.4  19.8        0.13   51   28 #> 16      mendocino  Bt2   8     30 0.2 30.5  3.7  22.9        0.12   51   26 #> 17           napa    A   0      6 0.4 16.4 24.1  31.1        1.47   43   42 #> 18           napa   Bt   6     20 0.1 16.2 21.5  27.9        1.32   54   29 #> 19     san benito    A   0      8  NA  3.0  0.7   3.1        0.24   80    8 #> 20     san benito   Bt   8     20 0.0  0.1  5.6   5.6        0.11   74    7 #> 21         shasta    A   0      3 0.3  9.7  3.5  13.2        0.36   37   49 #> 22         shasta   Bt   3     40 0.2 10.1  2.0  12.2        0.20   39   46 #> 23 shasta-trinity   A1   0      2 0.2 18.8  6.6  23.0        0.35   34   44 #> 24 shasta-trinity   A2   2      5 0.2 25.5  4.1  21.5        0.16   33   42 #> 25 shasta-trinity   AB   5     12 0.3 29.3  3.5  29.6        0.12   24   36 #> 26 shasta-trinity  Bt1  12     23 0.2 30.3  1.5  26.5        0.05   20   29 #> 27 shasta-trinity  Bt2  23     40 0.1 64.9  0.8  48.7        0.01   11   22 #> 28         tehama    A   0      3 0.4 12.4 16.3  40.2        1.31   57   19 #> 29         tehama  Bt1   3      7 0.5 20.2 16.5  32.7        0.82   55   20 #> 30         tehama  Bt2   7     16 0.2 27.7 13.7  30.0        0.50   51   17 #>    clay   CF          idbak hzID depth #> 1    21 0.12         colusa    1    42 #> 2    27 0.27         colusa    2    42 #> 3    32 0.27         colusa    3    42 #> 4    55 0.16         colusa    4    42 #> 5    25 0.55          glenn    5    34 #> 6    34 0.84          glenn    6    34 #> 7     3 0.50          kings    7    40 #> 8    15 0.75          kings    8    40 #> 9    27 0.67          kings    9    40 #> 10   32 0.25       mariposa   10    49 #> 11   25 0.38       mariposa   11    49 #> 12   31 0.71       mariposa   12    49 #> 13   33 0.67       mariposa   13    49 #> 14   13 0.16      mendocino   14    30 #> 15   21 0.14      mendocino   15    30 #> 16   23 0.80      mendocino   16    30 #> 17   15 0.02           napa   17    20 #> 18   17 0.07           napa   18    20 #> 19   12 0.43     san benito   19    20 #> 20   19 0.60     san benito   20    20 #> 21   14 0.78         shasta   21    40 #> 22   14 0.88         shasta   22    40 #> 23   22 0.17 shasta-trinity   23    40 #> 24   25 0.13 shasta-trinity   24    40 #> 25   40 0.09 shasta-trinity   25    40 #> 26   51 0.05 shasta-trinity   26    40 #> 27   67 0.05 shasta-trinity   27    40 #> 28   24 0.43         tehama   28    16 #> 29   25 0.10         tehama   29    16 #> 30   32 0.34         tehama   30    16"},{"path":"https://ncss-tech.github.io/aqp/reference/sp5.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Soil Database #5 — sp5","title":"Sample Soil Database #5 — sp5","text":"296 Soil Profiles La Rochelle region France (F. Carre Girard, 2002)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp5.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample Soil Database #5 — sp5","text":"SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp5.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample Soil Database #5 — sp5","text":"296 Soil Profiles La Rochelle region France (F. Carre Girard, 2002). data can found OSACA project page (http://eusoils.jrc.ec.europa.eu/projects/OSACA/).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp5.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample Soil Database #5 — sp5","text":"data c/o F. Carre (Florence.CARRE@ineris.fr).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp5.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample Soil Database #5 — sp5","text":"F. Carre, M.C. Girard. 2002. Quantitative mapping soil types based regression kriging taxonomic distances landform land cover attributes. Geoderma. 110: 241–263.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample Soil Database #5 — sp5","text":"","code":"if (FALSE) { # \\dontrun{ library(scales) data(sp5) par(mar=c(1,1,1,1)) # plot a random sampling of profiles s <- sample(1:length(sp5), size=25) plot(sp5[s, ], divide.hz=FALSE)  # plot the first 100 profiles, as 4 rows of 25, hard-coding the max depth layout(matrix(c(1,2,3,4), ncol=1), height=c(0.25,0.25,0.25,0.25)) plot(sp5[1:25, ], max.depth=300) plot(sp5[26:50, ], max.depth=300) plot(sp5[51:75, ], max.depth=300) plot(sp5[76:100, ], max.depth=300)   # 4x1 matrix of plotting areas layout(matrix(c(1,2,3,4), ncol=1), height=c(0.25,0.25,0.25,0.25))  # plot profiles, with points added to the mid-points of randomly selected horizons sub <- sp5[1:25, ] plot(sub, max.depth=300) ; mtext('Set 1', 2, line=-0.5, font=2) y.p <- profileApply(sub, function(x) {   s <- sample(1:nrow(x), 1)   h <- horizons(x); with(h[s,], (top+bottom)/2)   }) points(1:25, y.p, bg='white', pch=21)  # plot profiles, with arrows pointing to profile bottoms sub <- sp5[26:50, ] plot(sub, max.depth=300); mtext('Set 2', 2, line=-0.5, font=2) y.a <- profileApply(sub, function(x) max(x)) arrows(1:25, y.a-50, 1:25, y.a, len=0.1, col='white')  # plot profiles, with points connected by lines: ideally reflecting some kind of measured data sub <- sp5[51:75, ] plot(sub, max.depth=300); mtext('Set 3', 2, line=-0.5, font=2) y.p <- 20*(sin(1:25) + 2*cos(1:25) + 5) points(1:25, y.p, bg='white', pch=21) lines(1:25, y.p, lty=2)  # plot profiles, with polygons connecting horizons with max clay content (+/-) 10 cm sub <- sp5[76:100, ] y.clay.max <- profileApply(sub, function(x) {   i <- which.max(x$clay)   h <- horizons(x)   with(h[i, ], (top+bottom)/2)   } )  plot(sub, max.depth=300); mtext('Set 4', 2, line=-0.5, font=2) polygon(c(1:25, 25:1), c(y.clay.max-10, rev(y.clay.max+10)), border='black', col=rgb(0,0,0.8, alpha=0.25)) points(1:25, y.clay.max, pch=21, bg='white')  # close plot dev.off()   # plotting parameters yo <- 100 # y-offset sf <- 0.65 # scaling factor # plot profile sketches par(mar=c(0,0,0,0)) plot(sp5[1:25, ], max.depth=300, y.offset=yo, scaling.factor=sf) # optionally add describe plotting area above profiles with lines # abline(h=c(0,90,100, (300*sf)+yo), lty=2) # simulate an environmental variable associated with profiles (elevation, etc.) r <- vector(mode='numeric', length=25) r[1] <- -50 ; for(i in 2:25) {r[i] <- r[i-1] + rnorm(mean=-1, sd=25, n=1)} # rescale r <- rescale(r, to=c(80, 0)) # illustrate gradient with points/lines/arrows lines(1:25, r) points(1:25, r, pch=16) arrows(1:25, r, 1:25, 95, len=0.1) # add scale for simulated gradient axis(2, at=pretty(0:80), labels=rev(pretty(0:80)), line=-1, cex.axis=0.75, las=2) # depict a secondary environmental gradient with polygons (water table depth, etc.) polygon(c(1:25, 25:1), c((100-r)+150, rep((300*sf)+yo, times=25)), border='black', col=rgb(0,0,0.8, alpha=0.25))  } # }"},{"path":"https://ncss-tech.github.io/aqp/reference/sp6.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Physical and Chemical Data from Manganiferous Soils — sp6","title":"Soil Physical and Chemical Data from Manganiferous Soils — sp6","text":"Soil Physical Chemical Data Manganiferous Soils (Bourgault Rabenhorst, 2011)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp6.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Soil Physical and Chemical Data from Manganiferous Soils — sp6","text":"data frame 30 observations following 13 variables. id pedon name name horizon designation top horizon top boundary cm bottom horizon bottom boundary cm color moist soil color Munsell notation texture USDA soil texture class sand sand content weight percentage silt silt content weight percentage clay clay content weight percentage Fe DCB-extracted Fe g/kg (see citation) Mn DCB-extracted Mn g/kg (see citation) C total organic carbon g/kg pH measured 1:1 H20 slurry Db bulk density (g/cc), clod method","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp6.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Soil Physical and Chemical Data from Manganiferous Soils — sp6","text":"http://www.sciencedirect.com/science/article/pii/S0016706111001972","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp6.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Soil Physical and Chemical Data from Manganiferous Soils — sp6","text":"Selected soil physical chemical data (Bourgault Rabenhorst, 2011).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp6.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Soil Physical and Chemical Data from Manganiferous Soils — sp6","text":"Rebecca R. Bourgault, Martin C. Rabenhorst. 2011.  Genesis characterization manganiferous soils Eastern Piedmont, USA. Geoderma. 165:84-94.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/sp6.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Physical and Chemical Data from Manganiferous Soils — sp6","text":"","code":"# setup environment   library(aqp)   data(sp6)    # init SPC   depths(sp6) <- id ~ top + bottom   # convert non-standard Munsell colors   sp6$soil_color <- getClosestMunsellChip(sp6$color)    # profile sketches   par(mar=c(0,0,3,0))   plot(sp6, color='soil_color') #> [A-1:12] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()    plot(sp6, color='Mn') #> [A-1:12] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()    plot(sp6, color='Fe') #> [A-1:12] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()    plot(sp6, color='pH') #> [A-1:12] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()    plot(sp6, color='texture') #> [A-1:12] horizon with top == bottom, cannot fix horizon depth overlap #>  consider using repairMissingHzDepths()"},{"path":"https://ncss-tech.github.io/aqp/reference/spc2mpspline-SoilProfileCollection-method.html","id":null,"dir":"Reference","previous_headings":"","what":"SoilProfileCollection wrapper for mpspline2::mpspline() — spc2mpspline,SoilProfileCollection-method","title":"SoilProfileCollection wrapper for mpspline2::mpspline() — spc2mpspline,SoilProfileCollection-method","text":"Generate mass-preserving splines numeric attribute SoilProfileCollection using mpspline2::mpspline(). mpspline2 implements method described Bishop et al. (1999). Currently function works single var_name time.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc2mpspline-SoilProfileCollection-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SoilProfileCollection wrapper for mpspline2::mpspline() — spc2mpspline,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' spc2mpspline(   object,   var_name = NULL,   method = c(\"est_1cm\", \"est_icm\", \"est_dcm\"),   pattern = \"R|Cr|Cd|qm\",   hzdesgn = NULL,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/spc2mpspline-SoilProfileCollection-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SoilProfileCollection wrapper for mpspline2::mpspline() — spc2mpspline,SoilProfileCollection-method","text":"object SoilProfileCollection var_name Column name @horizons slot object containing numeric values spline method Options include \"est_1cm\" (default; 1cm estimates), \"est_icm\" (estimates original layer boundaries), \"est_dcm\" (estimates constant interval, specified d argument mpspline3::mpspline()). Default value d c(0, 5, 15, 30, 60, 100, 200). pattern Regex pattern match bottom profile (passed minDepthOf()) default: \"R|Cr|Cd|qm\"; used hzdesgn specified hzdesgn Column name @horizons slot object containing horizon designations default: NULL ... Additional arguments mpspline2::mpspline()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc2mpspline-SoilProfileCollection-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SoilProfileCollection wrapper for mpspline2::mpspline() — spc2mpspline,SoilProfileCollection-method","text":"SoilProfileCollection 1cm slices. Spline variables columns prefixed \"spline_\" RMSE/RMSE_IQR columns prefixed \"rmse_\". profiles removed collection, profile IDs stored attr(result, 'removed').","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc2mpspline-SoilProfileCollection-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"SoilProfileCollection wrapper for mpspline2::mpspline() — spc2mpspline,SoilProfileCollection-method","text":"function now relies missing data checks provided mpspline2 package. See attr(..., 'removed') see whole profiles removed set. Horizons containing NA property interest dropped message. Data completeness assessed input SoilProfileCollection filtered truncated create container results mpspline2::mpspline().","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc2mpspline-SoilProfileCollection-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SoilProfileCollection wrapper for mpspline2::mpspline() — spc2mpspline,SoilProfileCollection-method","text":"Bishop, T.F.., McBratney, .B., Laslett, G.M. (1999) Modelling soil attribute depth functions equal-area quadratic smoothing splines. Geoderma 91(1–2), pp. 27-45. doi:10.1016/S0016-7061(99)00003-8 O'Brien, Lauren (2022). mpspline2: Mass-Preserving Spline Functions Soil Data. R package version 0.1.6. https://cran.r-project.org/package=mpspline2","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc2mpspline-SoilProfileCollection-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"SoilProfileCollection wrapper for mpspline2::mpspline() — spc2mpspline,SoilProfileCollection-method","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc2mpspline-SoilProfileCollection-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SoilProfileCollection wrapper for mpspline2::mpspline() — spc2mpspline,SoilProfileCollection-method","text":"","code":"if (requireNamespace(\"mpspline2\")) {   data(sp1)   depths(sp1) <- id ~ top + bottom    res <- spc2mpspline(sp1, \"prop\")    plotSPC(res[1:5,], color = \"prop_spline\", divide.hz = FALSE) }"},{"path":"https://ncss-tech.github.io/aqp/reference/spc_in_sync.html","id":null,"dir":"Reference","previous_headings":"","what":"Quickly assess relative state of site and horizon slots — spc_in_sync","title":"Quickly assess relative state of site and horizon slots — spc_in_sync","text":"Determine \"state\" SoilProfileCollection major modifications site horizon slot contents. Two logical checks performed site horizon tables, third element valid returns TRUE checks TRUE. Check 1: number sites site number sites horizons. intermingling IDs, orphan horizons, sites without horizons (now) Check 2: Site IDs match coalesced profile ID horizons. Ensures relative ordering, horizons still may order within profiles","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc_in_sync.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quickly assess relative state of site and horizon slots — spc_in_sync","text":"","code":"spc_in_sync(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/spc_in_sync.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quickly assess relative state of site and horizon slots — spc_in_sync","text":"object SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc_in_sync.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quickly assess relative state of site and horizon slots — spc_in_sync","text":"data.frame","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc_in_sync.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quickly assess relative state of site and horizon slots — spc_in_sync","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spc_in_sync.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quickly assess relative state of site and horizon slots — spc_in_sync","text":"","code":"data(sp5)  spc_in_sync(sp5) #>   nSites relativeOrder valid #> 1   TRUE          TRUE  TRUE"},{"path":"https://ncss-tech.github.io/aqp/reference/spec2Munsell.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert reflectance spectra to closest Munsell chip — spec2Munsell","title":"Convert reflectance spectra to closest Munsell chip — spec2Munsell","text":"Convert reflectance spectra closest Munsell chip","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spec2Munsell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert reflectance spectra to closest Munsell chip — spec2Munsell","text":"","code":"spec2Munsell(   x,   res = 10,   convert = TRUE,   SO = c(\"CIE1931\", \"CIE1964\"),   illuminant = c(\"D65\", \"F2\"),   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/spec2Munsell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert reflectance spectra to closest Munsell chip — spec2Munsell","text":"x reflectance spectra, must range 380nm 730nm resolution specified res res spectra resolution nm, typically 5nm 10nm convert logical, convert sRGB coordinates closest Munsell chip (see ?munsell) CIE standard observer: color matching functions defined CIE used represent \"average\" human color perception. CIE1931 2 degree standard observer useful describing color perception small areas distance. CIE1964 10 degree standard observer, used industrial color matching applications. illuminant CIE standard illuminants: D65 represents average daylight F2 represents typical fluorescent lighting ... arguments col2Munsell()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spec2Munsell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert reflectance spectra to closest Munsell chip — spec2Munsell","text":"output col2Munsell()","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spec2Munsell.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert reflectance spectra to closest Munsell chip — spec2Munsell","text":"See expanded tutorial additional examples.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spec2Munsell.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Convert reflectance spectra to closest Munsell chip — spec2Munsell","text":"Marcus, R.T. (1998). Measurement Color. K. Nassau (Ed.), Color Science, Art, Technology (pp. 32-96). North-Holland. CIE Colorimetry – Part 1: CIE standard colorimetric observers. CIES014-1/E:2006 – ISO 11664-1:2007(E) CIE. (n.d.). CIE 15:2004 Tables Data. Retrieved https://law.resource.org/pub/us/cfr/ibr/003/cie.15.2004.tables.xls","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spectral.reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Illuminants and Observers — spectral.reference","title":"Standard Illuminants and Observers — spectral.reference","text":"D65 F2 standard illuminant spectral power distributions, CIE1931 Standard Observer (2 degree), CIE1964 Supplemental Standard Observer (10 degree)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spectral.reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard Illuminants and Observers — spectral.reference","text":"","code":"data(spectral.reference)"},{"path":"https://ncss-tech.github.io/aqp/reference/spectral.reference.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Standard Illuminants and Observers — spectral.reference","text":"object class data.frame 71 rows 9 columns.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spectral.reference.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standard Illuminants and Observers — spectral.reference","text":"Marcus, R.T. (1998). Measurement Color. K. Nassau (Ed.), Color Science, Art, Technology (pp. 32-96). North-Holland. CIE Colorimetry – Part 1: CIE standard colorimetric observers. CIES014-1/E:2006 – ISO 11664-1:2007(E) CIE. (n.d.). CIE 15:2004 Tables Data. Retrieved https://law.resource.org/pub/us/cfr/ibr/003/cie.15.2004.tables.xls","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/spectral.reference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard Illuminants and Observers — spectral.reference","text":"","code":"data(\"spectral.reference\")  matplot(   x = spectral.reference[, 1],   y = spectral.reference[, c('xbar_2', 'ybar_2', 'zbar_2')],   ylim = c(0, 2),   type = 'l',   lwd = 2,    lty = 1,   las = 1,   xlab = 'Wavelength (nm)',   ylab = 'Weight | Intensity',   main = \"CIE1931 (2\\u00B0) and CIE1964 (10\\u00B0) Standard Observers   D65 and F2 Illuminant Power Spectrum (rescaled / offset for clarity)\",   cex.main = 0.9 )  matlines(   x = spectral.reference[, 1],   y = spectral.reference[, c('xbar_10', 'ybar_10', 'zbar_10')],   type = 'l',   lwd = 2,    lty = 2,   las = 1,   xlab = 'Wavelength (nm)',   ylab = 'Weight | Intensity',   main = 'CIE1931 Standard Observer Weights\\nD65 Standard Illuminant' )  lines(   x = spectral.reference$w,   y = (spectral.reference$D65 / 100) + 0.33,   lty = 1,   col = 'royalblue' )  lines(   x = spectral.reference$w,   y = (spectral.reference$F2 / 25) + 0.4,   lty = 1,   col = 'violet' )  legend(   'topright',   legend = c('X_2', 'Y_2', 'Z_2', 'X_10', 'Y_10', 'Z_10', 'D65', 'F2'),   col = c(1, 2, 3, 1, 2, 3, 'royalblue', 'violet'),   lwd = c(2, 2, 2, 2, 2, 2, 1, 1),   lty = c(1, 1, 1, 2, 2, 2, 1, 1),   bty = 'n',   cex = 0.85 )"},{"path":"https://ncss-tech.github.io/aqp/reference/split-SoilProfileCollection-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a SoilProfileCollection object into a list of SoilProfileCollection objects. — split,SoilProfileCollection-method","title":"Split a SoilProfileCollection object into a list of SoilProfileCollection objects. — split,SoilProfileCollection-method","text":"function splits SoilProfileCollection list SoilProfileCollection objects using site-level attribute define groups profile ID (idname(x)).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/split-SoilProfileCollection-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a SoilProfileCollection object into a list of SoilProfileCollection objects. — split,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' split(x, f, drop = TRUE, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/split-SoilProfileCollection-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a SoilProfileCollection object into a list of SoilProfileCollection objects. — split,SoilProfileCollection-method","text":"x SoilProfileCollection object f character vector naming single site-level attribute defines groups, ‘factor’ sense .factor(f) defines grouping, list factors case interaction used grouping. drop logical indicating levels occur dropped (f factor list). drop=FALSE f contains missing values additional group \"missing\" returned. ... additional arguments ignored","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/split-SoilProfileCollection-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a SoilProfileCollection object into a list of SoilProfileCollection objects. — split,SoilProfileCollection-method","text":"list SoilProfileCollection NULL empty result.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/split-SoilProfileCollection-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split a SoilProfileCollection object into a list of SoilProfileCollection objects. — split,SoilProfileCollection-method","text":"aqp 1.25, omission f argument longer possible, base R generic overloaded SoilProfileCollection method. used result \"identity\" split, according idname(x), e.g. list long length(x), single-profile SoilProfileCollection per list element. Replicate behavior using f = idname(x) f = profile_id(x).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/split-SoilProfileCollection-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Split a SoilProfileCollection object into a list of SoilProfileCollection objects. — split,SoilProfileCollection-method","text":"D.E. Beaudette .G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/split-SoilProfileCollection-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a SoilProfileCollection object into a list of SoilProfileCollection objects. — split,SoilProfileCollection-method","text":"","code":"data(sp2) depths(sp2) <- id ~ top + bottom  # add a more interesting site-level attribute site(sp2) <- ~ surface  # using identity site-level attribute (profile ID) p1 <- split(sp2, f = idname(sp2)) #> converting id to factor names(p1) #>  [1] \"hon-1\"  \"hon-10\" \"hon-11\" \"hon-13\" \"hon-14\" \"hon-17\" \"hon-18\" \"hon-19\" #>  [9] \"hon-2\"  \"hon-20\" \"hon-21\" \"hon-22\" \"hon-3\"  \"hon-4\"  \"hon-5\"  \"hon-6\"  #> [17] \"hon-7\"  \"hon-8\"  length(p1) #> [1] 18  # using vector equal in length to number of profiles (profile ID, again) p2 <- split(sp2, f = profile_id(sp2)) names(p2) #>  [1] \"hon-1\"  \"hon-10\" \"hon-11\" \"hon-13\" \"hon-14\" \"hon-17\" \"hon-18\" \"hon-19\" #>  [9] \"hon-2\"  \"hon-20\" \"hon-21\" \"hon-22\" \"hon-3\"  \"hon-4\"  \"hon-5\"  \"hon-6\"  #> [17] \"hon-7\"  \"hon-8\"  length(p2) #> [1] 18  # which are both equivalent to setting `f` to NULL p3 <- split(sp2, f = NULL) names(p3) #>  [1] \"hon-1\"  \"hon-10\" \"hon-11\" \"hon-13\" \"hon-14\" \"hon-17\" \"hon-18\" \"hon-19\" #>  [9] \"hon-2\"  \"hon-20\" \"hon-21\" \"hon-22\" \"hon-3\"  \"hon-4\"  \"hon-5\"  \"hon-6\"  #> [17] \"hon-7\"  \"hon-8\"  length(p3) #> [1] 18  # split on surface (age) site-level var p4 <- split(sp2, f = \"surface\") names(p4) #> [1] \"holocene\"        \"lower modesto\"   \"upper modesto\"   \"lower riverbank\" #> [5] \"upper riverbank\" \"lower laguna\"    length(p4) # 5 unique \"surfaces\", 5 SPCs in result list #> [1] 6"},{"path":"https://ncss-tech.github.io/aqp/reference/splitLogicErrors.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a SoilProfileCollection into a list based on types of horizon logic errors — splitLogicErrors","title":"Split a SoilProfileCollection into a list based on types of horizon logic errors — splitLogicErrors","text":"Uses checkHzDepthLogic() identify presence depth logic errors, depths, missing depths, overlaps/gaps horizons profile SoilProfileCollection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/splitLogicErrors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a SoilProfileCollection into a list based on types of horizon logic errors — splitLogicErrors","text":"","code":"splitLogicErrors(object, interact = FALSE, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/splitLogicErrors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a SoilProfileCollection into a list based on types of horizon logic errors — splitLogicErrors","text":"object SoilProfileCollection interact Calculate interaction four logic errors groups? Default: FALSE always returns 4 groups, one logic error type. ... Additional arguments split.default, called interact = TRUE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/splitLogicErrors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a SoilProfileCollection into a list based on types of horizon logic errors — splitLogicErrors","text":"named list SoilProfileCollections (NULL), names: \"depthLogic\", \"sameDepth\", \"missingDepth\", \"overlapOrGap\". interact = TRUE list elements groups determined interaction() error types.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/splitLogicErrors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a SoilProfileCollection into a list based on types of horizon logic errors — splitLogicErrors","text":"","code":"data(sp4) depths(sp4) <- id ~ top + bottom  # no errors (all four list elements return NULL) splitLogicErrors(sp4) #> $depthLogic #> NULL #>  #> $sameDepth #> NULL #>  #> $missingDepth #> NULL #>  #> $overlapOrGap #> NULL #>   # NA in top depth triggers depth logic and missing depth errors data(sp4) sp4$top[1] <- NA depths(sp4) <- id ~ top + bottom #> This is already a SoilProfileCollection-class object, doing nothing.  splitLogicErrors(sp4) #> $depthLogic #> SoilProfileCollection with 1 profiles and 4 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 42 - 42 cm #>  #> ----- Horizons (4 / 4 rows  |  10 / 14 columns) ----- #>      id hzID top bottom name   K   Mg  Ca CEC_7 ex_Ca_to_Mg #>  colusa    1  NA      3    A 0.3 25.7 9.0  23.0        0.35 #>  colusa    2   3      8  ABt 0.2 23.7 5.6  21.4        0.23 #>  colusa    3   8     30  Bt1 0.1 23.2 1.9  23.7        0.08 #>  colusa    4  30     42  Bt2 0.1 44.3 0.3  43.0        0.01 #>  #> ----- Sites (1 / 1 rows  |  1 / 1 columns) ----- #>      id #>  colusa #>  #> Spatial Data: #> [EMPTY] #>  #> $sameDepth #> NULL #>  #> $missingDepth #> SoilProfileCollection with 1 profiles and 4 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 42 - 42 cm #>  #> ----- Horizons (4 / 4 rows  |  10 / 14 columns) ----- #>      id hzID top bottom name   K   Mg  Ca CEC_7 ex_Ca_to_Mg #>  colusa    1  NA      3    A 0.3 25.7 9.0  23.0        0.35 #>  colusa    2   3      8  ABt 0.2 23.7 5.6  21.4        0.23 #>  colusa    3   8     30  Bt1 0.1 23.2 1.9  23.7        0.08 #>  colusa    4  30     42  Bt2 0.1 44.3 0.3  43.0        0.01 #>  #> ----- Sites (1 / 1 rows  |  1 / 1 columns) ----- #>      id #>  colusa #>  #> Spatial Data: #> [EMPTY] #>  #> $overlapOrGap #> NULL #>   # interact = TRUE gets errors for profile 1 in same group #  and allows you to pass extra arguments to split.default() splitLogicErrors(sp4, interact = TRUE, sep = \"_\", drop = TRUE) #> $`___` #> SoilProfileCollection with 9 profiles and 26 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 16 - 49 cm #>  #> ----- Horizons (6 / 26 rows  |  10 / 14 columns) ----- #>        id hzID top bottom name   K   Mg  Ca CEC_7 ex_Ca_to_Mg #>     glenn    5   0      9    A 0.2 21.9 4.4  18.8        0.20 #>     glenn    6   9     34   Bt 0.3 18.9 4.5  27.5        0.20 #>     kings    7   0      4    A 0.2 12.1 1.4  23.7        0.58 #>     kings    8   4     13  Bt1 0.6 12.1 7.0  18.0        0.51 #>     kings    9  13     40  Bt2 0.8 17.7 4.4  20.0        0.25 #>  mariposa   10   0      3    A 0.6 28.3 5.8  29.3        0.20 #> [... more horizons ...] #>  #> ----- Sites (6 / 9 rows  |  1 / 1 columns) ----- #>          id #>       glenn #>       kings #>    mariposa #>   mendocino #>        napa #>  san benito #> [... more sites ...] #>  #> Spatial Data: #> [EMPTY] #>  #> $depthLogic__missingDepth_ #> SoilProfileCollection with 1 profiles and 4 horizons #> profile ID: id  |  horizon ID: hzID  #> Depth range: 42 - 42 cm #>  #> ----- Horizons (4 / 4 rows  |  10 / 14 columns) ----- #>      id hzID top bottom name   K   Mg  Ca CEC_7 ex_Ca_to_Mg #>  colusa    1  NA      3    A 0.3 25.7 9.0  23.0        0.35 #>  colusa    2   3      8  ABt 0.2 23.7 5.6  21.4        0.23 #>  colusa    3   8     30  Bt1 0.1 23.2 1.9  23.7        0.08 #>  colusa    4  30     42  Bt2 0.1 44.3 0.3  43.0        0.01 #>  #> ----- Sites (1 / 1 rows  |  1 / 1 columns) ----- #>      id #>  colusa #>  #> Spatial Data: #> [EMPTY] #>"},{"path":"https://ncss-tech.github.io/aqp/reference/subApply.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset SPC based on result of performing function on each profile — subApply","title":"Subset SPC based on result of performing function on each profile — subApply","text":"subApply() function used subsetting SoilProfileCollections. currently support \"tidy\" lexical features ... arguments passed profileApply(). expectation function .fun takes single-profile SoilProfileCollection returns logical value length one. use case logical comparisons evaluated inline subSPC() require simple logical operations.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subApply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset SPC based on result of performing function on each profile — subApply","text":"","code":"subApply(object, .fun, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/subApply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset SPC based on result of performing function on each profile — subApply","text":"object SoilProfileCollection .fun, function takes single profile, returns logical length 1. ... Additional arguments passed .fun","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subApply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset SPC based on result of performing function on each profile — subApply","text":"SoilProfileCollection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subApply.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subset SPC based on result of performing function on each profile — subApply","text":"Andrew G. Brown.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subset-SoilProfileCollection-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset a SoilProfileCollection with logical expressions — subset,SoilProfileCollection-method","title":"Subset a SoilProfileCollection with logical expressions — subset,SoilProfileCollection-method","text":"subset() function used extracting profiles SoilProfileCollection based logical criteria. allows user specify arbitrary number logical vectors (equal length site horizon), separated commas. function includes support non-standard evaluation.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subset-SoilProfileCollection-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset a SoilProfileCollection with logical expressions — subset,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' subset(x, ..., greedy = FALSE)"},{"path":"https://ncss-tech.github.io/aqp/reference/subset-SoilProfileCollection-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset a SoilProfileCollection with logical expressions — subset,SoilProfileCollection-method","text":"x SoilProfileCollection ... Comma-separated set R expressions evaluate TRUE FALSE. Length individual expressions matches number sites number horizons, object. greedy Use \"greedy\" matching combination site horizon level matches? greedy = TRUE union, whereas greedy = FALSE (default) intersection (site horizon matches).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subset-SoilProfileCollection-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset a SoilProfileCollection with logical expressions — subset,SoilProfileCollection-method","text":"SoilProfileCollection.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subset-SoilProfileCollection-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset a SoilProfileCollection with logical expressions — subset,SoilProfileCollection-method","text":"minimize likelihood issues non-standard evaluation context, especially using subset() inside another function, expressions used ... terms variables site horizon data frame.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subset-SoilProfileCollection-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Subset a SoilProfileCollection with logical expressions — subset,SoilProfileCollection-method","text":"Andrew G. Brown.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subsetHz-SoilProfileCollection-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset the horizons in a SoilProfileCollection using logical criteria — subsetHz,SoilProfileCollection-method","title":"Subset the horizons in a SoilProfileCollection using logical criteria — subsetHz,SoilProfileCollection-method","text":"subsetHz() function used extracting horizons SoilProfileCollection based logical criteria.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subsetHz-SoilProfileCollection-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset the horizons in a SoilProfileCollection using logical criteria — subsetHz,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' subsetHz(x, ..., drop = TRUE)"},{"path":"https://ncss-tech.github.io/aqp/reference/subsetHz-SoilProfileCollection-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset the horizons in a SoilProfileCollection using logical criteria — subsetHz,SoilProfileCollection-method","text":"x SoilProfileCollection ... Comma-separated set R expressions evaluate TRUE FALSE context horizon data frame. Length individual expressions matches number horizons, x. drop Default: TRUE. drop=FALSE placeholder horizons (profile ID values NA) created specified filter results removal horizons.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subsetHz-SoilProfileCollection-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subset the horizons in a SoilProfileCollection using logical criteria — subsetHz,SoilProfileCollection-method","text":"SoilProfileCollection subset horizons, possibly sites removed","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subsetHz-SoilProfileCollection-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subset the horizons in a SoilProfileCollection using logical criteria — subsetHz,SoilProfileCollection-method","text":"minimize likelihood issues non-standard evaluation context, especially using subsetHz() inside another function, expressions used ... terms variables horizon data frame.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subsetHz-SoilProfileCollection-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset the horizons in a SoilProfileCollection using logical criteria — subsetHz,SoilProfileCollection-method","text":"","code":"data(sp3)  depths(sp3) <- id ~ top + bottom  # show just horizons with 10YR hues plot(subsetHz(sp3, hue == '10YR'))"},{"path":"https://ncss-tech.github.io/aqp/reference/subsetProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"DEPRECATED use subset — subsetProfiles","title":"DEPRECATED use subset — subsetProfiles","text":"function used subset SoilProfileCollection objects using either site-level horizon-level attributes, .","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subsetProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DEPRECATED use subset — subsetProfiles","text":"","code":"# S4 method for class 'SoilProfileCollection' subsetProfiles(object, s, h, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/subsetProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DEPRECATED use subset — subsetProfiles","text":"object object s fully-quoted search criteria matching via site-level attributes h fully-quoted search criteria matching via horizon-level attributes ... used","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subsetProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DEPRECATED use subset — subsetProfiles","text":"SoilProfileCollection class object.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subsetProfiles.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DEPRECATED use subset — subsetProfiles","text":"s argument supplies fully-quoted search criteria matching via site horizon-level attributes. h argument supplies fully-quoted search criteria matching via horizon-level attributes. horizons associated single horizon-level match (.e. several, single horizon matches search criteria) returned. See examples usage.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/subsetProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DEPRECATED use subset — subsetProfiles","text":"","code":"# more interesting sample data data(sp2) depths(sp2) <- id ~ top + bottom site(sp2) <- ~ surface  # subset by integer index, note that this does not re-order the profiles plot(sp2[1:5, ])   # generate an integer index via pattern-matching idx <- grep('modesto', sp2$surface, ignore.case=TRUE) plot(sp2[idx, ])   # generate in index via profileApply: # subset those profiles where: min(ph) < 5.6 idx <- which(profileApply(sp2, function(i) min(i$field_ph, na.rm=TRUE) < 5.6)) plot(sp2[idx, ])"},{"path":"https://ncss-tech.github.io/aqp/reference/summarizeSPC.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform summaries on groups (from group_by) and create new site or horizon level attributes — summarizeSPC","title":"Perform summaries on groups (from group_by) and create new site or horizon level attributes — summarizeSPC","text":"summarize() function used summarizing SoilProfileCollection object. Specify groups using group_by verb, (named) expressions evaluate group. result data.frame one row per categorical level grouping variable one column summary variable.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/summarizeSPC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform summaries on groups (from group_by) and create new site or horizon level attributes — summarizeSPC","text":"","code":"summarizeSPC(object, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/summarizeSPC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform summaries on groups (from group_by) and create new site or horizon level attributes — summarizeSPC","text":"object SoilProfileCollection ... set (named) comma-delimited R expressions resolve summary value. e.g groupmean = mean(clay, na.rm = TRUE)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/summarizeSPC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform summaries on groups (from group_by) and create new site or horizon level attributes — summarizeSPC","text":"data.frame one row per level grouping variable, one column summary","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/summarizeSPC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Perform summaries on groups (from group_by) and create new site or horizon level attributes — summarizeSPC","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/tauW.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute weighted naive and tau statistics for a cross-classification matrix — tauW","title":"Compute weighted naive and tau statistics for a cross-classification matrix — tauW","text":"tauW: Computes: (1) unweighted naive, (2) weighted naive, (3) unweighted tau, (4) weighted tau accuracy statistics","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/tauW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute weighted naive and tau statistics for a cross-classification matrix — tauW","text":"","code":"tauW(   CM,   W = diag(sqrt(length(as.matrix(CM)))),   P = rep(1/nrow(as.matrix(CM)), nrow(as.matrix(CM))) )  summaryTauW(result.tau)"},{"path":"https://ncss-tech.github.io/aqp/reference/tauW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute weighted naive and tau statistics for a cross-classification matrix — tauW","text":"CM square confusion (cross-classification) matrix (rows: allocation, columns: reference) W weights: 1 diagonals, [-1..1] giving partial credit error P prior probability vector, length = number rows/columns CM W result.tau tauW() result","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/tauW.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute weighted naive and tau statistics for a cross-classification matrix — tauW","text":"Results returned list obvious R names","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/tauW.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute weighted naive and tau statistics for a cross-classification matrix — tauW","text":"summaryTauW: prints summary results tauW xtableTauW: formats LaTeX table results tauW saves .tex file import LaTeX document. Input matrices CM W may data.frame format converted Weights matrix W: 0 = credit; 1 = full credit; -1 = maximum penalty absent, default partial credit, .e., unweighted. Prior probabilities vector P: absent, P equal priors class. Special value P = 0 interpreted P = column marginals. Error checks: CM must square; P must correct number classes sum 1 +/- 0.0001; W & CM must conformable","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/tauW.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute weighted naive and tau statistics for a cross-classification matrix — tauW","text":"Rossiter, D. G., Zeng, R., & Zhang, G.-L. (2017). Accounting taxonomic distance accuracy assessment soil class predictions. Geoderma, 292, 118–127. doi:10.1016/j.geoderma.2017.01.012 Ma, Z. K., & Redmond, R. L. (1995). Tau-coefficients accuracy assessment classification remote-sensing data. Photogrammetric Engineering Remote Sensing, 61(4), 435–439. Naesset, E. (1996). Conditional tau coefficient assessment producer’s accuracy classified remotely sensed data. ISPRS Journal Photogrammetry Remote Sensing, 51(2), 91–98. doi:10.1016/0924-2716(69)00007-4","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/tauW.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute weighted naive and tau statistics for a cross-classification matrix — tauW","text":"D.G. Rossiter","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/tauW.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute weighted naive and tau statistics for a cross-classification matrix — tauW","text":"","code":"# example confusion matrix # rows: allocation (user's counts) # columns: reference (producer's counts) crossclass <- matrix(data=c(2,1,0,5,0,0,                             1,74,2,1,3,6,                             0,5,8,6,1,3,                             6,1,3,91,0,0,                             0,4,0,0,0,4,                             0,6,2,2,4,38),                      nrow=6, byrow=TRUE) row.names(crossclass) <- c(\"OP\", \"SA\", \"UA\", \"UC\", \"AV\", \"AC\") colnames(crossclass) <- row.names(crossclass)  # build the weights matrix # how much credit for a mis-allocation weights <- matrix(data=c(1.00,0.05,0.05,0.15,0.05,0.15,                          0.05,1.00,0.05,0.05,0.05,0.35,                          0.05,0.05,1.00,0.20,0.15,0.15,                          0.15,0.05,0.25,1.00,0.10,0.25,                          0.05,0.10,0.15,0.10,1.00,0.15,                          0.20,0.30,0.10,0.25,0.20,1.00),                   nrow=6, byrow=TRUE)  # unweighted accuracy summaryTauW(nnaive <- tauW(crossclass)) #> [1] Cross-classification matrix: #>      OP SA UA UC AV AC #> [1,]  2  1  0  5  0  0 #> [2,]  1 74  2  1  3  6 #> [3,]  0  5  8  6  1  3 #> [4,]  6  1  3 91  0  0 #> [5,]  0  4  0  0  0  4 #> [6,]  0  6  2  2  4 38 #> [1] Number of observations: 279 #> [1] Weights: #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    0    0    0    0    0 #> [2,]    0    1    0    0    0    0 #> [3,]    0    0    1    0    0    0 #> [4,]    0    0    0    1    0    0 #> [5,]    0    0    0    0    1    0 #> [6,]    0    0    0    0    0    1 #> [1] Overall accuracy (unweighted): 0.7634 #> [1] Overall accuracy (weighted): 0.7634 #> [1] User's accuracy (unweighted): #>     OP     SA     UA     UC     AV     AC  #> 0.2500 0.8506 0.3478 0.9010 0.0000 0.7308  #> [1] User's accuracy (weighted): #>     OP     SA     UA     UC     AV     AC  #> 0.2500 0.8506 0.3478 0.9010 0.0000 0.7308  #> [1] Producer's reliability (unweighted): #>     OP     SA     UA     UC     AV     AC  #> 0.2222 0.8132 0.5333 0.8667 0.0000 0.7451  #> [1] Producer's reliability (weighted): #>     OP     SA     UA     UC     AV     AC  #> 0.2222 0.8132 0.5333 0.8667 0.0000 0.7451  #> [1] Reference class proportions: #>     OP     SA     UA     UC     AV     AC  #> 0.0323 0.3262 0.0538 0.3763 0.0287 0.1828  #> [1] Observed class proportions: #>     OP     SA     UA     UC     AV     AC  #> 0.0287 0.3118 0.0824 0.3620 0.0287 0.1864  #> [1] Prior class probabilities: #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 #> [1] Tau (unweighted): 0.7161 #> [1] Tau (weighted): 0.7161  # unweighted tau with equal priors, equivalent to Foody (1992) modified Kappa tauW(crossclass)$tau #> [1] 0.716129  # unweighted tau with user's = producer's marginals, equivalent to original kappa (priors <-  apply(crossclass, 2, sum)/sum(crossclass)) #>         OP         SA         UA         UC         AV         AC  #> 0.03225806 0.32616487 0.05376344 0.37634409 0.02867384 0.18279570  tauW(crossclass, P=priors)$tau #> [1] 0.6685984  # weighted accuracy; tau with equal priors summaryTauW(weighted <- tauW(crossclass, W=weights)) #> [1] Cross-classification matrix: #>      OP SA UA UC AV AC #> [1,]  2  1  0  5  0  0 #> [2,]  1 74  2  1  3  6 #> [3,]  0  5  8  6  1  3 #> [4,]  6  1  3 91  0  0 #> [5,]  0  4  0  0  0  4 #> [6,]  0  6  2  2  4 38 #> [1] Number of observations: 279 #> [1] Weights: #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,] 1.00 0.05 0.05 0.15 0.05 0.15 #> [2,] 0.05 1.00 0.05 0.05 0.05 0.35 #> [3,] 0.05 0.05 1.00 0.20 0.15 0.15 #> [4,] 0.15 0.05 0.25 1.00 0.10 0.25 #> [5,] 0.05 0.10 0.15 0.10 1.00 0.15 #> [6,] 0.20 0.30 0.10 0.25 0.20 1.00 #> [1] Overall accuracy (unweighted): 0.7634 #> [1] Overall accuracy (weighted): 0.8039 #> [1] User's accuracy (unweighted): #>     OP     SA     UA     UC     AV     AC  #> 0.2500 0.8506 0.3478 0.9010 0.0000 0.7308  #> [1] User's accuracy (weighted): #>     OP     SA     UA     UC     AV     AC  #> 0.3500 0.8787 0.4370 0.9178 0.1250 0.7942  #> [1] Producer's reliability (unweighted): #>     OP     SA     UA     UC     AV     AC  #> 0.2222 0.8132 0.5333 0.8667 0.0000 0.7451  #> [1] Producer's reliability (weighted): #>     OP     SA     UA     UC     AV     AC  #> 0.3278 0.8412 0.6033 0.8905 0.1375 0.8069  #> [1] Reference class proportions: #>     OP     SA     UA     UC     AV     AC  #> 0.0323 0.3262 0.0538 0.3763 0.0287 0.1828  #> [1] Observed class proportions: #>     OP     SA     UA     UC     AV     AC  #> 0.0287 0.3118 0.0824 0.3620 0.0287 0.1864  #> [1] Prior class probabilities: #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 #> [1] Tau (unweighted): 0.7161 #> [1] Tau (weighted): 0.7253  # weighted accuracy; tau with user's = producer's marginals summaryTauW(tauW(crossclass, W=weights, P=priors)) #> [1] Cross-classification matrix: #>      OP SA UA UC AV AC #> [1,]  2  1  0  5  0  0 #> [2,]  1 74  2  1  3  6 #> [3,]  0  5  8  6  1  3 #> [4,]  6  1  3 91  0  0 #> [5,]  0  4  0  0  0  4 #> [6,]  0  6  2  2  4 38 #> [1] Number of observations: 279 #> [1] Weights: #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,] 1.00 0.05 0.05 0.15 0.05 0.15 #> [2,] 0.05 1.00 0.05 0.05 0.05 0.35 #> [3,] 0.05 0.05 1.00 0.20 0.15 0.15 #> [4,] 0.15 0.05 0.25 1.00 0.10 0.25 #> [5,] 0.05 0.10 0.15 0.10 1.00 0.15 #> [6,] 0.20 0.30 0.10 0.25 0.20 1.00 #> [1] Overall accuracy (unweighted): 0.7634 #> [1] Overall accuracy (weighted): 0.8039 #> [1] User's accuracy (unweighted): #>     OP     SA     UA     UC     AV     AC  #> 0.2500 0.8506 0.3478 0.9010 0.0000 0.7308  #> [1] User's accuracy (weighted): #>     OP     SA     UA     UC     AV     AC  #> 0.3500 0.8787 0.4370 0.9178 0.1250 0.7942  #> [1] Producer's reliability (unweighted): #>     OP     SA     UA     UC     AV     AC  #> 0.2222 0.8132 0.5333 0.8667 0.0000 0.7451  #> [1] Producer's reliability (weighted): #>     OP     SA     UA     UC     AV     AC  #> 0.3278 0.8412 0.6033 0.8905 0.1375 0.8069  #> [1] Reference class proportions: #>     OP     SA     UA     UC     AV     AC  #> 0.0323 0.3262 0.0538 0.3763 0.0287 0.1828  #> [1] Observed class proportions: #>     OP     SA     UA     UC     AV     AC  #> 0.0287 0.3118 0.0824 0.3620 0.0287 0.1864  #> [1] Prior class probabilities: #> [1] 0.03225806 0.32616487 0.05376344 0.37634409 0.02867384 0.18279570 #> [1] Tau (unweighted): 0.6686 #> [1] Tau (weighted): 0.6744  # change in accuracy statistics weighted vs. non-weighted (weighted$overall.weighted - weighted$overall.naive) #> [1] 0.04050179 (weighted$user.weighted - weighted$user.naive) #>         OP         SA         UA         UC         AV         AC  #> 0.10000000 0.02816092 0.08913043 0.01683168 0.12500000 0.06346154  (weighted$prod.weighted - weighted$prod.naive) #>         OP         SA         UA         UC         AV         AC  #> 0.10555556 0.02802198 0.07000000 0.02380952 0.13750000 0.06176471"},{"path":"https://ncss-tech.github.io/aqp/reference/texture.html","id":null,"dir":"Reference","previous_headings":"","what":"Textural conversions — texcl_to_ssc","title":"Textural conversions — texcl_to_ssc","text":"functions consist several conversions sand, silt clay texture class visa versa, textural modifiers rock fragments, grain size composition family particle size class.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/texture.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Textural conversions — texcl_to_ssc","text":"","code":"texcl_to_ssc(texcl = NULL, clay = NULL, sample = FALSE)  ssc_to_texcl(   sand = NULL,   clay = NULL,   simplify = FALSE,   as.is = FALSE,   droplevels = TRUE )  texmod_to_fragvoltot(texmod = NULL, lieutex = NULL)  texture_to_taxpartsize(   texcl = NULL,   clay = NULL,   sand = NULL,   sandvf = NULL,   fragvoltot = NULL )  texture_to_texmod(texture, duplicates = \"combine\")  fragvol_to_texmod(   object = NULL,   gravel = NULL,   cobbles = NULL,   stones = NULL,   boulders = NULL,   channers = NULL,   flagstones = NULL,   paragravel = NULL,   paracobbles = NULL,   parastones = NULL,   paraboulders = NULL,   parachanners = NULL,   paraflagstones = NULL,   as.is = TRUE,   droplevels = TRUE )"},{"path":"https://ncss-tech.github.io/aqp/reference/texture.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Textural conversions — texcl_to_ssc","text":"texcl vector texture classes conform USDA code conventions (e.g. c|C, sil|SIL, sl|SL, cos|COS) clay vector clay percentages sample logical: ssc random sampled lookup table? (default: FALSE) sand vector sand percentages simplify Passed SoilTextureLevels() set number possible texture classes. TRUE, ordered factor maximum 12 levels, FALSE (default) ordered factor maximum 21 levels (including e.g. fine/fine/coarse variants) .logical: character vectors converted factors? (default: TRUE) droplevels logical: indicating whether drop unused levels factors. useful results large number unused classes, can waste space tables figures. texmod vector textural modifiers conform USDA code conventions (e.g. gr|GR, grv|GRV) lieutex vector lieu texture terms conform USDA code conventions (e.g. gr|GR, pg|PG), used fragments artifacts > 90 percent volume (default: NULL)) sandvf vector fine sand percentages fragvoltot vector total rock fragment percentages texture vector combinations texcl, texmod, lieutex (e.g. CL, GR-CL, CBV-S, GR) duplicates character: specifying multiple values handled, options \"combined\" (e.g. 'GR & GRV) \"max\"(e.g. 'GRV') object data.frame: containing following column names: gravel, cobbles, stones, boulders, channers, flagstones, paragravel, paracobbles, parastones, paraboulders, parachanners, paraflagstones gravel numeric: gravel volume % cobbles numeric: cobble volume % stones numeric: stone volume % boulders numeric: boulder volume % channers numeric: channer volume % flagstones numeric: flagstone volume % paragravel numeric: para gravel volume % paracobbles numeric: para cobble volume % parastones numeric: para stone volume % paraboulders numeric: para boulder volume % parachanners numeric: para channer volume % paraflagstones numeric: para flagstone volume %","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/texture.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Textural conversions — texcl_to_ssc","text":"texcl_to_ssc: data.frame containing columns \"sand\",\"silt\", \"clay\" ssc_to_texcl: character vector containing texture class texmod_to_fragvoltot: data.frame containing columns \"fragvoltot_l\", \"fragvoltot_r\", \"fragvoltot_h\", \"fragvoltot_l_nopf\", \"fragvoltot_r_nopf\", \"fragvoltot_h_nopf\" texture_to_taxpartsize: character vector containing \"taxpartsize\" classes texture_to_texmod: character vector containing \"texmod\" classes texmod_to_fragvol: data.frame containing \"texmod\" \"lieutex\" classes","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/texture.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Textural conversions — texcl_to_ssc","text":"functions intended estimate missing values allocate particle size fractions classes. ssc_to_texcl() function uses logic particle size estimator calculation NASIS classify sand clay texture class. results stored soiltexture used texcl_to_ssc() lookup table convert texture class sand, silt clay. function texcl_to_ssc() replicates functionality described Levi (2017). texmod_to_fragvol() function similarly uses logical Exhibit618-11_texture_modifier.xls spreadsheet determine textural modifier various combinations rock pararock fragments (e.g. GR PGR). sample = TRUE, results can used estimate within-class, marginal distributions sand, silt, clay fractions. recommended least 10 samples drawn reasonable estimates. function texmod_to_fragvoltot returns data.frame multiple fragvoltot columns differentiated tailing abbreviations (e.g. _r) refer following: l = low r = representative h = high nopf = pararock fragments (.e. total fragments - pararock fragments) function texture_to_texmod() parses texture (e.g. GR-CL) extract texmod values scenario missing texmod column. multiple texmod values present (example case stratified textures) duplicates = \"combine\" combined output (e.g. GR & CBV). Otherwise duplicates = \"max\" texmod highest rock fragment (e.g. CBV) returned. Unlike functions, texture_to_taxpartsize() intended computed weighted averages within family particle size control section. Also recall criteria carbonate clay subtracted clay content added silt content. Similarly, percent fine sand known subtracted sand, added silt content. Unlike functions, texture_to_taxpartsize() intended computed weighted averages within family particle size control section. Also recall criteria carbonate clay subtracted clay content added silt content. Similarly, percent fine sand known subtracted sand, added silt content.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/texture.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Textural conversions — texcl_to_ssc","text":"Matthew R. Levi, Modified Centroid Estimating Sand, Silt, Clay Soil Texture Class, Soil Science Society America Journal, 2017, 81(3):578-588, ISSN 1435-0661, doi:10.2136/sssaj2016.09.0301 .","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/texture.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Textural conversions — texcl_to_ssc","text":"Stephen Roecker","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/texture.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Textural conversions — texcl_to_ssc","text":"","code":"# \\donttest{ # example of ssc_to_texcl() tex <- expand.grid(sand = 0:100, clay = 0:100) tex <- subset(tex, (sand + clay) < 101) tex$texcl <- ssc_to_texcl(sand = tex$sand, clay = tex$clay) head(tex) #>   sand clay texcl #> 1    0    0    si #> 2    1    0    si #> 3    2    0    si #> 4    3    0    si #> 5    4    0    si #> 6    5    0    si  # example of texcl_to_ssc(texcl) texcl <- c(\"cos\", \"s\", \"fs\", \"vfs\", \"lcos\", \"ls\",           \"lfs\", \"lvfs\", \"cosl\", \"sl\", \"fsl\", \"vfsl\", \"l\",           \"sil\", \"si\", \"scl\", \"cl\", \"sicl\", \"sc\", \"sic\", \"c\"           ) test <- texcl_to_ssc(texcl) head(test <- cbind(texcl, test), 10) #>    texcl sand silt clay #> 1    cos   92    5    3 #> 2      s   92    5    3 #> 3     fs   92    5    3 #> 4    vfs   92    5    3 #> 5   lcos   82   12    6 #> 6     ls   82   12    6 #> 7    lfs   82   12    6 #> 8   lvfs   82   12    6 #> 9   cosl   65   25   10 #> 10    sl   65   25   10   # example of texcl_to_ssc(texcl, clay) data(soiltexture) st <- soiltexture$values idx <- sample(1:length(st$texcl), 10) st <- st[idx, ] ssc <- texcl_to_ssc(texcl = st$texcl) head(cbind(texcl = st$texcl, clay = ssc$clay)) #>      texcl clay #> [1,] \"c\"   \"55\" #> [2,] \"ls\"  \"6\"  #> [3,] \"c\"   \"55\" #> [4,] \"sc\"  \"41\" #> [5,] \"sil\" \"13\" #> [6,] \"sc\"  \"41\"   # example of texmod_to_fragvoltol frags <- c(\"gr\", \"grv\", \"grx\", \"pgr\", \"pgrv\", \"pgrx\") head(texmod_to_fragvoltot(frags)) #>   fragvoltot_l fragvoltot_r fragvoltot_h fragvoltot_h_nopf fragvoltot_r_nopf #> 1           15           25           34                34                25 #> 2           35           48           59                59                48 #> 3           60           75           89                89                75 #> 4           15           25           34                 0                 0 #> 5           35           48           59                 0                 0 #> 6           60           75           89                 0                 0 #>   fragvoltot_l_nopf #> 1                15 #> 2                35 #> 3                60 #> 4                 0 #> 5                 0 #> 6                 0   # example of texture_to_taxpartsize() tex <- data.frame(texcl = c(\"c\", \"cl\", \"l\", \"ls\", \"s\"),                   clay  = c(55, 33, 18, 6, 3),                   sand  = c(20, 33, 42, 82, 93),                   fragvoltot = c(35, 15, 34, 60, 91)) tex$fpsc <- texture_to_taxpartsize(texcl = tex$texcl,                                    clay = tex$clay,                                    sand = tex$sand,                                    fragvoltot = tex$fragvoltot) head(tex) #>   texcl clay sand fragvoltot            fpsc #> 1     c   55   20         35 clayey-skeletal #> 2    cl   33   33         15      fine-loamy #> 3     l   18   42         34      fine-loamy #> 4    ls    6   82         60  sandy-skeletal #> 5     s    3   93         91      fragmental   # example of texture_to_taxpartsize() with carbonate clay and very fine sand carbclay <- rnorm(5, 2, 3) vfs <- rnorm(5, 10, 3) st$fpsc <- texture_to_taxpartsize(texcl = tex$texcl,                                   clay = tex$clay - carbclay,                                   sand = tex$sand - vfs,                                   fragvoltot = tex$fragvoltot) #> Warning: some of the texcl records don't match the calculated texcl via ssc_to_texcl() head(tex) #>   texcl clay sand fragvoltot            fpsc #> 1     c   55   20         35 clayey-skeletal #> 2    cl   33   33         15      fine-loamy #> 3     l   18   42         34      fine-loamy #> 4    ls    6   82         60  sandy-skeletal #> 5     s    3   93         91      fragmental   # example of sample = TRUE texcl <- rep(c(\"cl\", \"sil\", \"sl\"), 10) ssc1 <- cbind(texcl, texcl_to_ssc(texcl = texcl, sample = FALSE)) ssc2 <- cbind(texcl, texcl_to_ssc(texcl = texcl, sample = TRUE)) ssc1$sample <- FALSE ssc2$sample <- TRUE ssc  <- rbind(ssc1, ssc2) aggregate(clay ~ sample + texcl, data = ssc, summary) #>   sample texcl clay.Min. clay.1st Qu. clay.Median clay.Mean clay.3rd Qu. #> 1  FALSE    cl     33.00        33.00       33.00     33.00        33.00 #> 2   TRUE    cl     27.00        30.75       34.50     33.10        35.75 #> 3  FALSE   sil     13.00        13.00       13.00     13.00        13.00 #> 4   TRUE   sil      2.00         4.25        6.00      9.10        11.50 #> 5  FALSE    sl     10.00        10.00       10.00     10.00        10.00 #> 6   TRUE    sl      3.00         6.50       10.50     10.10        14.00 #>   clay.Max. #> 1     33.00 #> 2     37.00 #> 3     13.00 #> 4     26.00 #> 5     10.00 #> 6     17.00 # } # \\donttest{ # example of texture_to_texmod() tex <- c(\"SL\", \"GR-SL\", \"CBV-L\", \"SR- GR-FS GRX-COS\") texture_to_texmod(tex) #> [1] NA         \"gr\"       \"cbv\"      \"gr & grx\" texture_to_texmod(tex, duplicates = \"max\") #> [1] NA    \"gr\"  \"cbv\" \"grx\" # } # \\donttest{ # example of fragvol_to_texmod() df <- expand.grid(   gravel  = seq(0, 100, 5),    cobbles = seq(0, 100, 5),    stones  = seq(0, 100, 5),    boulders = seq(0, 100, 5)   ) df <- df[rowSums(df) < 100, ]  # data.frame input test <- fragvol_to_texmod(df) table(test$texmod) #>  #>   by  byv  byx   cb  cbv  cbx   gr  grv  grx   st  stv  stx  #>   81  510 2135   37  192  710   20   82  273   57  371 1502  table(test$lieutex) #>  #>   by   cb   gr   st  #> 1634   37    2 1197   # vector inputs fragvol_to_texmod(gravel = 10, cobbles = 10) #>   texmod lieutex #> 1     cb    <NA>  # }"},{"path":"https://ncss-tech.github.io/aqp/reference/textureTriangleSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Soil Texture Low-RV-High as Defined by Quantiles — textureTriangleSummary","title":"Soil Texture Low-RV-High as Defined by Quantiles — textureTriangleSummary","text":"function accepts soil texture components (sand, silt, clay percentages) plots soil texture triangle \"representative value\" (point) low-high region (polygon) defined quantiles (estimated Hmisc::hdquantile). Marginal quantiles sand, silt, clay used define boundary low-high region. default settings place RV symbol texture defined marginal medians sand, silt, clay. default low-high region defined 5th 95th marginal percentiles sand, silt, clay.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/textureTriangleSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Soil Texture Low-RV-High as Defined by Quantiles — textureTriangleSummary","text":"","code":"textureTriangleSummary(   ssc,   p = c(0.05, 0.5, 0.95),   delta = 1,   rv.col = \"red\",   range.border = \"black\",   range.col = \"RoyalBlue\",   range.alpha = 80,   range.lty = 1,   range.lwd = 2,   main = \"Soil Textures\",   legend.cex = 0.75,   legend = TRUE,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/textureTriangleSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Soil Texture Low-RV-High as Defined by Quantiles — textureTriangleSummary","text":"ssc data.frame columns: 'SAND', 'SILT', 'CLAY', values percentages add 100. NA allowed. p vector percentiles (length = 3) defining 'low', 'representative value', 'high' delta grid size used form low-high region rv.col color used representative value (RV) symbol range.border color used polygon border enclosing low-high region range.col color used polygon enclosing low-high region range.alpha transparency low-high range polygon (0-255) range.lty line style polygon enclosing low-high region range.lwd line weight polygon enclosing low-high region main plot title legend.cex scaling factor legend legend logical, enable/disable automatic legend ... arguments passed soiltexture::TT.points","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/textureTriangleSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Soil Texture Low-RV-High as Defined by Quantiles — textureTriangleSummary","text":"invisible matrix marginal percentiles sand, silt, clay","code":""},{"path":[]},{"path":"https://ncss-tech.github.io/aqp/reference/textureTriangleSummary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Soil Texture Low-RV-High as Defined by Quantiles — textureTriangleSummary","text":"D.E. Beaudette, J. Nemecek, K. Godsey","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/textureTriangleSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Soil Texture Low-RV-High as Defined by Quantiles — textureTriangleSummary","text":"","code":"# \\donttest{  if( requireNamespace(\"Hmisc\") &   requireNamespace(\"compositions\") &   requireNamespace(\"soiltexture\") ) {      # sample data   data('sp4')      # subset rows / columns   ssc <- sp4[grep('^Bt', sp4$name), c('sand', 'silt', 'clay')]   names(ssc) <- toupper(names(ssc))      # make figure, marginal percentiles are silently returned   stats <- textureTriangleSummary(     ssc, pch = 1, cex = 0.5,      range.alpha = 50,      range.lwd = 1,     col = grey(0.5),      legend = FALSE   )      # check   stats      # simulate some data and try again   s <- bootstrapSoilTexture(ssc, n = 100)$samples      # make the figure, ignore results   textureTriangleSummary(     s, pch = 1, cex = 0.5,      range.alpha = 50,      range.lwd = 1,     col = grey(0.5),      legend = FALSE   ) }    # }"},{"path":"https://ncss-tech.github.io/aqp/reference/thicknessOf.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Thickness of Horizons Matching Logical Criteria — thicknessOf","title":"Calculate Thickness of Horizons Matching Logical Criteria — thicknessOf","text":"function calculates cumulative (method=\"cumulative\", default) maximum difference (method=\"minmax\") horizons within profile match defined pattern (pattern) , generally, set horizon-level logical expressions encoded function (FUN).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/thicknessOf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Thickness of Horizons Matching Logical Criteria — thicknessOf","text":"","code":"thicknessOf(   x,   pattern = NULL,   hzdesgn = hzdesgnname(x, required = TRUE),   method = \"cumulative\",   prefix = \"\",   thickvar = \"thickness\",   depthvars = horizonDepths(x),   FUN = function(x, pattern, hzdesgn, ...) grepl(pattern, x[[hzdesgn]]),   na.rm = FALSE,   ... )"},{"path":"https://ncss-tech.github.io/aqp/reference/thicknessOf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Thickness of Horizons Matching Logical Criteria — thicknessOf","text":"x SoilProfileCollection pattern character. pattern match hzdesgn; used default FUN definition regular expression pattern matching horizons. hzdesgn character. column containing horizon designations horizon-level character label used identify matches; used default FUN definition. method character. Either \"cumulative\" (default) \"minmax\". See details. prefix character. Column prefix calculated thickvar (depthvar method=\"minmax\") column results. Default: \"\". thickvar character Length 1. Column name use calculated thickness column. Default: \"thickness\" depthvars character. Length 2. Column names use calculated minimum top depth maximum bottom depth method=\"minmax\". Default: horizonDepths(x) FUN function. function returns logical vector equal length number horizons x. See details. na.rm logical. Omit NA values summaries thickness matching? Default: FALSE ... Additional arguments passed matching function FUN.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/thicknessOf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Thickness of Horizons Matching Logical Criteria — thicknessOf","text":"data.frame-like object (corresponding aqp_df_class() x) one row per profile x. First column always profile ID followed \"thickness\". method=\"minmax\" upper lower boundaries used calculate \"thickness\" also returned \"tmin\" \"tmax\" columns, respectively.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/thicknessOf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Thickness of Horizons Matching Logical Criteria — thicknessOf","text":"two thickness methods currently available : method=\"cumulative\" (default): cumulative thickness horizons FUN returns true method=\"minmax\": maximum bottom depth minus minimum top depth horizons FUN returns true custom function (FUN) used, accept arbitrary additional arguments via ellipsis (...). necessary anything arguments, result match number horizons found input SoilProfileCollection x.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/thicknessOf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Thickness of Horizons Matching Logical Criteria — thicknessOf","text":"","code":"data(\"jacobs2000\")  # cumulative thickness of horizon designations matching \"Bt\" thicknessOf(jacobs2000, \"Bt\") #>     id thickness #> 1 92-1       110 #> 2 92-2        99 #> 3 92-3       111 #> 4 92-4         0 #> 5 92-5        26 #> 6 92-6        64 #> 7 92-7         0  # maximum bottom depth minus minimum top depth of horizon designations matching \"Bt\" thicknessOf(jacobs2000, \"Bt\", prefix = \"Bt_\", method = \"minmax\") #>     id Bt_top Bt_bottom Bt_thickness #> 1 92-1     43       153          110 #> 2 92-2     46       145           99 #> 3 92-3     64       175          111 #> 4 92-4    Inf      -Inf            0 #> 5 92-5    109       135           26 #> 6 92-6    104       168           64 #> 7 92-7    Inf      -Inf            0  # cumulative thickness of horizon designations matching \"A|B\" thicknessOf(jacobs2000, \"A|B\", prefix = \"AorB_\") #>     id AorB_thickness #> 1 92-1            131 #> 2 92-2            117 #> 3 92-3            136 #> 4 92-4             20 #> 5 92-5             54 #> 6 92-6            110 #> 7 92-7             43  # maximum bottom depth minus minimum top depth of horizon designations matching \"A|B\" thicknessOf(jacobs2000, \"A|B\", method = \"minmax\", prefix = \"AorB_\") #>     id AorB_top AorB_bottom AorB_thickness #> 1 92-1        0         156            156 #> 2 92-2        0         145            145 #> 3 92-3        0         175            175 #> 4 92-4        0          20             20 #> 5 92-5        0         135            135 #> 6 92-6        0         168            168 #> 7 92-7        0         140            140 # note that the latter includes the thickness of E horizons between the A and the B  # when using a custom function (be sure to accept ... and consider the effect of NA values)  # calculate cumulative thickness of horizons containing >18% clay thicknessOf(jacobs2000, prefix = \"claygt18_\",              FUN = function(x, ...) !is.na(x[[\"clay\"]]) & x[[\"clay\"]] > 18) #>     id claygt18_thickness #> 1 92-1                170 #> 2 92-2                167 #> 3 92-3                 81 #> 4 92-4                  0 #> 5 92-5                  0 #> 6 92-6                 49 #> 7 92-7                  0"},{"path":"https://ncss-tech.github.io/aqp/reference/thompson.bell.darkness.html","id":null,"dir":"Reference","previous_headings":"","what":"Thompson-Bell (1996) Index — thompson.bell.darkness","title":"Thompson-Bell (1996) Index — thompson.bell.darkness","text":"Calculate \"Profile Darkness Index\" method Thompson & Bell (1996) \"Color index identifying hydric conditions seasonally saturated mollisols Minnesota\" DOI: 10.2136/sssaj1996.03615995006000060051x. Thompson-Bell Index shown reflect catenary relationships Mollisols Minnesota (generally: wetter landscape positions = thicker, darker surfaces).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/thompson.bell.darkness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thompson-Bell (1996) Index — thompson.bell.darkness","text":"","code":"thompson.bell.darkness(   p,   name = hzdesgnname(p, required = TRUE),   pattern = \"^A\",   value = \"m_value\",   chroma = \"m_chroma\" )"},{"path":"https://ncss-tech.github.io/aqp/reference/thompson.bell.darkness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thompson-Bell (1996) Index — thompson.bell.darkness","text":"p single-profile SoilProfileCollection (e.g. via profileApply()) name Column name containing horizon designations used find horizons (default: first column name containing 'name') pattern Regular expression match horizons (default: \"^\" means horizon designation starts ) value Column name containing horizon color values (default: \"m_value\") chroma Column name containing horizon color chromas (default: \"m_chroma\")","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/thompson.bell.darkness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thompson-Bell (1996) Index — thompson.bell.darkness","text":"numeric vector reflecting horizon darkness (lower values = darker).","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/thompson.bell.darkness.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Thompson-Bell (1996) Index — thompson.bell.darkness","text":"Thompson, J.. Bell, J.C. (1996), Color Index Identifying Hydric Conditions Seasonally Saturated Mollisols Minnesota. Soil Science Society America Journal, 60: 1979-1988. doi:10.2136/sssaj1996.03615995006000060051x","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/thompson.bell.darkness.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Thompson-Bell (1996) Index — thompson.bell.darkness","text":"Andrew G. Brown","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/traditionalColorNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Traditional Soil Color Names — traditionalColorNames","title":"Traditional Soil Color Names — traditionalColorNames","text":"Traditional soil color names associated select Munsell colors.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/traditionalColorNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traditional Soil Color Names — traditionalColorNames","text":"","code":"data(traditionalColorNames)"},{"path":"https://ncss-tech.github.io/aqp/reference/traditionalColorNames.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Traditional Soil Color Names — traditionalColorNames","text":"object class data.frame 482 rows 2 columns.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/traditionalColorNames.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Traditional Soil Color Names — traditionalColorNames","text":"Sourced \"colorconverter\" NASIS property script.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/transform.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform a SPC with expressions based on site or horizon level attributes — transform,SoilProfileCollection-method","title":"Transform a SPC with expressions based on site or horizon level attributes — transform,SoilProfileCollection-method","text":"transform() function used modifying columns SoilProfileCollections. allows user specify arbitrary number expressions resolve (re-)calculation one site horizon level attributes. instance: mutate(spc, thickness = hzdepb - hzdept). expressions may depend one another, evaluated left right.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform a SPC with expressions based on site or horizon level attributes — transform,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' transform(`_data`, ...)"},{"path":"https://ncss-tech.github.io/aqp/reference/transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform a SPC with expressions based on site or horizon level attributes — transform,SoilProfileCollection-method","text":"_data SoilProfileCollection ... Comma-separated set R expressions e.g. thickness = hzdepb - hzdept, hzdepm = hzdept + round(thk / 2)","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform a SPC with expressions based on site or horizon level attributes — transform,SoilProfileCollection-method","text":"SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/transform.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform a SPC with expressions based on site or horizon level attributes — transform,SoilProfileCollection-method","text":"Andrew G. Brown.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/unique.html","id":null,"dir":"Reference","previous_headings":"","what":"Uniqueness within a SoilProfileCollection via MD5 Hash — unique,SoilProfileCollection-method","title":"Uniqueness within a SoilProfileCollection via MD5 Hash — unique,SoilProfileCollection-method","text":"Unique profiles within SoilProfileCollection using MD5 hash select horizon / site level attributes.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/unique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uniqueness within a SoilProfileCollection via MD5 Hash — unique,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' unique(x, vars, SPC = TRUE)"},{"path":"https://ncss-tech.github.io/aqp/reference/unique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uniqueness within a SoilProfileCollection via MD5 Hash — unique,SoilProfileCollection-method","text":"x SoilProfileCollection vars Variables consider uniqueness. SPC logical return SoilProfileCollection TRUE, otherwise vector profile indices","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/unique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uniqueness within a SoilProfileCollection via MD5 Hash — unique,SoilProfileCollection-method","text":"SoilProfileCollection SPC = TRUE, otherwise vector integers","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/unique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Uniqueness within a SoilProfileCollection via MD5 Hash — unique,SoilProfileCollection-method","text":"","code":"# an example soil profile   x <- data.frame(     id = 'A',     name = c('A', 'E', 'Bhs', 'Bt1', 'Bt2', 'BC', 'C'),     top = c(0, 10, 20, 30, 40, 50, 100),     bottom = c(10, 20, 30, 40, 50, 100, 125),     z = c(8, 5, 3, 7, 10, 2, 12)   )      # init SPC   depths(x) <- id ~ top + bottom      # horizon depth variability for simulation   horizons(x)$.sd <- 2      # duplicate several times   x.dupes <- duplicate(x, times = 5)      # simulate some new profiles based on example   x.sim <- perturb(x, n = 5, thickness.attr = '.sd')      # graphical check   plotSPC(x.dupes, name.style = 'center-center')    plotSPC(x.sim, name.style = 'center-center')       # inspect unique results   plotSPC(unique(x.dupes, vars = c('top', 'bottom')), name.style = 'center-center')       # uniqueness is a function of variable selection   plotSPC(unique(x.sim, vars = c('top', 'bottom')), name.style = 'center-center')    plotSPC(unique(x.sim, vars = c('name')), name.style = 'center-center')"},{"path":"https://ncss-tech.github.io/aqp/reference/us.state.soils.html","id":null,"dir":"Reference","previous_headings":"","what":"US State Soils — us.state.soils","title":"US State Soils — us.state.soils","text":"listing 50 US state soils, along Puerto Rico Virgin Islands.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/us.state.soils.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"US State Soils — us.state.soils","text":"","code":"data(us.state.soils)"},{"path":"https://ncss-tech.github.io/aqp/reference/us.state.soils.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"US State Soils — us.state.soils","text":"state state name abbreviated abbreviated state name series soil series name","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/validSpatialData.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for valid spatial reference of profiles — validSpatialData,SoilProfileCollection-method","title":"Check for valid spatial reference of profiles — validSpatialData,SoilProfileCollection-method","text":"coordinate column names defined metadata existing SoilProfileCollection?","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/validSpatialData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for valid spatial reference of profiles — validSpatialData,SoilProfileCollection-method","text":"","code":"# S4 method for class 'SoilProfileCollection' validSpatialData(object)"},{"path":"https://ncss-tech.github.io/aqp/reference/validSpatialData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for valid spatial reference of profiles — validSpatialData,SoilProfileCollection-method","text":"object SoilProfileCollection","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/validSpatialData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for valid spatial reference of profiles — validSpatialData,SoilProfileCollection-method","text":"logical TRUE column names defined correspond existing data","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/warpHorizons.html","id":null,"dir":"Reference","previous_headings":"","what":"Inflate / Deflate Horizon Thickness — warpHorizons","title":"Inflate / Deflate Horizon Thickness — warpHorizons","text":"function applies warping factor horizons single-profile SoilProfileCollection object. Warping values >1 inflate horizon thickness, values <1 deflate horizon thickness.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/warpHorizons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inflate / Deflate Horizon Thickness — warpHorizons","text":"","code":"warpHorizons(x, fact, updateProfileID = TRUE, suffix = \"-w\")"},{"path":"https://ncss-tech.github.io/aqp/reference/warpHorizons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inflate / Deflate Horizon Thickness — warpHorizons","text":"x SoilProfileCollection object fact numeric character; warping factor specified single numeric value, vector numeric values (length = nrow(x)), column name horizon level attribute containing numeric values updateProfileID logical; modify profile IDs suffix character; suffix added profile IDs updateProfileID = TRUE","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/warpHorizons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inflate / Deflate Horizon Thickness — warpHorizons","text":"modified version x, SoilProfileCollection object","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/warpHorizons.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inflate / Deflate Horizon Thickness — warpHorizons","text":"D.E. Beaudette S.W. Salley","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/warpHorizons.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inflate / Deflate Horizon Thickness — warpHorizons","text":"","code":"# create an example profile s <- quickSPC('p1:AA|Bt1Bt1Bt1|Bt2Bt2B|Bt3|Cr|RRRRR')  # warp each horizon # values > 1: inflation # values < 1: deflation (erosion / compaction) s.w <- warpHorizons(s, fact = c(1.3, 0.7, 0.8, 1, 1, 1))  # combine original + warped x <- combine(s, s.w)  # compute profile bottom depths .bottoms <- x[, , .LAST, .BOTTOM]  # change in total depth after warping # used to vertically offset the warped profile .yoff <- c(0, .bottoms[1] - .bottoms[2])  # depths for line segments connecting horizon tops .y1 <- x[1, , .TOP] .y2 <- x[2, , .TOP] + .yoff[2]  # sketches # can't automatically add a depth axis par(mar = c(0.5, 0, 0, 2)) plotSPC(   x,    name.style = 'center-center',    cex.names = 0.8,    width = 0.2,    max.depth = 150,    depth.axis = list(line = -3),    y.offset = .yoff ) #> depth axis is disabled when more than 1 unique y offsets are supplied  # illustrate warping with arrows arrows(x0 = 1 + 0.25, y0 = .y1, x1 = 2 - 0.25, y1 = .y2, len = 0.1, col = 2)  # manually add depth axis axis(side = 4, line = -3.5, las = 1, at = seq(from = 0, to = 150, by = 25))    # apply to multiple profiles # text-based template .template <- c( 'P1:AAA|BwBwBwBw|CCCCCCC|CdCdCdCd', 'P2:ApAp|AA|E|BhsBhs|Bw1Bw1|CCCCC', 'P3: A|Bt1Bt1Bt1|Bt2Bt2Bt2|Bt3|Cr|RRRRR' )  # each horizon label is '10' depth-units (default) s <- quickSPC(.template)  # random warping factor, by horizon s$f <- runif(n = nrow(s), min = 0.8, max = 1.2)  # warp horizons by profile, result is a list of SPCs s.w <- profileApply(s, FUN = warpHorizons, fact = 'f')  # flatten list -> SoilProfileCollection s.w <- combine(s.w)  # combine with original SPC x <- combine(s, s.w)  # sketches  par(mar = c(0.5, 0, 0, 2.5)) plotSPC(   x,   name.style = 'center-center',   cex.names = 0.8,   width = 0.3,   max.depth = 165,   depth.axis = list(line = -2) )"},{"path":"https://ncss-tech.github.io/aqp/reference/wilson2022.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data from Wilson et al. 2022 — wilson2022","title":"Example Data from Wilson et al. 2022 — wilson2022","text":"example SoilProfileCollection, derived Wilson et al., 2022. Select data extracted Appendix tables.","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/wilson2022.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data from Wilson et al. 2022 — wilson2022","text":"","code":"data(wilson2022)"},{"path":"https://ncss-tech.github.io/aqp/reference/wilson2022.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Data from Wilson et al. 2022 — wilson2022","text":"SoilProfileCollection following elements. Total elemental analysis lithium borate fusion. Horizon level attributes: name: horizon designation Al2O3: total Al (wt %) Fe2O3: total Fe (wt %) K2O: total K (wt %) MgO: total Mg (wt %) Na2O: total Na (wt %) P2O5: total P (wt %) SiO2: total Si (wt %) CaO: total Ca(wt %) Alo: Oxalate Extractable Al (g/kg) Feo: Oxalate Extractable Fe (g/kg) Fed: Dithionite extractable Fe (g/kg) Fed_minus_Feo: Crystalline Fe (hydr)oxides (g/kg) CIA: Chemical Index Alteration, see original paper (ratio, unitless) Fed_div_Fet: (ratio, unitless) Fet: Total Fe lithium borate fusion (g/kg) resin_Pi: Hedley phosphorus fractions (mg/kg) NaHCO3_Pi: Hedley phosphorus fractions (mg/kg) labile_Pi: Sum resin Pi NaHCO3 Pi (mg/kg) NaCO3_Po: Hedley phosphorus fractions (mg/kg) NaOH_Pi: Hedley phosphorus fractions (mg/kg) NaOH_Po: Hedley phosphorus fractions (mg/kg) Ca_Pi: Hedley phosphorus fractions (mg/kg) organic_P: Sum NaHCO3 NaOH Po fractions (mg/kg) total_P: Total P lithium borate fusion (mg/kg) occluded_P: Difference total P sum Hedley P fractions (mg/kg) top: horizon top depth (cm) bottom: horizon bottom depth (cm) pedonID: pedon ID (serial number) Site level attributes: pm: parent material group biome: biome","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/wilson2022.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example Data from Wilson et al. 2022 — wilson2022","text":"Stewart G. Wilson, Randy . Dahlgren, Andrew J. Margenot, Craig Rasmussen, Anthony T. O'Geen. 2022. Expanding Paradigm: influence climate lithology soil phosphorus, Geoderma: 421. doi:10.1016/j.geoderma.2022.115809","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/wilson2022.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Data from Wilson et al. 2022 — wilson2022","text":"","code":"data(wilson2022)  groupedProfilePlot(wilson2022, groups = 'pm',  group.name.offset = -15, label = 'biome',  name.style = 'center-center', color = 'CIA',  cex.names = 0.66, cex.id = 0.66, width = 0.3)   groupedProfilePlot(wilson2022, groups = 'biome',  group.name.offset = -15, label = 'pm',  name.style = 'center-center', color = 'Fet',  cex.names = 0.66, cex.id = 0.66, width = 0.3)"},{"path":"https://ncss-tech.github.io/aqp/reference/xtableTauW.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a LaTeX table with results — xtableTauW","title":"Format a LaTeX table with results — xtableTauW","text":"Format LaTeX table results","code":""},{"path":"https://ncss-tech.github.io/aqp/reference/xtableTauW.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a LaTeX table with results — xtableTauW","text":"","code":"xtableTauW(result.tau, file.name = \"tau_results_table.tex\")"},{"path":"https://ncss-tech.github.io/aqp/reference/xtableTauW.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a LaTeX table with results — xtableTauW","text":"result.tau results returned tauW file.name name file write output TeX file; Default: file.name=\"tau_results_table.tex\"","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-22-1-2025-09-16","dir":"Changelog","previous_headings":"","what":"aqp 2.2-1 (2025-09-16)","title":"aqp 2.2-1 (2025-09-16)","text":"CRAN release: 2025-09-17 CRAN release moving vignettes pkgdown articles (https://ncss-tech.github.io/aqp/) minor fixes preparation Munsell reference spectra, reflectance now constrained [0,1] removed extrapolated Munsell chip spectra values > 9 added (estimated) Munsell spectra chroma 1 added rp() convenience wrapper random_profile() efficiency boost NCSP() via caching pair-wise distances function unroll() used since aqp < 2.0, removed.","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-22-2025-02-14","dir":"Changelog","previous_headings":"","what":"aqp 2.2 (2025-02-14)","title":"aqp 2.2 (2025-02-14)","text":"CRAN release: 2025-02-15 CRAN release evalGenHz() now uses stats::cmdscale() instead MASS:isoMDS() migrating functions sharpshootR aqp: plotProfileDendrogram() aggregateColorPlot() fix hz_segment() NCSP() data.table SoilProfileCollection objects (#320) fix generalize.hz() handle missing depths better added na.rm argument (#321) finally dropping plyr suggests (#157) profile_compare() removed, see NCSP()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-210-2024-10-16","dir":"Changelog","previous_headings":"","what":"aqp 2.1.0 (2024-10-16)","title":"aqp 2.1.0 (2024-10-16)","text":"CRAN release: 2024-10-19 CRAN release added Munsell values 8.5 9.5 Munsell look table (interpolated) reference spectra (#318) munsell2rgb() now safely selects closest Munsell value chroma available package LUT new function soilTextureColorPal() suggesting color palette suitable soil texture class SoilProfileCollection objects previously written file (.rda, .rds) aqp <2.1.x need rebuilt using rebuildSPC() due changes S4 object structure estimatePSCS() gains argument \"lieutex\" lieu textures used new routine identification particle size control section organic soils new function collapseHz() combines aggregates data adjacent horizons matching pattern sharing common ID new function mutate_profile_raw() building sets dynamic mutate expressions. Also mutate_profile() gains col_names argument dynamic naming columns. addVolumeFraction() now robust thin horizons x low volume fractions; also skips horizons without sufficient relevant values","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-204-2024-07-30","dir":"Changelog","previous_headings":"","what":"aqp 2.0.4 (2024-07-30)","title":"aqp 2.0.4 (2024-07-30)","text":"CRAN release: 2024-07-30 CRAN release ragged bottom lines plotSPC() now adjusted function number profiles device width additional metadata plotSPC() saved last_spc_plot aqp.env","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-203-2024-04-18","dir":"Changelog","previous_headings":"","what":"aqp 2.0.3 (2024-04-18)","title":"aqp 2.0.3 (2024-04-18)","text":"CRAN release: 2024-04-18 CRAN release package mvtnorm added SUGGESTS performance improvements profileInformationIndex(), dice(), slab(), spc2mpspline(), fillHzGaps(), flagOverlappingHz() aesthetic improvements huePositionCircle() new function thicknessOf() used calculating thickness horizons within profile SoilProfileCollection based horizon-level logical expressions encoded function. Default behavior uses pattern matching horizon designation name.","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-202-2023-11-18","dir":"Changelog","previous_headings":"","what":"aqp 2.0.2 (2023-11-18)","title":"aqp 2.0.2 (2023-11-18)","text":"CRAN release: 2023-11-28 CRAN release bug fix / enhancements evalMissingData() rgb2munsell() deprecated aqp 2.1 new function warpHorizons() warping horizon thickness (inflate/deflate) (thanks Shawn Salley idea / inspiration) fixed minor bug plotColorMixture() final mixed color exist spectral library fixed minor namespace collision groupedProfilePlot() major updates profileInformationIndex() (vignette pending)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-201-2023-09-03","dir":"Changelog","previous_headings":"","what":"aqp 2.0.1 (2023-09-03)","title":"aqp 2.0.1 (2023-09-03)","text":"CRAN release: 2023-09-06 CRAN release (CRAN check bugfix) new function flagOverlappingHz() identifying horizons perfect overlap fillHzGaps(), dice(), slab(), several functions now safely handle horizons perfect overlap (#296)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-20-2023-08-28","dir":"Changelog","previous_headings":"","what":"aqp 2.0 (2023-08-28)","title":"aqp 2.0 (2023-08-28)","text":"CRAN release: 2023-08-28 major update aqp may create issues code depending specific inputs/outputs aqp < 1.42, particularly relying slice(), slab(), profile_compare(). slice() profile_compare() now deprecated, continue work rest calendar year 2023. plans maintain functions beyond aqp 2.0. new version slab() drop-replacement previous version function. Notable changes include: deprecation slice() favor new, faster, robust implementation dice() complete overhaul slab(), new arguments, faster back-end, weighted aggregation implemented (finally) site level attributes now handled compareSites() variable weights now possible via argument perturb() estimatePSCS() now vectorized, optimized larger collections mixMunsell() now uses mixingMethod = 'exact' default simulation subtractive mixtures gower package moved SUGGESTS plotColorMixture() now using grid graphics functions determine color swatch geometry setting overlap detection threshold removal PMS2Munsell() support data deprecation coordinates()<- proj4string()<- favor initSpatial()<- removal rruff.sample example XRD patterns get.ml.hz() longer uses name argument Major changes plotSPC(): maximum depth range figure now based max.depth max(x). means sketches generated aqp 2.x generally less white space bottom figure. Make room additional annotation visual effect setting desired depth range max.depth argument. now uses electroStatics_1D() fixing horizon depth label overlap, solutions deterministic almost always better better depth axis interval heuristics (specified), varying based figure depth range depth axis adjustments via new argument depth.axis, logical list plot.depth.axis: set via depth.axis = TRUE, depth.axis = FALSE, customize depth.axis = list(...) cex.depth.axis: set via depth.axis = list(cex = 1) axis.line.offset: set via depth.axis = list(line = -2) New features: example data, wilson2022 fast prototyping SPCs via quickSPC() list / character templates re-use arguments plotSPC() via options(.aqp.plotSPC.args = list(...)) coarse fragment classification via fragmentSieve() fragmentClasses() S4 .data.frame(<SPC>) shorthand (<SPC>, 'data.frame') plotSPC() now marks truncated profiles ragged bottom fixOverlap() now two label-placement solvers, based 1) electrostatics 2) simulated annealing new depth axis styles plotSPC() Incremental changes, effect previous code: bug fix plotSPC() fixLabelCollisions = TRUE, adjustments suggested fixOverlap() now scaled correctly explainPlotSPC() reports label adjustment index label collision repair enabled aesthetic cleanup explainPlotSPC() soilColorSignature() gains arguments perceptual color distances (dE00) via farver package (<SPC>, \"data.frame\"): Replace plyr::join() merge() correctAWC(): NA handling - return NA frags NA mutate_profile(): Faster (data.table-based) evaluation profile-level expressions (#255) profileApply: Add support custom lapply()-like function (APPLY.FUN) processing chunks (#256) Add .interpretHorizonColor() outputs last_spc_plot aqp.env use custom legend() (#254) Add simplify argument SoilTextureLevels() ssc_to_texcl() optionally convert ordered factor maximum 12 levels (rather 21). smaller list classes excludes sand grain size variants fine sand, loamy coarse sand, fine sandy loam.","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-142-2022-04-08","dir":"Changelog","previous_headings":"","what":"aqp 1.42 (2022-04-08)","title":"aqp 1.42 (2022-04-08)","text":"CRAN release: 2022-04-11 CRAN release getArgillicBounds(), getCambicBounds(), mollic.thickness.requirement(), getSurfaceHorizonDepth() related functions optimized now work SoilProfileCollection objects length > 1 Added reduceSPC() function selecting subset minimal plus additional specified columns SoilProfileCollection object[,,.NHZ] returns vector number horizons profile proper identification conversion Munsell value == 2.5 interpolated reference spectra Munsell value == 2.5 neutral color chips Munsell look-table now based direct measurement vs. estimation","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-141-2022-02-11","dir":"Changelog","previous_headings":"","what":"aqp 1.41 (2022-02-11)","title":"aqp 1.41 (2022-02-11)","text":"CRAN release: 2022-02-11 plotSPC() gains new arguments controlling horizon depth labels plotSPC() gains horizon depth annotation collision fixes (https://github.com/ncss-tech/aqp/issues/240) plotSPC() minor bugfix cases n != length(x) plotSPC() important change! y.offset now automatically re-ordered plot.order bugfix R 4.2, related named arguments passed base::aggregate (thanks AGB) depthOf() related functions: better handling NA results FUN","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-140-2022-01-04","dir":"Changelog","previous_headings":"","what":"aqp 1.40 (2022-01-04)","title":"aqp 1.40 (2022-01-04)","text":"CRAN release: 2022-01-04 CRAN release fixed small bug panel.depth_function() affected plotting grouped data, created slab() plotSPC() now uses variable (vertical) text alignment horizon depth labels new function profileInformationIndex() estimateSoilDepth() now requires valid horizon designation (longer attempts guess) {aqp} longer masks {dplyr} verbs: group_by(), summarize(), mutate() removed (deprecated) f.noise() resample.twotheta(): use {powdR} package instead new functions: texture_to_texmod() fragvol_to_texmod() c/o @smroecker faster, robust version slice() implemented dice()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-132-2021-09-28","dir":"Changelog","previous_headings":"","what":"aqp 1.32 (2021-09-28)","title":"aqp 1.32 (2021-09-28)","text":"CRAN release: 2021-09-29 colorChart() can now show neutral hues skinny panel updates colorContrast(), parseMunsell(), huePosition() work properly neutral hues huePosition() gains new arguments functionality: origin direction new function huePositionCircle() helping visualize differences Munsell hue unit circle width = 0.25: slightly wider profile sketches name = hzdesgnname(x): use metadata present, longer guessing. may cause figures “lose” previously guessed horizon names, specify name = 'column name' set metadata hzdesgnname(x) <- 'hzname'","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-131-2021-08-19","dir":"Changelog","previous_headings":"","what":"aqp 1.31 (2021-08-19)","title":"aqp 1.31 (2021-08-19)","text":"CRAN release: 2021-08-19 CRAN release bug fix checkHzDepthLogic() byhz = TRUE new function simulateColor() simulation reasonable colors new function colorChart() graphical depiction Munsell chip frequency group","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-130-2021-07-14","dir":"Changelog","previous_headings":"","what":"aqp 1.30 (2021-07-14)","title":"aqp 1.30 (2021-07-14)","text":"CRAN release: 2021-07-27 may break existing code! use new argument SPC = FALSE previous behavior (https://github.com/ncss-tech/aqp/issues/159) aggregateColor() now uses mixMunsell estimation soil color mixtures plotColorMixture() respect “names” attribute colors--mix, without erroneous alpha-sorting parseMunsell() now robust faster, c/o P. Roudier new method exact direct conversion mixture spectra sRGB closest Munsell chip (via spec2Munsell()) new convenience function PMS2Munsell() converting PMS codes -> closest Munsell chip (https://github.com/ncss-tech/aqp/issues/124) z1 z2 support non-standard evaluation based column names siteNames(p), also can take character vector (length 1) column names siteNames(p) input SoilProfileCollection one profile result data.frame containing profile ID, top bottom depths, horizon designation pattern","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-129-2021-04-05","dir":"Changelog","previous_headings":"","what":"aqp 1.29 (2021-04-05)","title":"aqp 1.29 (2021-04-05)","text":"CRAN release: 2021-04-07 CRAN release filter, mutate, group_by, summarize {base}-like syntax: “filter” -> subset, “mutate” -> transform, “combine” -> c *SPC syntax: filterSPC, mutateSPC, groupSPC, summarizeSPC aware dplyr::combine (deprecated {dplyr} 0.7) still conflicts Use c() combine() SoilProfileCollection input Usecombine() pbindlist() list input Methods used {rlang} non-standard evaluation now use {base} plotSPC() gains vectorized y.offset support (demonstrated : http://ncss-tech.github.io/AQP/aqp/genhz-distance-eval.html) plotSPC() gains argument shrink.thin shrinking horizon designation labels horizons thin new function alignTransect() simplifying relative positioning profile sketches plotMultipleSPC() gains ability automatically merge thematic legends coordinates<- check formula terms (unique coordinates) @horizons slot, needed. new function spec2Munsell() converting reflectance spectra sRGB coordinates closest Munsell chip new mixingMethod argument selecting several mixing strategies suggestions interpreting spectral distances, message printed greater reasonable threshold minor bug-fix panel.depth_function plotting grouped step-functions","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-128-2021-03-02","dir":"Changelog","previous_headings":"","what":"aqp 1.28 (2021-03-02)","title":"aqp 1.28 (2021-03-02)","text":"optimization SoilProfileCollection [,j]-index extraction using {data.table} introduction .LAST, .FIRST .HZID SoilProfileCollection “k-keywords” perturb() new generalized replacement sim() permute_profile() checkHzDepthLogic() now byhz argument checking logic horizon rather profile fillHzGaps now to_top to_bottom arguments filling shallowest top / deepest bottom profile overlapMetrics() instead findOverlap() part objective function cooling schedule now fully adjustable via T0 k arguments alignTransect helper function computing relative positions ordering vector supplied plotSPC plotSPC() automatically converts logical data supplied color argument factor glom() now vectorized profiles estimateAWC introduced testing lookup table estimation available water capacity (AWC) fine-earth fraction correctAWC introduced testing corrections AWC estimates rock fragment salts","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-127-2021-01-22","dir":"Changelog","previous_headings":"","what":"aqp 1.27 (2021-01-22)","title":"aqp 1.27 (2021-01-22)","text":"CRAN release: 2021-01-26 fillHzGaps: new function fixing horizon depth topological errors padding top/bottom profiles placeholder (empty) horizons mixMunsell now relies suggested package {gower} 5-10x speed bump {aqp} longer imports {reshape} (less one dependency), transformations wide<->long done via {data.table} methods {data.table} now imported {aqp} (new dependency) Major overhaul plotColorQuantiles(), now using {lattice} graphics New dataset equivalent_munsell method equivalentMunsellChips “equivalent” Munsell chips lookup list based pairwise dE00 contrasts integer “chips” {aqp} munsell data set Argillic critical clay contents crit.clay.argillic rounded whole numbers per NSSH Part 614, subpart B, sections 614.13 614.14","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-126-2020-11-18","dir":"Changelog","previous_headings":"","what":"aqp 1.26 (2020-11-18)","title":"aqp 1.26 (2020-11-18)","text":"mutate_profile uses data.table::rbindlist(fill=TRUE) combine site- horizon-level transformations updates horizon boundary encoding functions (hzTopographyCodeToOffset, hzTopographyCodeToLineType, hzDistinctnessCodeToOffset) new function L1_profiles computes multivariate (L1) medians, compare marginal medians via slab argument named changes: hz.boundary.lty horizon-level attribute contains line type codes hz.topography.offset horizon-level attribute contains representative offsets encode horizon boundary topography plotSPC now encodes hz.topography.offset using vertical “bump” (chevron) addBracket can now accept multiple bracket annotations per profile","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-125-2020-10-15","dir":"Changelog","previous_headings":"","what":"aqp 1.25 (2020-10-15)","title":"aqp 1.25 (2020-10-15)","text":"CRAN release: 2020-10-19 CRAN release new lookup table pms.munsell.lut converting Pantone spot color codes (closest) Munsell chip new function duplicate makes copies profiles within SoilProfileCollection new example data us.state.soils: 50 state soils + PR VI soils see companion function plotColorMixture visualization spectra / mixture uses soiltexture package visualization (plotrix implementation dropped) argument names changes (! may break old code, sorry) dropped simulation via sim = TRUE argument, see bootstrapSoilTexture better approach new function bootstrapSoilTexture simulating realistic sand/silt/clay compositions combine replaces/expands aqp::union due conflicts base::union split receives upgrades S4 definition increase parity split.default filter now alias new method subset, mirrors base::subset","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-124-2020-08-31","dir":"Changelog","previous_headings":"","what":"aqp 1.24 (2020-08-31)","title":"aqp 1.24 (2020-08-31)","text":"estimateSoilDepth loses top bottom arguments, automatically extracted two new SoilProfileCollection wrapper methods: munsell2SPC, spc2mpspline add returnData argument contrastChart improvements glom(..., invert=TRUE), glomApply, better tests new wrapper method around glomApply: aqp::trunc cases top bottom depth interval profiles SoilProfileCollection fix routing NULL $<- horizons<- site<- (https://github.com/ncss-tech/aqp/issues/163) fix handling missing metadata (old) serialized SoilProfileCollection objects fix promotion data.table character vector (formula) interface","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-123-2020-07-14","dir":"Changelog","previous_headings":"","what":"aqp 1.23 (2020-07-14)","title":"aqp 1.23 (2020-07-14)","text":"enhanced SoilProfileCollection object validity checks via S4; new method spc_in_sync (https://github.com/ncss-tech/aqp/pull/152) optimization [ subset method optional use data.table (https://github.com/ncss-tech/aqp/pull/155) depths<- optimized minimally validates input data default horizon ID (hzID) now character data type aqp::union uses depths<- internally; explicitly enforcing profile ID + top depth order horizon data safer results different ordering union-ing IDs “intermingle” (need re-sorted). new experimental method permute_profile; similar sim boundaries. interface function likely change/expanded. added segment c/o @smroecker fix unit-length zero-length legends plotSPC fix plot generic show aqp::plot ?plot","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-122-2020-06-24","dir":"Changelog","previous_headings":"","what":"aqp 1.22 (2020-06-24)","title":"aqp 1.22 (2020-06-24)","text":"basic support promotion tbl_df data.table SoilProfileCollection new method aqp_df_class determine class name use SoilProfileCollection object plotSPC upgrades (https://github.com/ncss-tech/aqp/pull/146) new methods related mollic epipedon: mollic.thickness.requirement, hasDarkColors new estimateSoilDepth-like methods depth multiple features via pattern matching: depthOf, minDepthOf, maxDepthOf soil texture helper functions (ssc_to_texcl, texcl_to_ssc, texmod_to_fragvoltot, texture_to_taxpartsize) optimization [,] [,j] subset methods data.frame-based slots (https://github.com/ncss-tech/aqp/issues/135) new verbs: mutate, mutate_profile (https://github.com/ncss-tech/aqp/issues/118) ROSETTA centroids water retention texture class (https://github.com/ncss-tech/aqp/issues/131) fix getSurfaceHorizonDepth buried horizons / non-contiguous instances matching horizons (https://github.com/ncss-tech/aqp/issues/132) fix default plotSPC small number profiles ((https://github.com/ncss-tech/aqp/issues/128) remove implicit conversion SpatialPointsDataFrame unit-length [ j-index subset ((https://github.com/ncss-tech/aqp/issues/125) fix slab slab.structure[2] > max(x)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-11901-2020-02-07","dir":"Changelog","previous_headings":"","what":"aqp 1.19.01 (2020-02-07)","title":"aqp 1.19.01 (2020-02-07)","text":"proof concept tidy SoilProfileCollection subsetting define [[ subsetting method; “ambivalent” accessor site- horizon-level properties new subset verbs grepSPC, filter, subApply use %>%-lines","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-119-2020-01-22","dir":"Changelog","previous_headings":"","what":"aqp 1.19 (2020-01-22)","title":"aqp 1.19 (2020-01-22)","text":"CRAN release: 2020-01-24 CRAN release new functions: hzDesgn(), get horizon designations SPC new functions: hzdesgnname()/hzdesgnname()<- hztexclname()/hztexclname()<- get/set column containing horizon designations texture classes better error/logic handling glom()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-1185-2020-01-21","dir":"Changelog","previous_headings":"","what":"aqp 1.18.5 (2020-01-21)","title":"aqp 1.18.5 (2020-01-21)","text":"profileApply() enhancement large SoilProfileCollection objects (https://github.com/ncss-tech/aqp/issues/112) add profileApply() frameify argument data.frame output (https://github.com/ncss-tech/aqp/issues/111) checkHzDepthLogic() replaces test_hz_logic() thanks farver >= 2.0.3, rgb2munsell() colorQuantiles() now uses CIE2000 distance metric color comparison","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-1184-2020-01-06","dir":"Changelog","previous_headings":"","what":"aqp 1.18.4 (2020-01-06)","title":"aqp 1.18.4 (2020-01-06)","text":"bug fix (rare) setting / replacing horizon attributes (https://github.com/ncss-tech/aqp/issues/105) bug fix colorQuantiles farver 2.0.2 available CRAN SoilProfileCollection object gains new slot: @restrictions, fix old objects rebuildSPC()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-1183-2019-12-19","dir":"Changelog","previous_headings":"","what":"aqp 1.18.3 (2019-12-19)","title":"aqp 1.18.3 (2019-12-19)","text":"evalMissingData() gets new argument relative vs. absolute evaluation missing data horizonColorIndices(), harden.rubification(), harden.melanization(), thompson.bell.darkness() associated functions soilColorIndices.R fix https://github.com/ncss-tech/aqp/issues/44 fix https://github.com/ncss-tech/aqp/issues/66 new example data: rowley2019 dropped dependencies","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-11710-2019-10-30","dir":"Changelog","previous_headings":"","what":"aqp 1.17.10 (2019-10-30)","title":"aqp 1.17.10 (2019-10-30)","text":"slab() now uses stats::quantile() default slab function details : https://github.com/ncss-tech/aqp/issues/79 previous behavior slab() can activated via argument: slab.fun = aqp:::.slab.fun.numeric.HD","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-11708-2019-10-03","dir":"Changelog","previous_headings":"","what":"aqp 1.17.08 (2019-10-03)","title":"aqp 1.17.08 (2019-10-03)","text":"generalize.hz() gets argument passing additional arguments grep(), e.g. perl=TRUE addVolumeFraction() can now accept vector colors, many number horizons new sample data: jacobs2000, pending documentation aggregateColor() faster accurate, using delta-E00 quantized colors c/o {farver} (see https://github.com/ncss-tech/aqp/issues/98) new functions contrastChart() soilPalette() aqp 1.18 scheduled next CRAN release","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-11706-2019-07-15","dir":"Changelog","previous_headings":"","what":"aqp 1.17.06 (2019-07-15)","title":"aqp 1.17.06 (2019-07-15)","text":"plotSPC() gains new argument relative positioning: relative.pos relative positioning helper function: fixOverlap(), see manual page examples explainPlotSPC(), addDiagnosticBracket(), addVolumeFraction() updated accordingly","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-11705-2019-05-18","dir":"Changelog","previous_headings":"","what":"aqp 1.17.05 (2019-05-18)","title":"aqp 1.17.05 (2019-05-18)","text":"new functions colorContrast(), contrastClass(), huePosition()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-11702-2019-03-15","dir":"Changelog","previous_headings":"","what":"aqp 1.17.02 (2019-03-15)","title":"aqp 1.17.02 (2019-03-15)","text":"fixed nasty bug [-indexing SPC contains single profile (https://github.com/ncss-tech/aqp/issues/85) new function validSpatialData() test place-holder contents @sp rebuildSPC() now correct invalid, place-holder SpatialPoints @sp","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-11701-2019-02-07","dir":"Changelog","previous_headings":"","what":"aqp 1.17.01 (2019-02-07)","title":"aqp 1.17.01 (2019-02-07)","text":"new version number system plotSPC() now attempt create multi-row legends using factor > n.legend levels plotSPC() now generate > 10 colors legends associated factor (https://github.com/ncss-tech/aqp/issues/9) munsell2rgb() now return CIE LAB coordinates requested (https://github.com/ncss-tech/aqp/issues/69)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-117-2018-12-28","dir":"Changelog","previous_headings":"","what":"aqp 1.17 (2018-12-28)","title":"aqp 1.17 (2018-12-28)","text":"CRAN release: 2019-01-03 CRAN release aggregateColor() gets new feature, similar colors can grouped via cluster::pam() new functions: previewColors(), colorQuantiles(), plotColorQuantiles() new function: horizonDepths()<-, edit top/bottom names SPC init new function: profile_id()<-, edit profile IDs init; careful! new functions: hzID() hzID()<-, get/set unique horizon IDs new functions: hzidname() hzidname()<-, get/set column containing unique horizon IDs rbind.SoilProfileCollection() deprecated favor union(), gains new functionality: https://github.com/ncss-tech/aqp/issues/71 bug fixes sanity checks within horizonNames()<- !!! SoilProfileCollection internal structure changed: https://github.com/ncss-tech/aqp/issues/74 see release notes : https://github.com/ncss-tech/aqp/releases/tag/v1.17","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-116-6-2018-12-12","dir":"Changelog","previous_headings":"","what":"aqp 1.16-6 (2018-12-12)","title":"aqp 1.16-6 (2018-12-12)","text":"partial bug fix test_hz_logic() related missing top bottom depths, needs work: https://github.com/ncss-tech/aqp/issues/65","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-116-5-2018-11-21","dir":"Changelog","previous_headings":"","what":"aqp 1.16-5 (2018-11-21)","title":"aqp 1.16-5 (2018-11-21)","text":"moved explainPlotSPC SPC tutorial aqp::explainPlotSPC() plotSPC() little better estimating “extra” vertical / horizontal space, still needs work (https://github.com/ncss-tech/aqp/issues/62)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-116-2-2018-05-22","dir":"Changelog","previous_headings":"","what":"aqp 1.16-2 (2018-05-22)","title":"aqp 1.16-2 (2018-05-22)","text":"fixing #53 #54 bug fix many decimal places legend classes (floating point -> character issue) plotSPC() gets new argument, n.legend: approximate number classes","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-1155-2018-03-14","dir":"Changelog","previous_headings":"","what":"aqp 1.15.5 (2018-03-14)","title":"aqp 1.15.5 (2018-03-14)","text":"enhancement aggregateColor() cases horizon depths missing top/bottom logic flipped","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-1154-2018-01-29","dir":"Changelog","previous_headings":"","what":"aqp 1.15.4 (2018-01-29)","title":"aqp 1.15.4 (2018-01-29)","text":"bug fix addVolumeFraction() fragment volume > 100%","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-1153-2018-01-24","dir":"Changelog","previous_headings":"","what":"aqp 1.15.3 (2018-01-24)","title":"aqp 1.15.3 (2018-01-24)","text":"added new argument addDiagnosticBracket() allowing specification column containing diagnostic feature kind addBracket() now requires data.frame plotting details, see manual page","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-1152-2017-11-30","dir":"Changelog","previous_headings":"","what":"aqp 1.15.2 (2017-11-30)","title":"aqp 1.15.2 (2017-11-30)","text":"added shannonEntropy(), confusionIndex(), brierScore() bug fix get.ml.hz() horizon names start number punctuation get.ml.hz() now uses internal aqp functions Shannon entropy Brier scores","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-115-2017-11-11","dir":"Changelog","previous_headings":"","what":"aqp 1.15 (2017-11-11)","title":"aqp 1.15 (2017-11-11)","text":"CRAN release: 2017-11-12 push CRAN, getting ready aqp 2.0","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-114-2017-09-19","dir":"Changelog","previous_headings":"","what":"aqp 1.14 (2017-09-19)","title":"aqp 1.14 (2017-09-19)","text":"missingDataGrid() relaxing slice() strict=FALSE","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-112-2017-07-05","dir":"Changelog","previous_headings":"","what":"aqp 1.12 (2017-07-05)","title":"aqp 1.12 (2017-07-05)","text":"CIELAB colors now munsell look-table","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-112-2017-07-05-1","dir":"Changelog","previous_headings":"","what":"aqp 1.12 (2017-07-05)","title":"aqp 1.12 (2017-07-05)","text":"plotSPC() now able deal missing horizon data (thanks Stephen R.) likely last release aqp 2.0","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-111-2017-06-13","dir":"Changelog","previous_headings":"","what":"aqp 1.11 (2017-06-13)","title":"aqp 1.11 (2017-06-13)","text":"rgb2munsell() now uses CIELAB colorspace lookup, results accurate compared using sRGB colorspace","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-110-4-2017-05-02","dir":"Changelog","previous_headings":"","what":"aqp 1.10-4 (2017-05-02)","title":"aqp 1.10-4 (2017-05-02)","text":"texture.triangle.low.rv.high() renamed textureTriangleSummary(). old name still works, message issued new argument textureTriangleSummary() texture.names: toggling texture class names minor bug fix textureTriangleSummary(..., sim=TRUE), previous simulated compositional data correct stats::var() used vs. compositions::var.acomp(). variance / covariance values 2-5x small. new function tauW(), added D.G. Rossiter: see manual page references","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-110-2017-01-05","dir":"Changelog","previous_headings":"","what":"aqp 1.10 (2017-01-05)","title":"aqp 1.10 (2017-01-05)","text":"CRAN release: 2017-01-06 fixed major bug (https://github.com/ncss-tech/aqp/issues/23) related editing horizon-level attributes rbind-ing","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-1913-2016-10-20","dir":"Changelog","previous_headings":"","what":"aqp 1.9.13 (2016-10-20)","title":"aqp 1.9.13 (2016-10-20)","text":"new dataset soil_minerals common soil mineral colors source: http://www.nrcs.usda.gov/wps/portal/nrcs/detail/soils/edu/?cid=nrcs142p2_054286 added clarification Munsell color conversion: changed “RGB” “sRGB”.","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-1910-2016-07-01","dir":"Changelog","previous_headings":"","what":"aqp 1.9.10 (2016-07-01)","title":"aqp 1.9.10 (2016-07-01)","text":"CRAN release: 2016-07-08 new function estimating closest Munsell chip: getClosestMunsellChip() new example data set (sp6) based http://www.sciencedirect.com/science/article/pii/S0016706111001972","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-198-2016-03-07","dir":"Changelog","previous_headings":"","what":"aqp 1.9.8 (2016-03-07)","title":"aqp 1.9.8 (2016-03-07)","text":"munsell2rgb() can now accommodate neutral hues (N), values “2.5”, see manual page details","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-197-2016-02-25","dir":"Changelog","previous_headings":"","what":"aqp 1.9.7 (2016-02-25)","title":"aqp 1.9.7 (2016-02-25)","text":"new function: soilColorSignature(), see manual page convenience function calls munsell2rgb parsed strings full Munsell notation","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-196-2016-02-23","dir":"Changelog","previous_headings":"","what":"aqp 1.9.6 (2016-02-23)","title":"aqp 1.9.6 (2016-02-23)","text":"minor changes profile_compare(), getting ready complete overhaul function new function: evalMissingData(), see manual page","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-195-2015-12-28","dir":"Changelog","previous_headings":"","what":"aqp 1.9.5 (2015-12-28)","title":"aqp 1.9.5 (2015-12-28)","text":"documentation new transition probability functions, see ?hzTransitionProbabilities details","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-194-2015-12-22","dir":"Changelog","previous_headings":"","what":"aqp 1.9.4 (2015-12-22)","title":"aqp 1.9.4 (2015-12-22)","text":"better checking places bug fixed rbind.SoilProfileCollection (aqp 1.9.3) occur new functions: genhzTableToAdjMat, hzTransitionProbabilities","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-193-2015-12-18","dir":"Changelog","previous_headings":"","what":"aqp 1.9.3 (2015-12-18)","title":"aqp 1.9.3 (2015-12-18)","text":"CRAN release: 2015-12-19 aqp < 1.9.3: chance profile_id(x) site(x)[[idname(x)]]) match bugs like longer possibility aqp 2.0, new SPC object structure planned","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-191-2015-11-18","dir":"Changelog","previous_headings":"","what":"aqp 1.9.1 (2015-11-18)","title":"aqp 1.9.1 (2015-11-18)","text":"groupedProfilePlot() gains new arguments better documentation (see manual page) plot.SoilProfileCollection gains argument: default.color (see manual page)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-19-2015-08-26","dir":"Changelog","previous_headings":"","what":"aqp 1.9 (2015-08-26)","title":"aqp 1.9 (2015-08-26)","text":"added neutral colors munsell2rgb() new function guessGenHzLevels() new function aggregateColor() associated helper function sharpshootR::aggregateColorPlot() code clean-fixes examples make R CMD check ---cran happy fixed ancient examples profileApply() manual page","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-18-5-2015-04-17","dir":"Changelog","previous_headings":"","what":"aqp 1.8-5 (2015-04-17)","title":"aqp 1.8-5 (2015-04-17)","text":"bug fixes documentation updates digest::digest now imported default better documentation unique-method SoilProfileCollection objects","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-18-3-2015-03-02","dir":"Changelog","previous_headings":"","what":"aqp 1.8-3 (2015-03-02)","title":"aqp 1.8-3 (2015-03-02)","text":"updated documentation plotSPC gets new argument: x.idx.offset: allows plotting multiple SPC objects within figure, see examples plotSCP gets new argument: plot.depth.axis: enable / disable depth axis, useful multi-collection plots new function: profileGroupLabels: simple annotation groups profiles within profile sketch, see manual page examples new function: plotMultipleSPC: plot several SPC objects axis, see manual page examples","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-17-11-2015-01-30","dir":"Changelog","previous_headings":"","what":"aqp 1.7-11 (2015-01-30)","title":"aqp 1.7-11 (2015-01-30)","text":"fixed bugs addBrackets(), panel.depth_function(), plotSPC() new arguments addBrackets() allow annotation brackets","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-17-10-2015-01-15","dir":"Changelog","previous_headings":"","what":"aqp 1.7-10 (2015-01-15)","title":"aqp 1.7-10 (2015-01-15)","text":"names() method SoilProfileCollection objects returns concatenated vector horizon + site names siteNames() horizonNames() can now used extract SoilProfileCollection siteNames<- horizonNames<- can now used change names; experimental! note: internal structure SoilProfileCollection objects changing soon!!!","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-17-8-2014-12-08","dir":"Changelog","previous_headings":"","what":"aqp 1.7-8 (2014-12-08)","title":"aqp 1.7-8 (2014-12-08)","text":"texture.triangle.low.rv.high(): new arguments, likely breaking previous usage method=‘closest’, see manual page details","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-17-7-2014-11-06","dir":"Changelog","previous_headings":"","what":"aqp 1.7-7 (2014-11-06)","title":"aqp 1.7-7 (2014-11-06)","text":"CRAN release: 2014-11-13 bug fix c/o Jose Padarian: SPC objects now understand logical indexing rules removed spatial_subset(): functionality can accomplished outside AQP removes dependency rgeos package","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-17-6-2014-09-26","dir":"Changelog","previous_headings":"","what":"aqp 1.7-6 (2014-09-26)","title":"aqp 1.7-6 (2014-09-26)","text":"bug fix c/o Jos? Padarian: promoting coordinates @site, drop=FALSE required prevent single remaining attribute -graded vector– thanks! get.ml.hz() now returns “pseudo” Brier Score, using -likely horizon label “correct” value new function rgb2munsell() new function estimateSoilDepth() new function getSoilDepthClass() new documentation / tutorials","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-16-4-2014-02-14","dir":"Changelog","previous_headings":"","what":"aqp 1.6-4 (2014-02-14)","title":"aqp 1.6-4 (2014-02-14)","text":"applied single categorical variable, results slab() now contain attribute ‘original.levels’ contains original factor levels. important casting long->wide format, illegal column names scrubbed make.names(). process convert horizon designations like ‘2Bt’ ‘X2Bt’. can recover original horizon names via attr(x, 'original.levels').","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-16-3-2014-02-04","dir":"Changelog","previous_headings":"","what":"aqp 1.6-3 (2014-02-04)","title":"aqp 1.6-3 (2014-02-04)","text":"plotSPC() new argument: label, used set site-level attribute containing profile labels","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-16-2-2014-01-10","dir":"Changelog","previous_headings":"","what":"aqp 1.6-2 (2014-01-10)","title":"aqp 1.6-2 (2014-01-10)","text":"plotSPC() now registers plotting parameters environment aqp.env new function addVolumeFraction() annotating profile plots volumetric information (e.g. rock fragment volume)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-16-1-2013-12-31","dir":"Changelog","previous_headings":"","what":"aqp 1.6-1 (2013-12-31)","title":"aqp 1.6-1 (2013-12-31)","text":"plotSPC() attempts guess column contains horizon designations plotSPC() can now color horizons based continuous soil properties (e.g. clay content)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-16-2013-12-11","dir":"Changelog","previous_headings":"","what":"aqp 1.6 (2013-12-11)","title":"aqp 1.6 (2013-12-11)","text":"CRAN release: 2013-12-17 fixes several problems associated assumptions profile_compare() profile_compare() re-written soon work natively SPC objects","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-15-6-2013-11-25","dir":"Changelog","previous_headings":"","what":"aqp 1.5-6 (2013-11-25)","title":"aqp 1.5-6 (2013-11-25)","text":"new function addBracket() annotating profile sketches depth-brackets; useful plotting diagnostic features","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-15-6-2013-11-15","dir":"Changelog","previous_headings":"","what":"aqp 1.5-6 (2013-11-15)","title":"aqp 1.5-6 (2013-11-15)","text":"new function missingDataGrid() graphically describing presence missing data SPC object","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-15-2-2013-04-09","dir":"Changelog","previous_headings":"","what":"aqp 1.5-2 (2013-04-09)","title":"aqp 1.5-2 (2013-04-09)","text":"CRAN release: 2013-04-18 panel.depth_function() now prints “contributing fraction” values color corresponding depth-function lines shaded areas panel.depth_function() gains argument ‘cf.col’ manually specifying CF color panel.depth_function() gains argument ‘cf.interval’ manually specifying printed CF depths prepanel.depth_function() now extends x-lim 5% either direction cleaner-looking plots added details slab() documentation fixed minor bug min() max() methods SoilProfileCollection objects presence missing data min() max() methods SoilProfileCollection objects now second argument checking depth based presence data column","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-15-1-2013-03-07","dir":"Changelog","previous_headings":"","what":"aqp 1.5-1 (2013-03-07)","title":"aqp 1.5-1 (2013-03-07)","text":"previously identified horizonation errors may longer result ERRORS; sure test always checks NA overlapping horizons longer called initialization SoilProfileCollection objects note default behavior changed since version 1.5 moved related documentation test_hz_logic manual page new mini-vignette dealing bad data (dealing--bad-data.html) better documentation slice() new warnings related missing data grouping variable passed slab()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-15-2013-02-24","dir":"Changelog","previous_headings":"","what":"aqp 1.5 (2013-02-24)","title":"aqp 1.5 (2013-02-24)","text":"CRAN release: 2013-02-26 see ?profileApply examples see multi-variate example ?slab","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-14-7-2013-01-24","dir":"Changelog","previous_headings":"","what":"aqp 1.4-7 (2013-01-24)","title":"aqp 1.4-7 (2013-01-24)","text":"HTML version documentation (including images) auto-generated via knitr available r-forge website new function: texture.triangle.low.rv.high() plots texture data low-high range defined quantiles","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-14-6-2013-01-03","dir":"Changelog","previous_headings":"","what":"aqp 1.4-6 (2013-01-03)","title":"aqp 1.4-6 (2013-01-03)","text":"updated documentation SoilProfileCollection tutorial plans laid parallel processing slab() profileApply() via ‘parallel’ package plotSPC() gets density argument shaded coloring horizons","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-14-5-2012-12-29","dir":"Changelog","previous_headings":"","what":"aqp 1.4-5 (2012-12-29)","title":"aqp 1.4-5 (2012-12-29)","text":"new code much slimmer based aggregate() rather ddply function arguments changed sure check manual page user-supplied functions now much simpler write rely vectors rather data.frames (= faster) next major release contain additional examples use new features","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-14-2012-12-18","dir":"Changelog","previous_headings":"","what":"aqp 1.4 (2012-12-18)","title":"aqp 1.4 (2012-12-18)","text":"CRAN release: 2012-12-21 new function sim() simulation based template soil profile, proper documentation pending…","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-13-3-2012-12-06","dir":"Changelog","previous_headings":"","what":"aqp 1.3-3 (2012-12-06)","title":"aqp 1.3-3 (2012-12-06)","text":"new function subsetProfiles() simpler subsetting SoilProfileCollection objects via site horizon-level attributes get.ml.hz() now returns ‘confidence’ horizon (percent) added experimental ‘filter’ argument profile_compare()- see manual page usage added new argument plot.SoilProfileCollection()- alt.label: used add secondary labeling via data @site plot.SoilProfileCollection() now better job selecting location profile IDs based label length, font size, figure size","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-13-2-2012-11-01","dir":"Changelog","previous_headings":"","what":"aqp 1.3-2 (2012-11-01)","title":"aqp 1.3-2 (2012-11-01)","text":"minor tweaks plot.SoilProfileCollection() improved output small/large size collections new function get.ml.hz() attempts determine likely horizonation slabbing fixed bug profileApply() arguments FUN weren’t passed FUN missing data report profile_compare() now includes horizons data (e.g. Cr R horizons skipped)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-13-1-2012-10-17","dir":"Changelog","previous_headings":"","what":"aqp 1.3-1 (2012-10-17)","title":"aqp 1.3-1 (2012-10-17)","text":"splitProfiles() function longer defined/used/needed SoilProfiles single horizon confused subsetting presence spatial data","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-13-2012-10-07","dir":"Changelog","previous_headings":"","what":"aqp 1.3 (2012-10-07)","title":"aqp 1.3 (2012-10-07)","text":"CRAN release: 2012-10-10 function performs basic sanity checks, combine unlike objects","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-12-10-2012-09-05","dir":"Changelog","previous_headings":"","what":"aqp 1.2-10 (2012-09-05)","title":"aqp 1.2-10 (2012-09-05)","text":"fixed minor bug prepanel.depth_function() error occur input data NA","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-12-9-2012-08-31","dir":"Changelog","previous_headings":"","what":"aqp 1.2-9 (2012-08-31)","title":"aqp 1.2-9 (2012-08-31)","text":"new ‘unique’ method SoilProfileCollection objects, returns indices unique profiles fixed bug NAMESPACE caused error ‘sp’ library wasn’t loaded added another sanity check ‘site<-’ cases duplicates occur source data set added new documentation package help page see ‘help(aqp)’ details","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-12-8-2012-08-28","dir":"Changelog","previous_headings":"","what":"aqp 1.2-8 (2012-08-28)","title":"aqp 1.2-8 (2012-08-28)","text":"names() method SoilProfileCollection objects now returns named list horizon site column names improved examples: see ?sp4 ?ca630 fixed minor bug related subsetting SoilProfileCollection object, followed coercion SpatialPointsDataFrame","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-12-7-2012-08-23","dir":"Changelog","previous_headings":"","what":"aqp 1.2-7 (2012-08-23)","title":"aqp 1.2-7 (2012-08-23)","text":"CRAN release: 2012-08-27 plot() method SoilProfileCollection object longer sets page margins, cause figures change added demo ‘slope_effect_hz_thickness’","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-12-6-2012-06-26","dir":"Changelog","previous_headings":"","what":"aqp 1.2-6 (2012-06-26)","title":"aqp 1.2-6 (2012-06-26)","text":"fixed minor bug panel.depth_function(): grouping + paneling ignored full suite colors fixed minor bug NAMESPACE minor bug fix unroll(), previously respecting max depth argument minor speed-bump simplification profile_compare() documentation updates added helper message related profile_compare() stopping profile contains insufficient data profile_compare() now issues notice data missing, leading biased results slice() now computes fraction variables within slice missing data ! bug introduced slab() use.wts=TRUE [fix soon]","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-11-2012-04-18","dir":"Changelog","previous_headings":"","what":"aqp 1.1 (2012-04-18)","title":"aqp 1.1 (2012-04-18)","text":"slab() used places soil.slot() used soil.slot() disappear package NAMESPACE eventually, don’t use directly! minor bug fix panel.depth_function() cleanup documentation examples see ?sp1 ?random_profile new examples","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-10-2-2012-03-29","dir":"Changelog","previous_headings":"","what":"aqp 1.0-2 (2012-03-29)","title":"aqp 1.0-2 (2012-03-29)","text":"NAMESPACE cleaning","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-10-1-2012-03-28","dir":"Changelog","previous_headings":"","what":"aqp 1.0-1 (2012-03-28)","title":"aqp 1.0-1 (2012-03-28)","text":"Cleaned NAMESPACE DESCRIPTION removed un-necessary dependencies join added plyr imports added scales Imports well, removed rescaler() code, repaced scales::rescale hack munsell2rgb avoid ‘visible binding global variable ’munsell’ package R CMD check make whole thing robust (using load system.file rather data(…) Dylan now maintainer, per Uwe request using plyr **ply function, switched using .(foo) interface “foo” - seems foolproof","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-10-2012-03-26","dir":"Changelog","previous_headings":"","what":"aqp 1.0 (2012-03-26)","title":"aqp 1.0 (2012-03-26)","text":"CRAN release: 2012-03-27 1.0 release, still missing condensed vignettes- ready soon see https://casoilresource.lawr.ucdavis.edu/drupal/taxonomy/term/56 samples small bug profile_compare() fixed, slices evaluated ‘soil’ based bottom depth profile, presence actual data. See ?profile_compare details. change minor affect profile comparisons cases Cr R horizons (usually missing characterization data) extended arbitrary depth (usually 150 200 cm) maximum depth evaluation (max_d) set beyond actual depth profiles collection.","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-98-2012-03-02","dir":"Changelog","previous_headings":"","what":"aqp 0.99-9.8 (2012-03-02)","title":"aqp 0.99-9.8 (2012-03-02)","text":"horizon / site level data currently weighted equally NOTE: feature new, test-first! minor bug fixes profile_compare() remove spurious warnings better error check slice() removed old code documentation: format_slices() plot_slices()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-96-2012-02-21","dir":"Changelog","previous_headings":"","what":"aqp 0.99-9.6 (2012-02-21)","title":"aqp 0.99-9.6 (2012-02-21)","text":"warnings generated calling daisy() matrix NA typically occurred using -large lower depth evaluation D preliminary support diagnostic horizons via diagnostic_hz() new examples error warnings messages cleaned-","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-952-2012-01-31","dir":"Changelog","previous_headings":"","what":"aqp 0.99-9.52 (2012-01-31)","title":"aqp 0.99-9.52 (2012-01-31)","text":"converting messages passed user cat() message() warning() profile_compare() slab() now default progress bars, see ‘progress’ argument adjust means : profileApply(SPC, function(x) … ) operates x, soilProfileCollection containing profile_i note may break functionality based aqp 0.99-9.3","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-94-2012-01-09","dir":"Changelog","previous_headings":"","what":"aqp 0.99-9.4 (2012-01-09)","title":"aqp 0.99-9.4 (2012-01-09)","text":"means new SPC objects single column @site data, containing profile IDs override id.style=‘top’ id.style=‘side’ slice(SPC, 1:50 ~ . ) # means vars. ID, top, bottom automatically removed","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-91-2011-12-27","dir":"Changelog","previous_headings":"","what":"aqp 0.99-9.1 (2011-12-27)","title":"aqp 0.99-9.1 (2011-12-27)","text":"CRAN release: 2012-01-03 removed associated, suggested packages aqp soilDB CRAN shortly new argument plot(SoilProfileCollection, …, divide.hz=TRUE|FALSE) can optionally suppress plotting dividing lines horizons (suggested Ludwig Hilger) new function profileApply() applying functions profile","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-9-2011-12-22","dir":"Changelog","previous_headings":"","what":"aqp 0.99-9 (2011-12-22)","title":"aqp 0.99-9 (2011-12-22)","text":"CRAN release: 2011-12-27 almost ready AQP 1.0, vignettes last missing piece :) slice(SPC, …) now 10-100x faster, scales linearly slice(SPC, …) can simultaneously slice categorical continuous variables converted ID column sample data character class fixed bug slice() NA returned IDs factors added test depths()<- factor IDs converted character IDs warning issued added join conditions functions using plyr::join(), resulting less chatter console","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-858-2011-12-21","dir":"Changelog","previous_headings":"","what":"aqp 0.99-8.58 (2011-12-21)","title":"aqp 0.99-8.58 (2011-12-21)","text":"WARNING: soil.slot.multiple() renamed slab() fixed minor bug slice(), numerical IDs used: ddply() cast() implicitly re-order data… enforce quality control strict=TRUE check conversion within function prevent segfaults documentation updates, demo(aqp) updates, examples bug fix slice(), now works numeric categorical vars, … s[, j] —> profile index, j horizon/slice index s[, ] returns SoilProfileCollection s[, j] returns SpatialPointsDataFrame single slice used spatial_subset() can used extract members SoilProfileCollection geometry (uses rgeos) smarter $<- methods site/horizon data slots auto-selected","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-850-2011-11-29","dir":"Changelog","previous_headings":"","what":"aqp 0.99-8.50 (2011-11-29)","title":"aqp 0.99-8.50 (2011-11-29)","text":"added “site(SoilProfileCollection) <-” method data.frame started basic AQP Introduction vignette… still experimental adding coercion methods common objects sp-class objects s[, j] —> profile index, j horizon/slice index returns selected variables along depth slice(s) (.e. aggregation) added NAMESPACE file R >= 2.14 compatibility stabilized S4 class, working S4-izing related functions preliminary documentation new S4 classes/methods logistic power peak (LPP) can now used generate synthetic depth functions added contributing fraction annotation panel.depth_function()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-84-2011-10-04","dir":"Changelog","previous_headings":"","what":"aqp 0.99-8.4 (2011-10-04)","title":"aqp 0.99-8.4 (2011-10-04)","text":"minor bug fixes enhancements PedonPC function S4 interface soil.slot.multiple()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-82-2011-09-21","dir":"Changelog","previous_headings":"","what":"aqp 0.99-8.2 (2011-09-21)","title":"aqp 0.99-8.2 (2011-09-21)","text":"supersedes (now removed) S3 SoilProfileList classes basic accessors/setters place, subject change initSoilProfileList() longer supported; see depths() similar functionality expect tumultuous times ahead API… ironed 1.0 release","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-8-2011-09-14","dir":"Changelog","previous_headings":"","what":"aqp 0.99-8 (2011-09-14)","title":"aqp 0.99-8 (2011-09-14)","text":"CRAN release: 2011-09-16 soil.slot() now accept boundaries defining ‘slab’ aggregates computed two changes make possible ask: “wt. mean value property within slab, among groups?” soil.slot.multiple() now uses formula interface: NOTE break existing scripts (sorry)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-7-2011-09-01","dir":"Changelog","previous_headings":"","what":"aqp 0.99-7 (2011-09-01)","title":"aqp 0.99-7 (2011-09-01)","text":"new functions getting data PedonPC (MS Access) databases [windows now] get_site_data_from_pedon_db() : site pedon aggregate data get_hz_data_from_pedon_db() : horizon level data get_colors_from_pedon_db() : formats mixes multiple colors / horizon implemented mix_and_clean_colors() test_hz_logic() : basic function testing horizon logic, returns TRUE/FALSE ID parallel operations now NON-functional, wait plyr support doSMP… new ID plotting style profile_plot() : handy plotting large collections /long IDs","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-4-2011-08-15","dir":"Changelog","previous_headings":"","what":"aqp 0.99-4 (2011-08-15)","title":"aqp 0.99-4 (2011-08-15)","text":"code documentation clean-mapunit_geom_by_ll_bbox() : get map unit geometry bounding box MUKEYS_by_ll_bbox() : get map unit keys bounding box SDA_query() : retrieve soil tabular data via query written SQL additional customization added plotSPC two new sample data sets + examples","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-099-1-2011-01-26","dir":"Changelog","previous_headings":"","what":"aqp 0.99-1 (2011-01-26)","title":"aqp 0.99-1 (2011-01-26)","text":"CRAN release: 2011-02-28 plyr >= 1.4, foreach, doMC packages required specific examples yet documented, soon feature still experimental! testing advised profile_compare() now calculates slice-wise dissimilarity matrices 1/3 time (thanks llply!)","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-098-4-2010-12-15","dir":"Changelog","previous_headings":"","what":"aqp 0.98-4 (2010-12-15)","title":"aqp 0.98-4 (2010-12-15)","text":"fixed minor bug soil.slot() computing probabilities profiles missing horizons single class within variable aggregated","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-098-1-2010-11-23","dir":"Changelog","previous_headings":"","what":"aqp 0.98-1 (2010-11-23)","title":"aqp 0.98-1 (2010-11-23)","text":"added basic demo: demo(aqp) soil.slot() now computes aggregate probabilities user-defined segments aqp package now requires Hmisc package using Hmisc::wtd.{mean,var,quantile} compute values better adjustment weights computing weighted SD fixes long-standing bugs wt. mean/SD NA present x_i wt_i addition new (experimental) S4 classes methods now aqp_S4 branch added n.depth.ticks option profile_plot() profile_compare() algorithm stabilized, new default settings note cause changes numerical classification soil profiles","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-097-1-2010-10-06","dir":"Changelog","previous_headings":"","what":"aqp 0.97-1 (2010-10-06)","title":"aqp 0.97-1 (2010-10-06)","text":"verified weighted standard deviations correct seg_size > 1 removed notices possible problems sd calculations","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-097-2010-09-22","dir":"Changelog","previous_headings":"","what":"aqp 0.97 (2010-09-22)","title":"aqp 0.97 (2010-09-22)","text":"CRAN release: 2010-09-24 soil.slot() streamlined functionality restored pre-0.95 condition","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-096-1-2010-09-21","dir":"Changelog","previous_headings":"","what":"aqp 0.96-1 (2010-09-21)","title":"aqp 0.96-1 (2010-09-21)","text":"wt. mean / SD still disabled user-defined segment sizes","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-096-2010-09-20","dir":"Changelog","previous_headings":"","what":"aqp 0.96 (2010-09-20)","title":"aqp 0.96 (2010-09-20)","text":"temporarily disabled parallel computation, re-added next release bug fixes panel.depth_function ‘groups’ defined SD values probably low due inflated ‘n’ calculation calculation weighted mean sd currently disabled","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-095-2010-09-15","dir":"Changelog","previous_headings":"","what":"aqp 0.95 (2010-09-15)","title":"aqp 0.95 (2010-09-15)","text":"added experimental support parallel processing based latest versions plyr, doMC, foreach packages updated vignette technical details aggregation dissimilarity computation new options profile_plot()","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-094-2010-08-11","dir":"Changelog","previous_headings":"","what":"aqp 0.94 (2010-08-11)","title":"aqp 0.94 (2010-08-11)","text":"CRAN release: 2010-08-14 fixed bug soil.slot() aggregating categorical variable, user-supplied segmenting vector soil.slot() now requires categorical variables encoded factors","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-093-2010-08-07","dir":"Changelog","previous_headings":"","what":"aqp 0.93 (2010-08-07)","title":"aqp 0.93 (2010-08-07)","text":"bug fixes, new documentation + examples AQP now requires R >= 2.9.0","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-092-2010-08-03","dir":"Changelog","previous_headings":"","what":"aqp 0.92 (2010-08-03)","title":"aqp 0.92 (2010-08-03)","text":"including new column results soil.slot(), denoting number profiles used slice-wise aggregation added note soil.slot() manual page highlighting possible problems SD calculation","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-090-2010-07-13","dir":"Changelog","previous_headings":"","what":"aqp 0.90 (2010-07-13)","title":"aqp 0.90 (2010-07-13)","text":"CRAN release: 2010-07-24 better error checking profile aggregation classification functions functions now require horizon depths integers","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-089-2010-07-10","dir":"Changelog","previous_headings":"","what":"aqp 0.89 (2010-07-10)","title":"aqp 0.89 (2010-07-10)","text":"added plot_distance_graph() function visualizing -profile dissimilarity updated documentation: extended manual now accessible vignette appears create much realistic groupings shallow deep soils collection new functionality requires testing plotting dendrograms generated ape::plot.phylo() may need manual adjustments","code":""},{"path":"https://ncss-tech.github.io/aqp/news/index.html","id":"aqp-088-2010-07-06","dir":"Changelog","previous_headings":"","what":"aqp 0.88 (2010-07-06)","title":"aqp 0.88 (2010-07-06)","text":"CRAN release: 2010-07-08 new version plyr (1.0) speed functions aqp package added support user-defined aggregate functions soil.slot soil.slot.multiple planning addition PCA depth slice planning addition equal-area spline fitting","code":""}]
